#+title: Default Config
#+property: :header-args: :comments none

* ZSH
#+begin_src shell :tangle ~/.zshenv
  export XDG_DATA_HOME="$HOME/.local/share"
  export XDG_CONFIG_HOME="$HOME/.config"
  export XDG_CACHE_HOME="$HOME/.cache"

  export EDITOR="emacsclient -tty -a \"\""
  export VISUAL="emacsclient -c -a \"\""

  export QMK_HOME="~/Documents/Projects/qmk_firmware"

  [ -d /usr/local/opt/ruby/bin ] && \
      path=( /usr/local/opt/ruby/bin $path )

  [ -d /usr/local/opt/ruby/libexec/gembin ] && \
      path=( /usr/local/opt/ruby/libexec/gembin $path )

  [ -d /Library/TeX/texbin ] && \
      path=( /Library/TeX/texbin $path )

  [ -d /usr/local/sbin ] && \
      path=( /usr/local/sbin $path )

  typeset -U PATH path
#+end_src

* NCMPCPP
:PROPERTIES:
:header-args: :tangle ~/.config/ncmpcpp/config
:END:

#+begin_src conf
  mpd_host = localhost
  mpd_port = 6600
  mpd_music_dir = "~/Music/Music Files"

  progressbar_look = "─░─"
  display_volume_level = no
  user_interface = alternative
  ignore_leading_the = yes
  media_library_hide_album_dates = yes
  media_library_primary_tag = album_artist
#+end_src

* MPD
:PROPERTIES:
:header-args: :tangle ~/.mpd/mpd.conf
:END:

#+begin_src conf
  music_directory    "~/Music/Music Files"
  playlist_directory "~/Music/Playlists"
  db_file            "~/.mpd/database"
  pid_file           "~/.mpd/pid"
  state_file         "~/.mpd/state"
  sticker_file       "~/.mpd/sticker.sql"
  log_file           "~/.mpd/log"
  port               "6600"
  #auto_update        "yes"
#+end_src

#+begin_src conf :tangle (if (eq system-type 'darwin) "~/.mpd/mpd.conf" "no")
  audio_output {
  type       "osx"
  name       "CoreAudio"
  mixer_type "software"
  }
#+end_src

#+begin_src conf :tangle (if (eq system-type 'gnu/linux) "~/.mpd/mpd.conf" "no")
  audio_output {
  type "pulse"
  name "pulse audio"
  }
#+end_src
* Beets
:PROPERTIES:
:header-args: :tangle ~/.config/beets/config.yaml
:END:

#+begin_src yaml
  directory: "~/Music/Music Files"
  library: ~/.config/beets/musiclibrary.blb
  original_date: yes
  languages: en
  import:
    move: yes
  plugins: fetchart ftintitle mpdupdate smartplaylist embedart
  embedart:
    auto: yes
  mpdupdate:
    host: localhost
    port: 6600
  smartplaylist:
    playlist_dir: ~/Music/Playlists
    playlists:
      - name: all.m3u
        query: ''                  # Matches all music in your library
  playlist:
    auto: no
    relative_to: ~/Music
    playlist_dir: ~/Music/Playlists
  replace:
    '[\\/]': _
    '^\.': _
    '[\x00-\x1f]': _
    '[<>:"\?\*\|]': _
    '\s+$': ''
    '^\s+': ''
    '^-': _
  paths:
      default: $albumartist/$album%aunique{}/$track $title
      singleton: Non-Album/$artist/$title
      comp: Compilations/$album%aunique{}/$track $title
#+end_src

* Hushlogin

#+begin_src conf :tangle ~/.hushlogin
  # Silence
#+end_src

* Tmux
#+begin_src conf :tangle ~/.tmux.conf
  set-window-option -g mode-keys emacs
  unbind-key C-b
  set-option -g prefix C-']'
  bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
#+end_src

* Youtube DL
#+begin_src conf :tangle ~/.config/youtube-dl/config
  -o ~/Downloads/%(title)s-%(id)s.%(ext)s
#+end_src

* SSH

#+begin_src conf
  Host *
       ControlPath ~/.ssh/master-%h:%p
       ControlMaster auto
       ControlPersist 10m
       AddKeysToAgent yes
       IdentitiesOnly yes
       UseKeychain yes
       IdentityFile ~/.ssh/id_rsa
  Host router
       Hostname 192.168.1.1
       User root
#+end_src
* MPV
 #+begin_src conf :tangle ~/.config/mpv/mpv.conf
   screenshot-directory=~/Downloads/
   screenshot-format=jpg
   screenshot-template="%F-%whh%wMm%wSs%wT"

   #ytdl-format='bestvideo[height<=720][fps<=30]+bestaudio[ext=m4a]/bestvideo[height<=720]+bestaudio'

   save-position-on-quit
   hwdec

   af="lavfi=[dynaudnorm=f=75:g=25:n=0:p=0.58]"
 #+end_src

 #+begin_src conf :tangle ~/.config/mpv/input.conf
   z           no-osd async screenshot video
   WHEEL_UP    ignore
   WHEEL_DOWN  ignore
   WHEEL_RIGHT ignore
   WHEEL_LEFT  ignore
 #+end_src

* Git
#+begin_src gitignore :tangle ~/.config/git/ignore
  .DS_Store
  ,*~
  \#*\#
  .\#*
  ,*.elc
  ,*.pyc
#+end_src

#+begin_src conf :tangle ~/.config/git/config
  [core]
          excludesfile = ~/.config/git/ignore
          quotepath = false
          editor = emacsclient
          ignorecase = false

  [user]
          name = Geoff MacIntosh
          email = geoff@mac.into.sh

  [color]
          diff = auto
          status = auto
          branch = auto
          interactive = auto
          ui = auto

  [diff]
          renameLimit = 5000

  [pull]
          rebase = false

  [init]
          defaultBranch = main

  [fetch]
          prune = true
          pruneTags = true

  [diff "org"]
        xfuncname = "^\\*+.*"

  [diff "lisp"]
        xfuncname = "^\\([^ ]+ [^ ]+"
#+end_src

#+begin_src conf :tangle (if (eq system-type 'darwin) "~/.config/git/config" "no")
  [credential]
            helper = osxkeychain
#+end_src

#+begin_src conf :tangle ~/.config/git/attributes
  ,,*.org   diff=org
  ,,*.lisp  diff=lisp
  ,,*.el    diff=lisp
  ,,*.hy    diff=lisp
  ,,*.scm   diff=lisp
#+end_src

* Fish
** Main Config

#+begin_src fish :tangle ~/.config/fish/config.fish
  function __fish_describe_command; end # Fixes issues with Catalina

  # set __fish_git_prompt_show_informative_status "yes"
  # set __fish_git_prompt_char_dirtystate "+"

  function fish_greeting; end
  function fish_title; end

  abbr -a -- - prevd
  abbr -a -- = nextd

  abbr -a yt  youtube-dl
  abbr -a yta youtube-dl -x --audio-format best
  abbr -a dired emacsclient --tty -a "emacs -nw" $PWD

  if not functions -q fisher
      set -q XDG_CONFIG_HOME; or set XDG_CONFIG_HOME ~/.config
      curl https://git.io/fisher --create-dirs -sLo $XDG_CONFIG_HOME/fish/functions/fisher.fish
      fish -c fisher
  end

  if type brew > /dev/null 2>&1
      set -gx HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK 1
  end
#+end_src

#+begin_src fish :tangle ~/.config/fish/fishfile
   jethrokuan/z
  # jorgebucaran/fish-bax
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/fish_prompt.fish
  function prompt_ssh -d "Check to see if in an SSH session."
      if test -n "$SSH_CLIENT"
          printf '%s@%s ' (whoami) (hostname -s)
      end
  end

  function prompt_cwd -d "Display the current working directory."
      # set_color $fish_color_cwd
      printf '%s' (prompt_pwd)
      set_color normal
  end

  function prompt_git -d "Display git status in the prompt"
      printf '%s' (__fish_git_prompt)
  end

  function fish_prompt -d "The prompt for fish"
      prompt_ssh
      prompt_cwd
      prompt_git
      printf ' ❯ '
  end
#+end_src

** Manp

#+begin_src fish :tangle ~/.config/fish/functions/fish_user_key_bindings.fish
  bind \ef forward-bigword
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/manp.fish
  function manp  -d "Open man pages as PDF documents"
      if type open > /dev/null 2>&1
          man -t $argv | open -f -a Preview
      else
          man $argv
      end
  end
#+end_src

** FLAC/ALAC

#+begin_src fish :tangle ~/.config/fish/functions/flac-alac.fish
  function flac-alac -d "Convert flac to alac"
      if type ffmpeg > /dev/null 2>&1
           for f in *.flac; ffmpeg -i $f -acodec alac -vsync 2 -c:v copy $f.m4a; end;
      else
          echo "Install FFMPEG with ALAC support."
      end
  end
#+end_src

** Brace expansion
convert company-logo.{svg,png} # Convert a SVG vector graphics file into a PNG raster graphics file. This uses brace expansion to generate the names to pass to ImageMagick's convert command.
** Stabilize
*** Requirements
You'll need ffmpeg built =-with-libvidstab= in homebrew, as in

#+begin_src shell
  brew install varenc/ffmpeg/ffmpeg --with-libvidstab
#+end_src

*** Steps
Analyse the video with default or more intense settings. This is step one and doesn't actually make a video.

#+begin_src shell
  ffmpeg -i input.mov -vf vidstabdetect -f null -
#+end_src

*** References
- [[https://github.com/georgmartius/vid.stab][vid.stab]]
** Split a FLAC file
I didn't actually know that FLAC files could be produced as a single file for an entire album, as that seems insane. In order to turn them into useful files you need ~shntool~ and ~flac~ in Nix. Then run this in the correct directory:

#+begin_src shell
  shnsplit -f *.cue -t "%n-%t" -o flac *.flac
#+end_src

This seems to work as of 9 May 2020 with Fish v3.1.2. Obviously you then want to turn the flac files into more playable files or something.

*References*
- [[https://unix.stackexchange.com/questions/10251/how-do-i-split-a-flac-with-a-cue][command line - How do I split a flac with a cue? - Unix & Linux Stack Exchange]] [2020-05-09 Sat]

** Dict
#+begin_src fish :tangle ~/.config/fish/functions/dict.fish
  function dict -d "Overload the dict function to keep a log"
      command dict "$argv" | less
      printf "%s %s\n" (date) "$argv" >> ~/org/meta/dictlog
  end

#+end_src
* Kitty
:PROPERTIES:
:header-args: :tangle ~/.config/kitty/kitty.conf
:END:

#+begin_src conf
  cursor_blink_interval 0
  shell fish
  close_on_child_death yes
  editor emacs
  tab_bar_style separator
  tab_separator "  "
  # tab_activity_symbol "*"
  foreground #000000
  background #FFFFFF
#+end_src

* Mbsync

#+begin_src conf :tangle ~/.mbsyncrc :comments none
    IMAPAccount fastmail
    Host imap.fastmail.com
    Port 993
    User gmacintosh@fastmail.fm
    PassCmd "pass mbsync.fastmail.com"
    SSLType IMAPS

    IMAPStore fastmail-remote
    Account fastmail

    MaildirStore fastmail-local
    Path ~/Mail/
    Inbox ~/Mail/INBOX
    SubFolders Verbatim

    Channel fastmail
    Far :fastmail-remote:
    Near :fastmail-local:
    Patterns *
    Expunge None
    CopyArrivalDate yes
    Sync All
    Create Far
    SyncState *
#+end_src

* GPG
#+begin_src conf :tangle ~/.gnupg/gpg-agent.conf
  allow-emacs-pinentry
  #allow-loopback-entry
#+end_src

#+begin_src conf :tangle (if (eq system-type 'darwin) "~/.gnupg/gpg-agent.conf" "no")
  pinentry-program /usr/local/bin/pinentry-mac
#+end_src

* Postfix
Append the following to the end of ~/etc/postfix/main.cf~.

#+begin_src conf
  relayhost = [smtp.fastmail.com]:587
  smtp_sasl_auth_enable = yes
  smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
  smtp_sasl_security_options = noanonymous
  smtp_sasl_mechanism_filter = plain
  smtp_use_tls = yes
  smtp_tls_security_level = encrypt
  # smtp_tls_mandatory_ciphers = high
  # smtp_tls_verify_cert_match = nexthop
  # smtp_sasl_tls_security_options = noanonymous
  # smtp_tls_CAfile = /etc/postfix/ssl/ca-bundle.crt
#+end_src

You can test the syntax of the config via the following command:

#+begin_src shell :dir /sudo:: :results replace
  sudo postfix check
#+end_src

Create a ~/etc/postfix/sasl_passwd~ file with the following setup.

#+begin_src conf :tangle /sudo::/etc/postfix/sasl_passwd
  [smtp.fastmail.com]:587 gmacintosh#fastmail.fm:applicationspecificpassword
#+end_src

Then turn the password into the correct format. After running the command a file called ~sasl_passwd.db~ should be created. This means that you should be able to delete the sasl_passwd file, thus no-longer storing your password in plain text, but I have not tested this.

#+begin_src shell :dir /sudo:: :results replace
  sudo postmap /etc/postfix/sasl_passwd
#+end_src

Then I had a lot of errors with aliases that I don't understand, but this fixes it:

#+begin_src shell :dir /sudo:: :results replace
  sudo postalias /etc/postfix/aliases
#+end_src
