#+title: Default Config

* ZSH
#+begin_src shell :tangle ~/.zshrc
  export XDG_DATA_HOME="$HOME/.local/share"
  export XDG_CONFIG_HOME="$HOME/.config"
  export XDG_CACHE_HOME="$HOME/.cache"

  export EDITOR="emacsclient -tty -a \"\""
  export VISUAL="emacsclient -c -a \"\""

  #export GOPATH="$XDG_DATA_HOME/go"

  if [ -x /bin/kitty ] ; then
      export $TERMINAL /bin/kitty
  fi

  export GNUPGHOME="$XDG_DATA_HOME/gnupg"
  export LESSHISTFILE="$XDG_CACHE_HOME/less/history"

  #export PATH=$GOPATH/bin:$PATH
  export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
  export PATH="/usr/local/sbin:$PATH"

#+end_src

* NCMPCPP
:PROPERTIES:
:header-args: :tangle ~/.config/ncmpcpp/config
:END:

#+begin_src conf
  mpd_host = localhost
  mpd_port = 6600
  mpd_music_dir = ~/Music/beets

  progressbar_look = "─░─"
  display_volume_level = no
  user_interface = alternative
  ignore_leading_the = yes
  media_library_hide_album_dates = yes
  media_library_primary_tag = album_artist
#+end_src

* MPD
:PROPERTIES:
:header-args: :tangle ~/.mpd/mpd.conf
:END:

#+begin_src conf
  music_directory    "~/Music/beets"
  playlist_directory "~/Music/playlists"
  db_file            "~/.mpd/database"
  pid_file           "~/.mpd/pid"
  state_file         "~/.mpd/state"
  sticker_file       "~/.mpd/sticker.sql"
  log_file           "~/.mpd/log"
  port               "6600"
  #auto_update        "yes"
#+end_src

[[file:macos.org::*MPD][MPD Mac Config]]

#+begin_src conf
  include_optional "mac.conf"
#+end_src

* Beets
:PROPERTIES:
:header-args: :tangle ~/.config/beets/config.yaml
:END:

#+begin_src yaml
  directory: ~/Music/Music/
  library: ~/.config/beets/musiclibrary.blb
  import:
    move: yes
  plugins: fetchart ftintitle mpdupdate smartplaylist embedart
  embedart:
    auto: yes
  mpdupdate:
    host: localhost
    port: 6600
  smartplaylist:
    playlist_dir: ~/Music/playlists
    playlists:
      - name: all.m3u
        query: ''                  # Matches all music in your library
  playlist:
      auto: no
      relative_to: ~/Music
      playlist_dir: ~/Music/playlists
#+end_src

* Hushlogin

#+begin_src text :tangle ~/.hushlogin
  # Silence
#+end_src
* Tmux
#+begin_src conf :tangle ~/.tmux.conf
  set-window-option -g mode-keys emacs
  unbind-key C-b
  set-option -g prefix C-']'
  bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
#+end_src
* Youtube DL
#+begin_src conf :tangle ~/.config/youtube-dl/config
  -o ~/Downloads/%(title)s-%(id)s.%(ext)s
#+end_src
* SSH

#+begin_src conf
  Host *
       ControlPath ~/.ssh/master-%h:%p
       ControlMaster auto
       ControlPersist 10m
       AddKeysToAgent yes
       IdentitiesOnly yes
       UseKeychain yes
       IdentityFile ~/.ssh/id_rsa
  Host router
       Hostname 192.168.1.1
       User root
#+end_src
* MPV
 #+begin_src conf :tangle ~/.config/mpv/mpv.conf
   screenshot-directory=~/Downloads/
   screenshot-format=jpg
   screenshot-template="%F-%whh%wMm%wSs%wT"

   ytdl-format='bestvideo[height<=720][fps<=30]+bestaudio[ext=m4a]/bestvideo[height<=720]+bestaudio'

   save-position-on-quit
   hwdec

   af="lavfi=[dynaudnorm=f=75:g=25:n=0:p=0.58]"
 #+end_src

 #+begin_src conf :tangle ~/.config/mpv/input.conf
   z           no-osd async screenshot video
   WHEEL_UP    ignore
   WHEEL_DOWN  ignore
   WHEEL_RIGHT ignore
   WHEEL_LEFT  ignore
 #+end_src

* Git
#+begin_src gitignore :tangle ~/.config/git/ignore
  .DS_Store
  ,*~
  \#*\#
  .\#*
  ,*.elc
  ,*.pyc
#+end_src

#+begin_src conf :tangle ~/.config/git/config
  [core]
          excludesfile = ~/.config/git/ignore
          quotepath = false
          editor = emacsclient
          ignorecase = false

  [user]
          name = Geoff MacIntosh
          email = geoff@mac.into.sh

  [color]
          diff = auto
          status = auto
          branch = auto
          interactive = auto
          ui = auto

  [credential]
          helper = osxkeychain

  [diff]
          renameLimit = 5000

  [http]
  #	sslcainfo = ~/.nix-profile/etc/ssl/certs/ca-bundle.crt

  [pull]
          rebase = false

  [init]
          defaultBranch = main

  [fetch]
          prune = true
          pruneTags = true
#+end_src
* Fish
:PROPERTIES:
:ID:       2F8CA9BB-72E2-49E4-9D82-A64AB298B44D
:END:

#+begin_src fish :tangle ~/.config/fish/config.fish
  if functions -q bax; and test -e ~/.nix-profile/etc/profile.d/nix.sh
      bax ". ~/.nix-profile/etc/profile.d/nix.sh"
  end

  set -gx XDG_CACHE_HOME $HOME/.cache
  set -gx XDG_DATA_HOME $HOME/.local/share
  set -gx XDG_CONFIG_HOME $HOME/.config

  set -gx WGETRC $XDG_CONFIG_HOME/wgetrc

  set -gx VISUAL "emacsclient -c -a \"\""
  set -gx EDITOR "emacsclient -tty -a \"\""

  set -gx QMK_HOME "~/Documents/Projects/qmk_firmware"

  function __fish_describe_command; end # Fixes issues with Catalina

  # set __fish_git_prompt_show_informative_status "yes"
  # set __fish_git_prompt_char_dirtystate "+"

  function fish_greeting; end
  function fish_title; end

  #alias pass="gopass"
  #alias tmux="tmux -f ~/.config/tmux.conf"

  abbr -a -- - prevd
  abbr -a -- = nextd

  abbr -a yt  youtube-dl
  abbr -a yta youtube-dl -x --audio-format best
  abbr -a dired emacsclient --tty -a "emacs -nw" $PWD

  if test -e /usr/local/sbin
      set -gx PATH /usr/local/sbin $PATH
  end

  #  if test -e /Library/TeX/texbin
  #      set -gx PATH $PATH /Library/TeX/texbin
  #  end

  # Brew's relationship to ruby is weird but I can't make it work with
  # Nix yet.
  if test -e /usr/local/lib/ruby/gems/3.0.0/bin
      set -gx PATH /usr/local/lib/ruby/gems/3.0.0/bin $PATH
      set -gx PATH /usr/local/opt/ruby/bin $PATH
  end

  if test -e /opt/local/bin
      set -gx PATH /opt/local/bin $PATH
      set -gx PATH /opt/local/sbin $PATH
  end

  if not functions -q fisher
      set -q XDG_CONFIG_HOME; or set XDG_CONFIG_HOME ~/.config
      curl https://git.io/fisher --create-dirs -sLo $XDG_CONFIG_HOME/fish/functions/fisher.fish
      fish -c fisher
  end

  if type brew > /dev/null 2>&1
      set -gx HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK 1
  end
#+end_src

#+begin_src fish :tangle ~/.config/fish/fishfile
  jethrokuan/z
  jorgebucaran/fish-bax
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/fish_prompt.fish
  function prompt_ssh -d "Check to see if in an SSH session."
      if test -n "$SSH_CLIENT"
          printf '%s@%s ' (whoami) (hostname -s)
      end
  end

  function prompt_cwd -d "Display the current working directory."
      # set_color $fish_color_cwd
      printf '%s' (prompt_pwd)
      set_color normal
  end

  function prompt_git -d "Display git status in the prompt"
      printf '%s' (__fish_git_prompt)
  end

  function fish_prompt -d "The prompt for fish"
      prompt_ssh
      prompt_cwd
      prompt_git
      printf ' ❯ '
  end
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/fish_user_key_bindings.fish
  bind \ef forward-bigword
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/manp.fish
  function manp  -d "Open man pages as PDF documents"
      if type open > /dev/null 2>&1
          man -t $argv | open -f -a Preview
      else
          man $argv
      end
  end
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/flac-alac.fish
  function flac-alac -d "Convert flac to alac"
      if type ffmpeg > /dev/null 2>&1
          echo yay
      else
          echo "Install FFMPEG with ALAC support."
      end
  end
#+end_src

** Brace expansion
convert company-logo.{svg,png} # Convert a SVG vector graphics file into a PNG raster graphics file. This uses brace expansion to generate the names to pass to ImageMagick's convert command.
** Stabilize
*** Requirements
You'll need ffmpeg built =-with-libvidstab= in homebrew, as in

#+begin_src shell
  brew install varenc/ffmpeg/ffmpeg --with-libvidstab
#+end_src

*** Steps
Analyse the video with default or more intense settings. This is step one and doesn't actually make a video.

#+begin_src shell
  ffmpeg -i input.mov -vf vidstabdetect -f null -
#+end_src

*** References
- [[https://github.com/georgmartius/vid.stab][vid.stab]]
** Split a FLAC file
I didn't actually know that FLAC files could be produced as a single file for an entire album, as that seems insane. In order to turn them into useful files you need ~shntool~ and ~flac~ in Nix. Then run this in the correct directory:

#+begin_src shell
  shnsplit -f *.cue -t "%n-%t" -o flac *.flac
#+end_src

This seems to work as of 9 May 2020 with Fish v3.1.2. Obviously you then want to turn the flac files into more playable files or something.

*References*
- [[https://unix.stackexchange.com/questions/10251/how-do-i-split-a-flac-with-a-cue][command line - How do I split a flac with a cue? - Unix & Linux Stack Exchange]] [2020-05-09 Sat]
