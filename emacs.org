#+title: Emacs

* Early Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/early-init.el
:END:

#+begin_src emacs-lisp :comments no
  ;;; early-init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
  (setq load-prefer-newer t)
  (setq frame-inhibit-implied-resize t)
  (setq org-directory (expand-file-name "~/org/"))
#+end_src

#+begin_src emacs-lisp
  (setq package-quickstart-file (expand-file-name "var/package-quickstart.el" user-emacs-directory))
  (when (file-exists-p package-quickstart-file)
    (setq package-quickstart t))
#+end_src

#+begin_src emacs-lisp
  (when (boundp 'comp-eln-load-path)
    (setcar (nthcdr 0 comp-eln-load-path)
     (expand-file-name "var/eln/" user-emacs-directory)))
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-original-gc-cons-threshold gc-cons-threshold
    "Original value for `gc-cons-threshold'.")
  (defvar actuator-original-gc-cons-percentage gc-cons-percentage
    "Original value for `gc-cons-percentage'.")
  (defvar actuator-engorged-gc-cons-threshold (* 5 1000 1000 1000)
    "Enlarged `gc-cons-threshold'.")
  (defvar actuator-engorged-gc-cons-percentage 0.6
    "Enlarged `gc-cons-percentage'.")

  (defun actuator-restore-gc ()
    "Restore `gc-cons-threshold' and `gc-cons-percentage' value."
    (setq gc-cons-threshold  actuator-original-gc-cons-threshold)
    (setq gc-cons-percentage actuator-original-gc-cons-percentage)
    (garbage-collect))

  (defun actuator-engorge-gc ()
    "Set `gc-cons-threshold' and `gc-cons-percentage' to huge numbers."
    (setq gc-cons-threshold actuator-engorged-gc-cons-threshold)
    (setq gc-cons-percentage actuator-engorged-gc-cons-percentage))

  (actuator-engorge-gc)
  (add-hook 'after-init-hook #'actuator-restore-gc)
#+end_src

#+begin_src emacs-lisp :comments no
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :mkdirp yes
:END:
** Lexical Binding
#+begin_src emacs-lisp :comments no
  ;;; init.el -*- lexical-binding: t; -*-
#+end_src

** Csetq
https://lists.gnu.org/archive/html/help-gnu-emacs/2015-12/msg00097.html

#+begin_src emacs-lisp
  (defmacro csetq (variable value)
        "Macro to set the value of a variable, possibly a custom user option."
        `(funcall (or (get ',variable 'custom-set)
                      (and (plist-member (symbol-plist ',variable)
                                         'standard-value)
                           'set-default)
                      'set)
                  ',variable ,value))
#+end_src

** Package Init

#+begin_src emacs-lisp
  (require 'package)
  ;;(package-initialize)

  (csetq package-archives
        '(("org"    . "https://orgmode.org/elpa/")
          ("melpa"  . "https://melpa.org/packages/")
          ("gnu"    . "https://elpa.gnu.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (csetq package-archive-priorities '(("org"   . 40)
                                     ("melpa" . 30)
                                     ("gnu"   . 20)
                                     ("nongnu". 10)))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq package-selected-packages nil)
  (add-to-list 'package-selected-packages 'use-package)
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package nil t))
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-var-directory (expand-file-name (convert-standard-filename "var/") user-emacs-directory))
  (make-directory actuator-var-directory t)
#+end_src

** Exec path from shell
#+begin_src emacs-lisp
  (when (file-attributes "/usr/local/sbin" t)
    (add-to-list 'exec-path "/usr/local/sbin"))

  (when (file-attributes "/usr/local/bin" t)
    (add-to-list 'exec-path "/usr/local/bin"))

  (when (file-attributes "/Library/TeX/texbin" t)
    (add-to-list 'exec-path "/Library/TeX/texbin"))

  (when (file-attributes "/opt/local/bin" t)
    (add-to-list 'exec-path "/opt/local/bin"))

  (when (file-attributes "/opt/local/sbin" t)
    (add-to-list 'exec-path "/opt/local/sbin"))
#+end_src

* Stable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :comments link :noweb yes
:END:
** Custom-set Variables

#+begin_src emacs-lisp
  (csetq custom-file (expand-file-name "custom.el" actuator-var-directory))
  (defun actuator-load-custom-file ()
    "The most basic of functions to load the custom file."
    (load custom-file 'noerror))
  (add-hook 'after-init-hook #'actuator-load-custom-file)
#+end_src

** Read only
#+begin_src emacs-lisp
  (setq view-read-only t)
#+end_src

** Ctrl-Z
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Just one space
#+begin_src emacs-lisp
  (defun actuator-just-one-space ()
    "Insert just one space, killing ALL whitespace."
    (interactive)
    (just-one-space -1))

  (global-set-key (kbd "M-/") #'actuator-just-one-space)
#+end_src

** Unfill paragraph
#+begin_src emacs-lisp
  (defun actuator-unfill-paragraph ()
    "Unfills a paragraph."
    (interactive)
    (let ((fill-column most-positive-fixnum))
      (fill-paragraph)))

  (global-set-key (kbd "C-M-q") #'actuator-unfill-paragraph)
#+end_src

** Savehist
#+begin_src emacs-lisp
  (savehist-mode)
  (csetq history-length 1000)
  (csetq history-delete-duplicates t)
  (csetq message-log-max 1000)
  (csetq savehist-save-minibuffer-history t)
  (csetq savehist-additional-variables
                          '(buffer-name-history
                            command-history
                            compile-history
                            extended-command-history
                            file-name-history
                            file-name-history
                            global-mark-ring
                            Info-history-list
                            kill-ring
                            kmacro-ring
                            last-kbd-macro
                            minibuffer-history
                            org-link--history
                            org-read-date-history
                            org-refile-history
                            org-table-formula-history
                            org-tags-history
                            regexp-search-ring
                            register-alist
                            savehist-minibuffer-history-variables
                            shell-command-history
                            mark-ring))
  (csetq savehist-file (expand-file-name "savehist.el" actuator-var-directory))
#+end_src

#+results:
: /home/g/.config/emacs/var/savehist.el

1. Quick fixes:

   ;; the issue could be that save-interprogram-paste-before-kill means a large clipboard which becomes part of savehist:

https://github.com/syl20bnr/spacemacs/issues/9409

#+begin_src emacs-lisp
  (put 'minibuffer-history 'history-length 100)
  (put 'kill-ring 'history-length 25)
  (setq save-interprogram-paste-before-kill nil)
#+end_src

https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist

2. Unpropertize kill ring on quit
#+begin_src emacs-lisp
  (defun actuator-unpropertize-kill-ring ()
    "It do thing."
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook #'actuator-unpropertize-kill-ring)
  (add-hook 'after-save-hook #'actuator-unpropertize-kill-ring)
#+end_src

3. Savehist on kill only

#+begin_src emacs-lisp
  (setq savehist-autosave-interval nil)
  (add-hook 'kill-emacs-hook #'savehist-save)
  (add-hook 'after-save-hook #'savehist-save)
#+end_src
** Autorevert
#+begin_src emacs-lisp
  (run-with-idle-timer 5 nil #'(lambda ()
                                 (require 'autorevert)
                                 (global-auto-revert-mode 1)))
  (csetq global-auto-revert-non-file-buffers nil)
  (csetq auto-revert-verbose nil)
  (csetq auto-revert-avoid-polling t)
  (csetq buffer-auto-revert-by-notification t)
  (csetq auto-revert-interval 60)
  (csetq revert-without-query t)
  (csetq auto-revert-check-vc-info nil)
#+end_src

** Server

#+begin_src emacs-lisp
  (run-with-idle-timer 5 nil #'(lambda ()
                                 (require 'server)
                                 (unless (server-running-p) (server-start))))
#+end_src

** Undo
- [[https://b3n.sdf-eu.org/undo-in-emacs.html][Undo in Emacs]]

  #+begin_src emacs-lisp
    (global-set-key (kbd "s-z") #'undo-only)
    (global-set-key (kbd "s-Z") #'undo-redo)
  #+end_src

** Cancel GC in Minibuffer
#+begin_src emacs-lisp
  (when (and (fboundp 'actuator-engorge-gc)
             (fboundp 'actuator-restore-gc))
    (add-hook 'minibuffer-setup-hook #'actuator-engorge-gc)
    (add-hook 'minibuffer-exit-hook  #'actuator-restore-gc))

#+end_src

** Minibuffer Resize
#+begin_src emacs-lisp
  (defun actuator-minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((org-document-title :height 1.0))))

  (add-hook 'minibuffer-setup-hook #'actuator-minibuffer-setup)
#+end_src
** Hippie Expand

#+begin_src emacs-lisp
  (with-eval-after-load 'hippie-exp
    (csetq hippie-expand-verbose t)
    (csetq hippie-expand-try-functions-list
           '(try-expand-all-abbrevs
             try-expand-dabbrev-visible
             try-expand-dabbrev
             try-expand-dabbrev-all-buffers
             try-expand-dabbrev-from-kill
             try-complete-file-name-partially
             try-complete-file-name
             try-expand-line
             try-complete-lisp-symbol-partially
             try-complete-lisp-symbol
             try-expand-list
             try-expand-list-all-buffers
             try-expand-whole-kill
             try-expand-line-all-buffers)))
  (global-set-key (kbd "<M-SPC>") #'hippie-expand)
#+end_src

- try-complete-lisp-symbol has a lot of completions
- try-expand-line-all-buffers is very slow

#+begin_src emacs-lisp
  (defun actuator-hippie-unexpand ()
    "Remove an expansion without having to loop around."
    (interactive)
    (hippie-expand 0))
  (global-set-key (kbd "M-S-SPC") #'actuator-hippie-unexpand)
#+end_src

** Open org-links in new window or not
#+begin_src emacs-lisp
  (csetq org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                (vm-imap . vm-visit-imap-folder-other-frame)
                                (gnus . org-gnus-no-new-news)
                                (file . find-file)))
#+end_src
* Unstable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :noweb yes
:END:
** NSM
#+begin_src emacs-lisp
  (csetq nsm-settings-file (expand-file-name "nsm.el" actuator-var-directory))
#+end_src
** Diary
#+begin_src emacs-lisp
  (setq diary-file (expand-file-name "diary" org-directory))
  (setq calendar-date-style 'iso)
#+end_src

** SVG Screenshot
#+begin_src emacs-lisp :tangle no
  (defun screenshot-svg ()
    "Save a screenshot of the current frame as an SVG image.
  Saves to a temp file and puts the filename in the kill ring."
    (interactive)
    (let* ((filename (make-temp-file "Emacs" nil ".svg"))
           (data (x-export-frames nil 'svg)))
      (with-temp-file filename
        (insert data))
      (kill-new filename)
      (message filename)))
#+end_src

** Capture Templates

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("i" "Inbox" entry (file "inbox.org")
                   "* %^{Title}\n%U\n%i\n\n%a")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("t" "Todo" entry
                   (file "inbox.org")
                   "* TODO %?\n%U\n\n%i\n%a\n")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("c" "Calendar" entry
                   (file "calendar.org")
                   "* %?\n%^T\n\n%i\n%a\n")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (defun actuator-date-stamp ()
      (format-time-string "%A %-e %B %Y %H:%M %Z"))
    (add-to-list 'org-capture-templates
                 `("j" "Journal" entry
                   (file+olp+datetree "journal.org")
                   "* %(actuator-date-stamp)\n%?")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("C" "Contact" entry (file "contacts.org")
                   "* %^{Name}
  :PROPERTIES:
  :EMAIL: %^{Email}
  :PHONE: %^{Phone}
  :END:\n\n%?")))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-capture-inbox ()
    (interactive)
    (org-capture nil "i"))

  (defun actuator-capture-todo ()
    (interactive)
    (org-capture nil "t"))

  (defun actuator-capture-journal ()
    (interactive)
    (org-capture nil "j"))

  (defun actuator-capture-bookmark ()
    (interactive)
    (org-capture nil "b"))

  (defun actuator-capture-contact ()
    (interactive)
    (org-capture nil "C"))

  (defun actuator-capture-feed ()
    (interactive)
    (org-capture nil "f"))


  (defun actuator-capture-calendar ()
    (interactive)
    (org-capture nil "c"))

  ;; (with-eval-after-load 'transient
  ;;   (transient-define-prefix actuator-org-capture ()
  ;;     "Click"
  ;;     ["Capture"
  ;;      ("i" "Inbox" actuator-capture-inbox)
  ;;      ("t" "Todo"  actuator-capture-todo)
  ;;      ("j" "Journal" actuator-capture-journal)
  ;;      ("C" "Contact" actuator-capture-contact)
  ;;      ("c" "Calendar" actuator-capture-calendar)
  ;;      ("b" "Bookmark" actuator-capture-bookmark)]))
  ;; (global-set-key (kbd "C-c c") #'actuator-org-capture)
#+end_src

** Personal Stuff

#+begin_src emacs-lisp
  (setq user-full-name "Geoff MacIntosh")
  (setq user-mail-address "geoff@mac.into.sh")
  (setq calendar-latitude [47 33 north])
  (setq calendar-longitude [52 42 west])
#+end_src
** Unfiled Settings
:PROPERTIES:
:ID:       3659786E-6B2D-4AF8-8901-434068730FC7
:END:

#+begin_src emacs-lisp
  (fringe-mode 12)
#+end_src

#+begin_src emacs-lisp
  (use-package bookmark
    :custom
    (bookmark-version-control t)
    (bookmark-save-flag 1))
#+end_src

#+begin_src emacs-lisp
  (setq window-combination-resize t)
  (setq undo-limit (* 80 1024 1024))
#+end_src

From  emacs-plus:

#+begin_src emacs-lisp
  ;; C source code
  (setq frame-resize-pixelwise t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") #'count-words)
#+end_src

#+begin_src emacs-lisp
  (global-unset-key (kbd "<C-wheel-down>"))
  (global-unset-key (kbd "<C-wheel-up>"))
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
#+end_src

#+begin_src emacs-lisp
  (setq help-window-select t) ; Select help window by default
  (setq jit-lock-defer-time 0) ; Delay font-lock if its slow
  (defalias 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "M-o") #'other-window)

  (delete-selection-mode t)
  (midnight-mode 1)
  (setq sentence-end-double-space nil)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")

  (add-hook 'before-save-hook 'whitespace-cleanup)

  (setq indent-tabs-mode nil) ; Never insert tabs with tab key
  (setq require-final-newline t)

  (save-place-mode 1)
  (csetq save-place-file (expand-file-name "save-place.el" actuator-var-directory))

  (setq backup-by-copying    t)
  (setq delete-old-versions  t)
  (setq kept-new-versions    50)
  (setq kept-old-versions    5) ; I don't know what an old version is
  (setq version-control      t)
  (setq vc-make-backup-files t)

  (setq uniquify-buffer-name-style 'forward) ; Like a path, the way that makes sense
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
  (setq uniquify-strip-common-suffix nil)

  (setq find-file-visit-truename nil) ; Don't resolve symlinks
  (setq confirm-kill-emacs 'y-or-n-p)

  ;;(abbrev-mode)
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)

  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-defun  'disabled nil)

  (add-hook 'after-save-hook
            #'executable-make-buffer-file-executable-if-script-p)

  (defun display-startup-echo-area-message ()
    "Remove the GNU info from the minibuffer on startup.
  All you have to do is create a function with this name.  It's
  called automatically."
    (message ""))

  (setq default-frame-alist
        '((ns-transparent-titlebar . t)
          (ns-appearance           . 'light)))

  (setq completion-styles
        '(fuzzy
          basic
          partial-completion
          substring
          initials
          emacs22))

  (defun actuator-font-exists-p (font)
    "Return non-nil if FONT is loaded."
    (member font (font-family-list)))

  (defun actuator-frame-init (&optional _frame)
    "Initialize per-frame variables.
  These variables need to be set every time a frame is created."
    (when (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (when (fboundp 'tooltip-mode)    (tooltip-mode    -1))
    (when (and (not (display-graphic-p))
               (fboundp 'menu-bar-mode))
      (menu-bar-mode   -1))
    (when (actuator-font-exists-p "SF Mono")
      (set-frame-font "SF Mono-12" nil t)))

  (add-hook 'after-make-frame-functions 'actuator-frame-init)
  (actuator-frame-init)
#+end_src
** Misc

#+begin_src emacs-lisp
  (recentf-mode)
  (global-set-key (kbd "C-x C-r") #'recentf-open-files)
  (csetq recentf-max-saved-items 1000)
  (csetq recentf-save-file (expand-file-name "recentf.el" actuator-var-directory))
  (csetq recentf-exclude `(,actuator-var-directory
                       "^/\\(?:ssh\\|su\\|sudo\\)?:"
                       "/var/folders/"))
  (add-hook 'midnight-mode-hook #'recentf-cleanup)
#+end_src

** Plain Font

#+begin_src emacs-lisp
  (load-theme 'actuator t)

  (blink-cursor-mode -1)
  (setq cursor-type 'box)
  ;;(pixel-scroll-mode)
  (setq scroll-conservatively 101) ; Move the buffer just enough to display point, but no more
  (setq scroll-margin 0)
  (setq mouse-wheel-scroll-amount '(1))

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+end_src

#+begin_src emacs-lisp
  (unless 'window-system
    (require 'mouse)
    (require 'xt-mouse)
    ;;(csetq mouse-sel-mode t)
    (xterm-mouse-mode t)
    (defun track-mouse (_e)))
#+end_src

#+begin_src emacs-lisp
  (use-package locate
    :custom
    (locate-command "mdfind"))
#+end_src

#+begin_src emacs-lisp
  (use-package flymake
    :disabled t
    :hook (emacs-lisp-mode . flymake-mode))
#+end_src

#+results:

#+begin_src emacs-lisp
  (use-package vc-hooks
    :custom
    (vc-handled-backends nil))
#+end_src

#+begin_src emacs-lisp
  (use-package paren
    :config
    (show-paren-mode)
    (electric-pair-mode 1)
    :custom
    (blink-matching-paren nil)
    (show-paren-delay 0)
    (show-paren-style 'mixed))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'actuator-startup-profile)

  (defun actuator-startup-profile ()
    "Displays startup time garbage collections in the modeline."
    (message "Emacs ready in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
#+end_src
** Eliminate frame title
#+begin_src emacs-lisp
  (setq ns-use-proxy-icon nil)
  (setq frame-title-format
        '((:eval (when (buffer-file-name)
                   (abbreviate-file-name default-directory)))
          "%b" ))
  ;;(set-frame-parameter (selected-frame) 'title nil)
#+end_src

#+begin_src emacs-lisp
  (defun remember-titlebar-settings ()
    "Get fucked, Emacs"
    (set-frame-parameter (selected-frame) 'name nil)
    (set-frame-parameter (selected-frame) 'title nil))
  ;;(add-hook 'window-configuration-change-hook #'remember-titlebar-settings)
#+end_src

** Help
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h x k") #'describe-key)
#+end_src

** Delete by Moving to Trash
#+begin_src emacs-lisp
  (defun system-move-file-to-trash (file)
    "Move the file to trash via the `trash` command-line tool."
    (call-process "trash" nil nil nil file))
#+end_src

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash nil)
#+end_src
** Copy sentence
#+begin_src emacs-lisp
  (defun actuator-copy-sentence ()
    "Save the entire sentence to the clipboard/kill ring."
    (interactive)
    (save-excursion
      (backward-sentence)
      (mark-end-of-sentence nil)
      (copy-region-as-kill nil nil t)))
#+end_src

** Org Todos
#+begin_src emacs-lisp
  (csetq org-use-fast-todo-selection 'expert)
  (csetq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "SOMEDAY(s)" "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)")))
#+end_src

** Agenda

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("h" "Agenda Plus"
           ((agenda "")
            (tags-todo "current")))))
  (setq org-agenda-window-setup 'reorganize-frame)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-span 'week) ;; fortnight
  (setq org-agenda-include-diary t)
  (setq org-agenda-text-search-extra-files nil)
  (setq org-agenda-todo-list-sublevels t)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
      (org-agenda-follow-mode))
#+end_src

** Holidays
:PROPERTIES:
:CATEGORY: Holiday
:END:
#+begin_src emacs-lisp
  (setq holiday-islamic-holidays nil)
  ;;(setq holiday-christian-holiday nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-oriental-holidays nil)
  ;;(setq holiday-other-holidays '((lunar-phases)))
#+end_src
** Habit

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit)
    (require 'org-habit)
    (setq org-habit-show-habits-only-for-today t))
#+end_src

** Keyboard Macros

- ~C-x (~ Start defining a keyboard macro.
- ~C-x )~ End a keyboard macro.
- ~C-u C-x (~ Replay macro and append keys to the definition.
- ~C-u C-u C-x (~ Don’t replay but append keys.
- ~C-x C-k r~ Run the last keyboard macro on each line that begins in the region.
- ~C-x C-k n~ Name the most recent macro.
- ~C-x C-k b~ Bind the most recent macro to a keybinding (for the session only).
- ~M-x insert-kbd-macro~ Insert the most recent macro into the buffer as lisp. That’s how you save it.
- ~C-x C-k 0-9~ and ~C-x C-k A-Z~ are reserved for keyboard macros

*** Make Checklist
#+begin_src emacs-lisp
(fset 'actuator-make-checklist
   (kmacro-lambda-form [?\C-a ?- ?  ?\[ ?  ?\] ?  ?\C-n] 0 "%d"))
    (global-set-key (kbd "C-x C-k 1") #'actuator-make-checklist)
#+end_src

*** References
- [[http://ergoemacs.org/emacs/emacs_macro_example.html][Emacs: Keyboard Macro ]][2020-06-08 Mon]
- [[https://www.emacswiki.org/emacs/KeyboardMacros][EmacsWiki: Keyboard Macros]] [2020-06-08 Mon]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html][Basic Keyboard Macro - GNU Emacs Manual]] [2020-06-08 Mon]

** Web
*** URL
#+begin_src emacs-lisp
  (make-directory (expand-file-name "url/" actuator-var-directory) t)
  (make-directory (expand-file-name "url/" actuator-var-directory) t)
  (csetq url-cache-directory (expand-file-name "url/" actuator-var-directory))
  (csetq url-configuration-directory (expand-file-name "url/" actuator-var-directory))
#+end_src

*** Set up browsing handlers                      :ignore:
Customizing the browse-url handlers is remarkably powerful. I don't use Emacs as a web browser much, but I do use a lot of links in Org-mode documents. If something isn't set here, it opens the URL in the default manner, which in my case is Safari ([[https://developer.apple.com/safari/technology-preview/][Technology Preview]]).

#+begin_src emacs-lisp
  (use-package browse-url
    :custom
    (browse-url-handlers '(("wikipedia"   . eww )
                           ("youtu\\.?be" . actuator-browse-video)
                           ("twitch"      . actuator-browse-video))))
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "eww" actuator-var-directory) t)
  (csetq eww-bookmarks-directory (expand-file-name "eww" actuator-var-directory))
#+end_src

*** Handle video urls                             :ignore:
I want video links to be opened in MPV. This helps my battery life as well as my personal life because I don't have to visit YouTube. This requires [[https://mpv.io][MPV]] to be installed, which is best installed via [[http://brew.sh][Brew]] on macOS. I've tried to use [[https://nixos.org/download.html][Nix]], but it doesn't work well.

#+begin_src emacs-lisp
    (defun actuator-browse-video (url &rest _args)
      "Browse a URL with a dedicated video player.
  Avoids opening a browser window."
      (start-process "mpv" nil "mpv" url))
#+end_src

*** Simple HTML renderer                          :ignore:
SHR is used to render all sorts of basic HTML in Emacs, including Elfeed posts and Nov.el books. Normally it wraps at the page width, but that can be adjusted.

#+begin_src emacs-lisp
  (use-package shr
    :custom
    (shr-width 75))
#+end_src

*** Open links in background                      :ignore:

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq browse-url-browser-function 'browse-url-generic)
    (setq browse-url-generic-program "open")
    (setq browse-url-generic-args '("--background")))
#+end_src
** iBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (csetq ibuffer-expert t)
#+end_src

#+begin_src emacs-lisp
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("Misc"      (name . "^\\*.*\\*$"))
           ("Magit"     (name . "magit"))
           ("Src"       (name . "\*Org Src"))
           ("Dired"     (mode . dired-mode))
           ("My Org"    (directory . "/Users/g/org"))
           ("Config"    (or
                         (directory . "/Users/g/.config")
                         (directory . "/usr/local/share/emacs")))
           )))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-ibuffer-setup ()
    "Setup ibuffer defaults."
    (require 'ibuf-ext)
    (ibuffer-switch-to-saved-filter-groups "default")
    (ibuffer-auto-mode 1)
    (toggle-truncate-lines +1))
  (add-hook 'ibuffer-mode-hook #'actuator-ibuffer-setup)
#+end_src

** Encryption (EPG)
#+begin_src emacs-lisp
  (use-package epg
    :custom
    (epg-pinentry-mode 'loopback))
#+end_src
** Dired
#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (require 'dired-x)
    (require 'wdired))
  (add-hook 'dired-mode-hook #'dired-omit-mode)
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "image-dired/gallery/" actuator-var-directory) t)
  (csetq image-dired-dir (expand-file-name "image-dired/" actuator-var-directory))
  (csetq image-dired-db-file (expand-file-name "image-dired/image-dired.db" actuator-var-directory))
  (csetq image-dired-gallery (expand-file-name "image-dired/gallery/" actuator-var-directory))
  (csetq image-dired-temp-image-file (expand-file-name "image-dired/temp-image" actuator-var-directory))
  (csetq image-dired-temp-rotate-image-file (expand-file-name "image-dired/temp-rotate-image" actuator-var-directory))
#+end_src

#+begin_src emacs-lisp
  (setq image-dired-thumb-size 100)
  (setq image-dired-thumb-width 300)
  (setq image-dired-thumb-height 300)
  (setq image-dired-thumb-margin 5)
#+end_src


#+begin_src emacs-lisp
  (use-package dired
    :config
    ;;(require 'dired-x)
    ;;(require 'ls-lisp)
    ;;(require 'wdired)
    (setq dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`.DS_Store\\'\\|^.git$")
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'dired-shell-command-history))
    :custom
    (dired-dwim-target t)
    (ls-lisp-use-insert-directory-program t)
    (ls-lisp-ignore-case t)
    (ls-lisp-use-string-collate nil)
    (ls-lisp-verbosity '(links uid))
    (ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
    (ls-lisp-use-localized-time-format nil)

    (dired-listing-switches "-alhFo") ; Not use for ls-lisp?
    ;; a :: include files beginning with dots
    ;; l :: display as list
    ;; h :: human-readable filenames
    ;; F :: display a slash after directories
    ;; S :: sort by size

    (wdired-allow-to-change-permissions t)

    (dired-recursive-copies 'always))
#+end_src

** Split Windows
#+begin_src emacs-lisp
    (defun actuator-split-window-right ()
      "Replacement for `split-window-right'.
    Moves the point to the newly created window and asks for the
    buffer."
      (interactive)
      (split-window-right)
      (other-window 1)
      (when (fboundp 'ivy-switch-buffer)
        (ivy-switch-buffer)))
  (global-set-key (kbd "C-x 3") #'actuator-split-window-right)
#+end_src

#+begin_src emacs-lisp
    (defun actuator-split-window-below ()
      "Replacement for `split-window-below'.
    Moves the point to the newly created window and asks for the
    buffer."
      (interactive)
      (split-window-below)
      (other-window 1)
      (when (fboundp 'ivy-switch-buffer)
        (ivy-switch-buffer)))
  (global-set-key (kbd "C-x 2") #'actuator-split-window-below)
#+end_src

** Attach
:PROPERTIES:
:ID:       7542A761-77AB-4B42-B25E-33BFE7A45FE9
:END:

#+begin_src emacs-lisp
  (use-package org-attach
    :custom
    (org-attach-store-link-p t)
    (org-attach-expert nil)
    (org-attach-dir-relative t)
    (org-attach-preferred-new-method 'dir)
    (org-attach-method 'mv)
    (org-attach-auto-tag "attach")
    (org-attach-archive-delete 'query))
#+end_src
** Clock

#+begin_src emacs-lisp
  (use-package org-clock
    :init
    (org-clock-persistence-insinuate)
    :custom
    (org-clock-persist t)
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-mode-line-total 'auto))
#+end_src

** World Time
#+begin_src emacs-lisp
  (setq world-clock-list '(("America/New_York" "New York")
                            ("Europe/London"    "London")
                            ("Australia/Sydney" "Sydney")
                            ("America/Edmonton" "Calgary")
                            ("America/St_Johns" "St. John's")))
#+end_src

** Ediff
#+begin_src emacs-lisp
  (use-package ediff
    :custom
    ;;(ediff-diff-options "")
    ;;(ediff-custom-diff-options "-u")
    (ediff-window-setup-function 'ediff-setup-windows-plain)
    (ediff-split-window-function 'split-window-horizontally)
    :config
    (defun actuator-ediff-startup ()
      "Prep Ediff for success."
      (window-configuration-to-register :ediff))

    (defun actuator-ediff-quit ()
      "Restore files after diffing."
      (jump-to-register :ediff))

    (defun ediff-org-reveal-around-difference (&rest _)
      (dolist (buf (list ediff-buffer-A ediff-buffer-B ediff-buffer-C))
        (ediff-with-current-buffer buf
          (when (derived-mode-p 'org-mode)
            (org-reveal t)))))

    (advice-add 'ediff-next-difference :after
    #'ediff-org-reveal-around-difference)
    (advice-add 'ediff-previous-difference :after
    #'ediff-org-reveal-around-difference)
    :hook
    (ediff-startup . actuator-ediff-startup)
    (ediff-quit    . actuator-ediff-quit))
#+end_src

[[https://www.reddit.com/r/emacs/comments/dxzi96/have_some_code_make_ediffing_folded_org_files/][Have some code: make ediffing folded org files better : emacs]]

** Mu4e

[[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][Fastmail + mu4e]]

#+begin_src emacs-lisp
  (use-package mu4e
    ;; :init
    ;; (require 'mu4e)
    :config
    (require 'mu4e)
    ;; (fset 'actuator-move-to-trash "mTrash")
    ;;(define-key mu4e-headers-mode-map (kbd "d") 'actuator-move-to-trash)
    ;;(define-key mu4e-view-mode-map (kbd "d") 'actuator-move-to-trash)
    ;; :bind
    ;; (:map mu4e-headers-mode-map
    ;;       ("d" . actuator-move-to-trash))
    ;; (:map mu4e-view-mode-map
    ;;       ("d" . actuator-move-to-trash))
    ;; (cond ((eq system-type 'gnu/linux)
    ;;        (setq mu4e-mu-binary "/usr/bin/mu"))
    ;;       ((eq system-type 'darwin)
    ;;        (setq mu4e-mu-binary "/usr/local/bin/mu")))
    :custom
    (mu4e-maildir-shortcuts
     '((:maildir "/Archive" :key ?a)
       (:maildir "/Inbox"   :key ?i)))
    (mail-user-agent 'mu4e-user-agent)
    (mu4e-hide-index-messages t)
    (mu4e-update-interval (* 60 15))
    (mu4e-refile-folder "/Archive")
    (mu4e-sent-folder   "/Sent Items")
    (mu4e-drafts-folder "/Drafts")
    (mu4e-trash-folder  "/Trash")
    (mu4e-attachment-dir "~/Downloads/")
    (mu4e-view-show-images t)
    (mu4e-view-show-addresses t)
    (mu4e-change-filenames-when-moving t)
    (mu4e-headers-skip-duplicates t)
    (mu4e-compose-format-flowed t)
    (mu4e-date-format "%y-%m-%d")
    (mu4e-headers-date-format "%y-%m-%d")
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-mu-binary (executable-find "mu")))
#+end_src

** Message

#+begin_src emacs-lisp
  (use-package message
    :custom
    (send-mail-function 'sendmail-send-it)
    (message-send-mail-function 'sendmail-send-it))
#+end_src

** Native Compile
#+begin_src emacs-lisp
  (when (boundp 'comp-async-report-warnings-errors)
    (setq comp-async-report-warnings-errors nil))
#+end_src

** Package Quickstart

#+begin_src emacs-lisp
  (add-hook 'kill-emacs-hook #'package-quickstart-refresh)
#+end_src

** Byte compile init

#+begin_src emacs-lisp
  (defun actuator-byte-recompile-init ()
    "Recompiles the inits. I dunno why I want to."
    (interactive)
    (let ((init   (expand-file-name "init.el"       user-emacs-directory))
          (early  (expand-file-name "early-init.el" user-emacs-directory)))
      (if (fboundp 'native-compile)
          (progn
            ;;(native-compile early)
            (native-compile init))
        (progn
          ;;(byte-recompile-file early  nil 0)
          (byte-recompile-file init nil 0)))))
  (add-hook 'kill-emacs-hook #'actuator-byte-recompile-init)
#+end_src

#+results:
| elfeed-db-save-safe | prescient--save | actuator-byte-recompile-init | package-quickstart-refresh | desktop-kill | org-clock-save | org-id-locations-save | org-babel-remove-temporary-directory | recentf-save-list | save-place-kill-emacs-hook | bookmark-exit-hook-internal | savehist-save | actuator-unpropertize-kill-ring | savehist-autosave | server-force-stop | elfeed-db-gc-safe |

** Modeline time
#+begin_src emacs-lisp
  (use-package time
    :config
    (display-time)
    :custom
    (display-time-24hr-format t)
    (display-time-default-load-average nil))
#+end_src

** Allow different places in the same buffer
#+begin_src emacs-lisp
  (use-package window
    :custom
    (switch-to-buffer-preserve-window-point t))
#+end_src

** ERC
#+begin_src emacs-lisp
  (defun actuator-twitch-start-irc ()
    "Connect to Twitch IRC."
    (interactive)
    (erc-tls :server "irc.chat.twitch.tv"
             :port 6697
             :nick (auth-source-pass-get "user" "twitch.tv")
             :password (auth-source-pass-get "oauth" "twitch.tv")))
#+end_src

** Doc View
#+begin_src emacs-lisp
  (use-package doc-view
    :config
    (add-to-list 'auto-mode-alist '("\\.pdf\\'" . doc-view-mode))
    (defvar actuator-doc-view-bookmark-push-p t
      "Whether to push automatic doc-view bookmarks, or clobber them.")
    (defun actuator-doc-view-open-handler ()
      "Stuff."
      (require 'bookmark)
      (bookmark-maybe-load-default-file)
      (bookmark-jump (buffer-name)))

    (defun actuator-doc-view-save-handler ()
      "Stuff"
      (when (eq major-mode 'doc-view-mode)
        (require 'bookmark)
        (bookmark-maybe-load-default-file)
        (bookmark-set (buffer-name) actuator-doc-view-bookmark-push-p)))
    :hook
    (doc-view-mode . actuator-doc-view-open-handler)
    (kill-buffer-hook . actuator-doc-view-save-handler)
    :custom
    (doc-view-resolution 150))
#+end_src
https://gist.github.com/spacebat/5500966

** Sync stuff
#+begin_src emacs-lisp
  (setq elfeed-db-directory   "~/Sync/.sync/elfeed")
  (setq abbrev-file-name      "~/Sync/.sync/abbrev.el")
  (setq bookmark-default-file "~/Sync/.sync/bookmark.el")
#+end_src

** Org Randomnote
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-randomnote)
#+end_src

** Auth Source

#+begin_src emacs-lisp
  (csetq auth-sources '(password-store))
#+end_src

** Org

#+begin_src emacs-lisp
  (make-directory (expand-file-name "org/" actuator-var-directory) t)

  (make-directory (expand-file-name "org-publish/"
                                    actuator-var-directory) t)
  (csetq org-clock-persist-file (expand-file-name "org/org-clock-persist.el"
                                            actuator-var-directory))
  (csetq org-publish-timestamp-directory (expand-file-name "org-publish/"
  actuator-var-directory))
#+end_src


#+begin_src emacs-lisp
  (require 'org-checklist)
  (add-to-list 'org-modules 'org-checklist)
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-plus-contrib)
  (use-package org
    :config
    (org-indent-mode 1)
    ;; (add-to-list 'org-babel-default-header-args
    ;;         '(:mkdirp . "yes"))
    ;; (add-to-list 'org-babel-default-header-args '(:comments . "link"))
    (setq org-babel-default-header-args '((:mkdirp   . "yes")
                                          (:comments . "link")
                                          (:session  . "none")
                                          (:results  . "replace")
                                          (:exports  . "code")
                                          (:cache    . "no")
                                          (:noweb    . "no")
                                          (:hlines   . "no")
                                          (:tangle   . "no")))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (shell      . t)))
    (defun actuator-update-all-dynamic-blocks ()
      "Hi"
      (org-dblock-update 1))
    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                          'actuator-update-all-dynamic-blocks nil
                          'make-it-local)))
    (add-to-list 'org-default-properties "DIR")
    (add-to-list 'org-default-properties "header-args")
    ;;(add-to-list 'org-babel-default-header-args '(:mkdirp . "yes"))
    ;;(global-set-key (kbd "C-c c") #'counsel-org-capture)
    ;;(global-set-key (kbd "C-c c") #'org-capture)
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c l") #'org-store-link)
    :custom
    ;;(setq-local org-display-custom-times nil)
    ;;(org-time-stamp-custom-formats
    ;; '("<%A, %B %e %Y>" . "<%A, %B %e %Y %H:%M>"))
    (org-startup-folded 'content)
    (org-ellipsis " →")
    (org-startup-align-all-tables t)
    (org-startup-shrink-all-tables t)
    (org-startup-with-inline-images t)
    (org-startup-indented t)
    (org-hide-leading-stars t)
    (org-pretty-entities-include-sub-superscripts t)
    (org-hide-emphasis-markers t)
    (org-emphasis-alist (delete '("+" (:strike-through t)) org-emphasis-alist))
    (org-image-actual-width 300)
    (org-fontify-done-headline t)
    (org-structure-template-alist '(("e" . "src emacs-lisp")
                                    ("s" . "src shell")))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-closed-keep-when-no-todo t)
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies t)
    (org-complete-tags-always-offer-all-agenda-tags nil)
    (org-clone-delete-id t)
    (org-tags-column -60)
    (org-catch-invisible-edits 'show-and-error)
    (org-insert-heading-respect-content t)
    (org-ctrl-k-protect-subtree t)
    (org-M-RET-may-split-line '((default . nil)))
    (org-special-ctrl-k t)
    (org-special-ctrl-a/e t)
    (org-blank-before-new-entry '((heading         . t)
                                  (plain-list-item . auto)))
    (org-use-property-inheritance t)
    (org-modules nil)
    (org-tag-persistent-alist '(("noexport")
                                ("ignore")
                                ("unpublished")
                                ("blog")
                                ("tbd")))
    :hook
    (org-mode . visual-line-mode)
    (org-mode . (lambda () (electric-indent-local-mode -1))))
#+end_src

#+begin_src emacs-lisp
  ;;(setq org-agenda-files nil)
  ;;(setq org-agenda-files `(,org-directory))
  (setq org-agenda-files (expand-file-name "agenda" org-directory))
#+end_src


#+begin_src emacs-lisp
  (use-package org-capture
    :config
    (defun actuator-org-capture-turn-off-header-line ()
    "Disable the header-line in a local mode.
  This is used to disable the help line in `org-capture' buffers as
  there's no variable that will do it."
    (setq-local header-line-format nil))
    :hook (org-capture-mode . actuator-org-capture-turn-off-header-line))
#+end_src

#+begin_src emacs-lisp
  (use-package org-list
    :custom
    (org-list-indent-offset 1))
#+end_src

#+begin_src emacs-lisp
  (use-package org-keys
    :custom
    (org-use-speed-commands t))
#+end_src

#+begin_src emacs-lisp
  (use-package org-refile
    :custom
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-refile-targets '((org-agenda-files :maxlevel . 3)))
    :hook
    (midnight-mode . org-refile-get-targets))
#+end_src

#+begin_src emacs-lisp
  (use-package org-src
    :config
    (defun actuator-org-src-line-wrap-setup ()
      "Set truncate-lines-mode in org-source-editing buffers."
      (setq-local truncate-lines t))
    :custom
    (org-edit-src-persistent-message nil)
    (org-src-tab-acts-natively t)
    (org-src-window-setup 'current-window)
    (org-src-ask-before-returning-to-edit-buffer nil)
    (org-src-fontify-natively t)
    :hook (org-src-mode . actuator-org-src-line-wrap-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package org-footnote
    :custom
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline t)
    (org-footnote-auto-label 'random))
#+end_src

#+begin_src emacs-lisp
  (use-package ob-core
    :custom
    (org-confirm-babel-evaluate nil)
    (org-babel-results-keyword "results"))
#+end_src

#+begin_src emacs-lisp
  (use-package org-crypt
    :init
    (require 'org-crypt)
    :config
    (org-crypt-use-before-save-magic)
    (add-to-list 'org-modules 'org-crypt)
    :custom
    (org-tags-exclude-from-inheritance (quote ("crypt")))
    (org-crypt-key nil))
#+end_src

#+begin_src emacs-lisp
  (use-package org-agenda
    :custom
    (org-agenda-sticky t)
    (org-agenda-dim-blocked-tasks t))
#+end_src

** Fish Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'fish-mode)
#+end_src
** Ledger Mode
#+begin_src emacs-lisp
  (csetq ledger-default-date-format 'ledger-iso-date-format)
  (add-to-list 'package-selected-packages 'ledger-mode)
#+end_src
** Markdown Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'markdown-mode)
#+end_src

** YAML Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'yaml-mode)
#+end_src
** TOML Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'toml-mode)
#+end_src
** Lua Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'lua-mode)
#+end_src
** Gitignore Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'gitignore-mode)
#+end_src
** Gitconfig Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'gitconfig-mode)
#+end_src
** Ripgrep
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'rg)
#+end_src
** Nov.el
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (csetq nov-save-place-file (expand-file-name "nov-save-place.el" actuator-var-directory))
  (csetq nov-text-width 75)
  (defun actuator-novel-setup ()
    (face-remap-add-relative 'variable-pitch :family "Georgia"
                             :height 1.3)
    (setq-local line-spacing 1.2))
  (add-hook 'nov-mode-hook 'actuator-novel-setup)
#+end_src

** Project
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'project)
  (csetq project-list-file (expand-file-name "project-list.el" actuator-var-directory))
#+end_src

** Org Link Minor Mode
#+begin_src emacs-lisp :tangle no
  (use-package org-link-minor-mode
    :hook (emacs-lisp-mode . org-link-minor-mode))
#+end_src

** HTMLize
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'htmlize)
#+end_src

** Eldoc

[[https://www.reddit.com/r/emacs/comments/c1zl0s/weekly_tipstricketc_thread/ergullj/?context=1][Improve eldoc's documentation]]

#+begin_src emacs-lisp
(add-to-list 'package-selected-packages 'eldoc)
  (use-package eldoc
    :custom
    (eldoc-echo-area-use-multiline-p t)
    (eldoc-idle-delay 0)
    :config
    (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
      "If SYM is a function, append its docstring."
      (require 'subr-x)
      (concat
       (apply orig-fun sym r)
       (when-let ((doc (and (fboundp sym) (documentation sym 'raw)))
                  (oneline (substring doc 0 (string-match "\n" doc))))
         (when (not (string= "" oneline))
           (concat " " (propertize oneline 'face 'italic)))))))
#+end_src

** Forge
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'forge)
  (make-directory (expand-file-name "forge/post/" actuator-var-directory) t)
  (csetq forge-database-file (expand-file-name "forge/forge.db" actuator-var-directory))
  (csetq forge-post-directory (expand-file-name "forge/post/" actuator-var-directory))
#+end_src

#+results:

** Transient
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'transient)
  (make-directory (expand-file-name "transient" actuator-var-directory) t)
  (csetq transient-history-file (expand-file-name "transient/history.el" actuator-var-directory))
  (csetq transient-levels-file (expand-file-name "transient/levels.el" actuator-var-directory))
  (csetq transient-values-file (expand-file-name "transient/values.el" actuator-var-directory))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'prescient)
  (csetq prescient-save-file (expand-file-name "prescient.el" actuator-var-directory))
  (csetq prescient-history-length 10000)
  (csetq prescient-aggressive-file-save t)
  (require 'counsel nil t)
  (require 'prescient nil t)
  (require 'ivy-prescient nil t)
  (when (featurep 'ivy-prescient)
    (ivy-prescient-mode +1)
    (prescient-persist-mode +1))
#+end_src


#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'counsel)
  (add-to-list 'package-selected-packages 'ivy)
  (add-to-list 'package-selected-packages 'swiper)
  (with-eval-after-load 'counsel
    (setq counsel-find-file-ignore-regexp "\\`\\."))
  (when (featurep 'counsel)
    (require 'counsel)
    (require 'ivy)
    (require 'swiper)
    (counsel-mode 1)
    (global-set-key (kbd "C-x C-r") #'counsel-buffer-or-recentf)
    (global-set-key (kbd "C-x C-f") #'counsel-find-file)
    (global-set-key (kbd "M-x")     #'counsel-M-x)
    (global-set-key (kbd "C-h f")   #'counsel-describe-function)
    (global-set-key (kbd "C-h v")   #'counsel-describe-variable)
    (global-set-key (kbd "C-c s")   #'counsel-search)
    (global-set-key (kbd "M-y")     #'counsel-yank-pop))


#+end_src

#+results:
: t

#+begin_src emacs-lisp
  (use-package request
    :disabled t)
#+end_src

#+begin_src emacs-lisp
  (use-package ivy
    :defines ivy-minibuffer-map
    :functions ivy-mode ivy-immediate-done ivy-alt-done ivy-next-line
    :config
    (ivy-mode 1)
    :init
    (global-set-key (kbd "C-x b") #'ivy-switch-buffer)
    (define-key ivy-minibuffer-map (kbd "<C-return>") #'ivy-immediate-done)
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
    (define-key ivy-minibuffer-map (kbd "M-y") #'ivy-next-line)
    :custom
    (ivy-use-ignore-default 'always)
    (ivy-ignore-buffers '("*elfeed-log*"
                          "*straight-process*"
                          "*Completions*"
                          "*Compile-Log*"))
    (ivy-use-virtual-buffers nil)
    (ivy-count-format "(%d/%d) ")
    (ivy-extra-directories nil)
    ;; :bind
    ;; (("C-x b" . ivy-switch-buffer)
    ;;  :map ivy-minibuffer-map
    ;;  ("<C-return>" . ivy-immediate-done)
    ;;  ("RET"        . ivy-alt-done)
    ;;  ("M-y"        . ivy-next-line)))
  )
#+end_src

#+results:
: t

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'ivy-prescient)
  (use-package ivy-prescient
    :after (ivy prescient)
    :functions ivy-prescient-mode
    :config
    (ivy-prescient-mode 1))
#+end_src
** Cliplink

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-cliplink)
  (global-set-key (kbd "C-x p i") #'org-cliplink)
    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                   '("b" "Bookmark" entry
                     (file "bookmarks.org")
                     "* %(org-cliplink-capture) %^g\nSaved on: %U\n\n%?"
                     :prepend
                     :empty-lines 1
                     :kill-buffer)))
#+end_src

** Anki
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'anki-editor)
#+end_src

** Auctex
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'auctex)
  (csetq TeX-engine 'luatex)
  (csetq TeX-source-correlate-start-server t)
#+end_src
** Magit
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'magit)
  (use-package magit
    :after exec-path-from-shell
    :init
    (global-set-key (kbd "C-c g") #'magit-status)
    (global-set-key (kbd "C-x g") #'magit-status)
    (global-set-key (kbd "C-x G") #'magit-list-repositories)
    :custom
    (magit-diff-refine-hunk 'all)
    (magit-save-repository-buffers 'dontask)
    (magit-section-initial-visibility-alist
     '((untracked . show)
       (unstaged  . show)
       (unpushed  . show)
       (upstream  . show)))
    ;;(magit-auto-revert-mode t)
    (magit-push-always-verify nil)
    (magit-repository-directories '(("~/org"     . 0)
                                    ("~/.config" . 0)))
    (magit-no-confirm '(stage-all-changes
                        unstage-all-changes))
    (magit-status-initial-section nil)
    :config
    <<magit-status>>
    <<magit-quit-session>>)
    (csetq magit-repository-directories
                            `((,org-directory . 0)
                              ("~/env.d"      . 0)
                              ("~/Projects"   . 1)))
#+end_src

#+RESULTS:

#+name: magit-status
#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
       (window-configuration-to-register :magit-fullscreen)
       ad-do-it
       (delete-other-windows))
#+end_src

#+name: magit-quit-session
#+begin_src emacs-lisp
(defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (auto-revert-mode -1)
      (jump-to-register :magit-fullscreen))
#+end_src

** Org download

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-download)
  (use-package org-download
    :init
    (global-set-key (kbd "C-M-y") #'org-download-screenshot)
    (require 'org-download)
    :custom
    (org-download-method 'directory)
    (org-download-image-dir nil)
    ;;(org-download-annotate-function #'actuator-org-dl-annotate)
    ;;(org-download-timestamp "")
    (org-download-screenshot-method "screencapture -i %s")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S-")
    ;;(org-download-screenshot-method "/usr/local/bin/pngpaste %s")
    )
#+end_src
** Web Mode

#+begin_src emacs-lisp
(add-to-list 'package-selected-packages 'web-mode)
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2))
#+end_src
** Elfeed
*** Introduction
Usually people start these things out by explaining what RSS is and all that. I don't think I'll be doing that. I like RSS because I like knowing when new things happen, and I don't want to check a bunch of different services all the time. Beyond that, I also really like the idea of being able to filter out feed items that don't appeal to me. I don't mind if I can only read stuff on my computer, so I haven't set up any sort of sync with my phone, although it should be possible to do that.

I have [[https://github.com/skeeto/elfeed][Elfeed]] set up in a single use-package declaration, and I've pulled all the individual functions out into their own bits so as to talk about them separately.

#+begin_src emacs-lisp
  (use-package elfeed
    :init
    (global-set-key (kbd "C-x w") #'actuator-elfeed-load-db-and-open)
    ;; :bind
    ;; (("C-x w" . actuator-elfeed-load-db-and-open)
    ;;  :map elfeed-search-mode-map
    ;;  ("A" . actuator-elfeed-show-all)
    ;;  ("U" . actuator-elfeed-show-unread)
    ;;  ("q" . actuator-elfeed-save-db-and-bury)
    ;;  ("R" . actuator-elfeed-mark-all-as-read))
    :custom
    (elfeed-search-filter "@1-week-ago +unread ")
    :config
    <<faces>>
    <<elfeed-filters>>
    <<load-quit>>
    <<mark-all-as-read>>)

  (with-eval-after-load 'elfeed
    (define-key elfeed-search-mode-map (kbd "q") #'actuator-elfeed-save-db-and-bury)
    (define-key elfeed-search-mode-map (kbd "R") #'actuator-elfeed-mark-all-as-read))
#+end_src

#+results:
: actuator-elfeed-mark-all-as-read

*** Open videos in MPV                            :ignore:
One feature that people talk about a lot is setting up Elfeed to handle video-feeds separately from others, allowing you to avoid opening---say---a YouTube link in MPV instead of a browser window. That's pretty nice if you think YouTube's site is bad. There are a variety of ways to do that, but my current solution is to adjust how Emacs handles URLs, as documented in my Web config. The advantage of my system is that it affects all links to YouTube, regardless of where they are. It's a general solution, not an Elfeed solution.

*** Filters                                       :ignore:
:PROPERTIES:
:header-args: :noweb-ref elfeed-filters :tangle no :results output silent
:END:
Filters are kind of the star of Elfeed. I mostly use them to remove items that I don't want to see (or already see in other contexts---podcasts for example). I think it's all pretty straightforward. The only thing of note that I do is adding a debug tag to each hook that hides things. That way I can tell which filter it is that's causing problems when I make a stupid typo and suddenly a specific filter matches all entries.

#+begin_src emacs-lisp
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :entry-title "sponsor\\|revenue\\|financial"
                                :add '(junk debug1)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :before "2 weeks ago"
                                :add 'debug2
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-title "MacSparky"
                                :entry-title "focused\\|Mac Power Users\\|jazz\\|automators\\|podcast"
                                :add '(junk debug3)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-title "Six Colors"
                                :entry-title "podcast\\|macworld\\|member"
                                :add '(junk debug4)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-title "Longreads"
                                :entry-title "longreads"
                                :add '(junk debug5)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "youtube\\.com"
                                :add '(video youtube)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "twitchrss"
                                :add '(video twitch)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "kijiji\\.ca"
                                :add '(shop kijiji)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "reddit"
                                :add 'reddit))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "ikea"
                                :entry-title "Q\\:"
                                :remove 'unread
                                :add '(junk debug6)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "cestlaz"
                                :entry-title '(not "emacs")
                                :add '(junk debug7)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "reddit\\.com"
                                :entry-title '(not "F1")
                                :add '(junk debug8)
                                :remove 'unread))
#+end_src

*** Load and quit Elfeed nicely                   :ignore:
:PROPERTIES:
:header-args: :noweb-ref load-quit :tangle no :results output silent
:END:
You don't need to do anything special to load Elfeed. You can set up a keybinding that runs ~(elfeed)~ and it should work. I took this function from [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][Pragmatic Emacs]] when I first set up Elfeed a few years ago because I wanted to keep the database in sync between multiple computers. These helper functions ensure that the database is loaded and saved at the appropriate moments. I'm not sure there's any benefit to these if you only use them on one computer (as I do now) but I can't find any downsides either, so they stay.

#+begin_src emacs-lisp
  (defun actuator-elfeed-load-db-and-open ()
        "Wrapper to load the elfeed database from disk before
        opening. Taken from Pragmatic Emacs."
        (interactive)
        (window-configuration-to-register :elfeed-fullscreen)
        (delete-other-windows)
        (elfeed)
        (elfeed-db-load)
        (elfeed-search-update 1)
        (elfeed-update))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-elfeed-save-db-and-bury ()
    "Wrapper to save the Elfeed database to disk before burying
    buffer. Taken from Pragmatic Emacs."
    (interactive)
    (elfeed-db-save)
    (elfeed-db-gc)
    (elfeed-db-compact)
    (elfeed-db-unload)
    (quit-window)
    (garbage-collect)
    (jump-to-register :elfeed-fullscreen))
#+end_src

*** Mark all as read                              :ignore:
:PROPERTIES:
:header-args: :noweb-ref mark-all-as-read :tangle no :results output silent
:END:

#+begin_src emacs-lisp
  (defun actuator-elfeed-mark-all-as-read ()
      "Mark all feeds in search as read. Taken from Mike Zamansky"
      (interactive)
      (with-no-warnings (mark-whole-buffer))
      (elfeed-search-untag-all-unread))
#+end_src

*** Faces                                         :ignore:
:PROPERTIES:
:header-args: :noweb-ref faces :tangle no :results output silent
:END:
Changing the colours of an entry is neat, but not that useful. I mostly have this set up in order to learn how to do it, and as a vague novelty.

#+begin_src emacs-lisp
  (add-to-list 'elfeed-search-face-alist
               '(video actuator-elfeed-video-face))
  (add-to-list 'elfeed-search-face-alist
               '(image actuator-elfeed-image-face))
  (add-to-list 'elfeed-search-face-alist
               '(comic actuator-elfeed-comic-face))
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-video-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed video entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-image-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed image entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-comic-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed comic entry."
    :group 'actuator-elfeed)
#+end_src

*** Org-elfeed
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'elfeed-org)
  (use-package elfeed-org
    :after elfeed
    :config
    (elfeed-org)
    :custom
    (rmh-elfeed-org-ignore-tag "disconnected")
    (rmh-elfeed-org-auto-ignore-invalid-feeds nil)
    (rmh-elfeed-org-files (list "~/org/feeds.org")))
#+end_src

*** Changes                                     :noexport:
**** Wednesday May 20, 2020
- Published

*** Captar

#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("e" "Elfeed Feed" entry
                   (file+olp ,(expand-file-name "feeds.org"
                                                org-directory) "Feeds")
                   "* [[%^{Feed URL}][%^{Title}]]\n%(org-time-stamp-inactive)"
                   :immediate-finish
                   :kill-buffer
                   :empty-lines 1)))
#+end_src
** Eshell

#+begin_src emacs-lisp
  (make-directory (expand-file-name "elfeed" actuator-var-directory) t)
  (csetq eshell-directory-name (expand-file-name "elfeed" actuator-var-directory))
  (csetq eshell-history-file-name (expand-file-name "history" eshell-directory-name))
#+end_src

#+begin_src emacs-lisp
  (use-package eshell
    ;; :bind (:map eshell-mode-map
    ;;             ("\C-a" . eshell-bol)
    ;;             ("\C-r" . counsel-esh-history)
    ;;             ([up]   . previous-line)
    ;;             ([down] . next-line))
    :config
    (defalias 'eshell/f  'find-file-other-window)
    (defalias 'eshell/ff 'find-file)
    (defalias 'eshell/v  'view-file-other-window)
    (defalias 'eshell/vv 'view-file)
    :custom
    (eshell-destroy-buffer-when-process-dies t) ;;em-term
    (eshell-banner-message "")) ;;em-banner
#+end_src

#+begin_src emacs-lisp
  (use-package em-hist
    :custom
    (eshell-history-size 10000)
    (eshell-hist-ignoredups t))
#+end_src

#+begin_src emacs-lisp
  (use-package em-cmpl
    :custom
    (eshell-cmpl-cycle-completions nil)
    (eshell-cmpl-ignore-case t))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-eshell-smart-shell ()
    "Set up Plan9/Smart shell stuff."
    (require 'em-smart)
    (declare-function eshell-smart-initialize "em-smart")
    (eshell-smart-initialize))
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
  (add-hook 'eshell-modehook #'actuator-eshell-smart-shell)
#+end_src

- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

#+begin_src emacs-lisp
    (defun actuator-eshell-imenu ()
      "Set up eshell-imenu integration"
      (setq-local imenu-generic-expression
                  '(("Prompt" "^.*?[#❯]" 1))))
    (add-hook 'eshell-mode-hook #'actuator-eshell-imenu)
#+end_src

#+begin_src emacs-lisp
    (defun actuator-eshell-autocomplete ()
          "Enable tab autocompletion in eshell."
          (define-key
            eshell-mode-map (kbd "<tab>")
            (lambda () (interactive) (pcomplete-std-complete))))
    (add-hook 'eshell-mode-hook #'actuator-eshell-autocomplete)
#+end_src

#+results:
| tramp-eshell-directory-change | actuator-eshell-z | actuator-fish-completion | actuator-eshell-autocomplete | actuator-eshell-imenu |

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'pcmpl-args)
  (require 'pcmpl-args nil t)
#+end_src

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'package-selected-packages 'pcmpl-homebrew)
    (require 'pcmpl-homebrew nil t))
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'fish-completion)
  (use-package fish-completion
    :custom
    (fish-completion-fallback-on-bash-p t)
    :config
    (defun actuator-fish-completion ()
      "arst"
      (when (and (executable-find "fish")
                 (require 'fish-completion nil t))
        (fish-completion-mode)))
    :hook (eshell-mode . actuator-fish-completion))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'eshell-expand-input-functions
             #'eshell-expand-history-references)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'eshell
    (defun actuator-eshell-prompt ()
      ;;(require 'em-dirs)
      (concat
       ;;(user-login-name)
       ;;"@"
       ;;(system-name)
       ;;":"
       (eshell/pwd)
       " ❯ "))
    (setq eshell-prompt-regexp "^.+@.+:.+❯ ")
    (setq eshell-prompt-function #'actuator-eshell-prompt))
#+end_src


** Mu4e Alert
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'mu4e-alert)
  (use-package mu4e-alert
    :config
    (cond ((eq system-type 'gnu/linux)
           (mu4e-alert-set-default-style 'libnotify))
          ((eq system-type 'darwin)
           (mu4e-alert-set-default-style 'osx-notifier)))
    :hook
    (after-init . mu4e-alert-enable-notifications)
    (after-init . mu4e-alert-enable-mode-line-display))
#+end_src
** Alert

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'alert)
  (use-package alert
    :config
      (cond ((eq system-type 'gnu/linux)
             (setq alert-default-style 'libnotify))
            ((eq system-type 'darwin)
             (setq alert-default-style 'osx-notifier))))
#+end_src
** Systemd
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'systemd)
#+end_src

** Tramp
#+begin_src emacs-lisp
  (make-directory (expand-file-name "tramp/" actuator-var-directory) t)
  (csetq tramp-auto-save-directory (expand-file-name "tramp/auto-save/" actuator-var-directory))
  (csetq tramp-persistency-file-name (expand-file-name "tramp.el" actuator-var-directory))
#+end_src

** Rainbow
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'rainbow-mode)
  (require 'rainbow-mode nil t)
  (when (featurep 'rainbow-mode)
    (rainbow-mode))
#+end_src
** Modeline

#+begin_src emacs-lisp
  (setq-default mode-line-format
                (list
                 " %e"
                 mode-line-mule-info
                 mode-line-client
                 mode-line-modified
                 "   "
                 '(:eval (when (buffer-file-name)
                           (abbreviate-file-name default-directory)))
                 ;;mode-line-buffer-identification
                 (propertize "%b" 'face 'mode-line-buffer-id)
                 " %IB "
                 mode-line-position
                 "  "
                 mode-line-misc-info
                 '(:eval (when (featurep 'minions)
                           minions-mode-line-modes))))
#+end_src

*** References
 - [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Custom Emacs Modeline]]
** Minions
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'minions)
  (require 'minions nil t)
  (when (featurep 'minions)
    (minions-mode))
#+end_src
** Sudoers

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'etc-sudoers-mode)
#+end_src

** VTerm

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'vterm)
  (when (executable-find "fish")
    (csetq vterm-shell "fish"))
#+end_src

** Auto-save
#+begin_src emacs-lisp
  (csetq auto-save-list-file-prefix (expand-file-name "auto-save/"
                                                      actuator-var-directory))
  (auto-save-mode)
#+end_src

#+results:

** Backups
#+begin_src emacs-lisp
  (csetq backup-directory-alist
                          `(("." . ,(expand-file-name "backups" actuator-var-directory))))
#+end_src

** Ignore disabled commands
#+begin_src emacs-lisp
  (setq disabled-command-function 'ignore)
#+end_src

** MPDel
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'mpdel)
  (require 'mpdel nil t)
  ;; (mpdel-mode)
  (csetq mpdel-prefix-key (kbd "C-z"))
#+end_src

https://gitea.petton.fr/mpdel/mpdel

** Spell check
#+begin_src emacs-lisp
  (csetq ispell-program-name "aspell")
  (csetq ispell-personal-dictionary "~/Sync/.sync/dictionary")
  (csetq ispell-silently-savep t)
  (defun actuator-org-reveal-around-ispell ()
    "Reveals the area around the point in org-mode files."
    (when (derived-mode-p 'org-mode)
      (org-reveal t)))
  (add-hook 'ispell-update-post-hook #'actuator-org-reveal-around-ispell)
#+end_src
