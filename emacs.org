# -*- after-save-hook: (org-babel-tangle); -*-
#+title: Emacs

* Early Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/early-init.el
:END:

#+begin_src emacs-lisp :comments no
  ;;; early-init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
  (setq load-prefer-newer t)
  (setq frame-inhibit-implied-resize t)
  (setq org-directory (expand-file-name "~/org/"))
#+end_src

#+begin_src emacs-lisp
  (setq package-quickstart-file (expand-file-name "var/package-quickstart.el" user-emacs-directory))
  (when (file-exists-p package-quickstart-file)
    (setq package-quickstart t))
#+end_src

#+begin_src emacs-lisp
  (when (boundp 'comp-eln-load-path)
    (setcar (nthcdr 0 comp-eln-load-path)
     (expand-file-name "var/eln/" user-emacs-directory)))
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-original-gc-cons-threshold gc-cons-threshold
    "Original value for `gc-cons-threshold'.")
  (defvar actuator-original-gc-cons-percentage gc-cons-percentage
    "Original value for `gc-cons-percentage'.")
  (defvar actuator-engorged-gc-cons-threshold (* 5 1000 1000 1000)
    "Enlarged `gc-cons-threshold'.")
  (defvar actuator-engorged-gc-cons-percentage 0.6
    "Enlarged `gc-cons-percentage'.")

  (defun actuator-restore-gc ()
    "Restore `gc-cons-threshold' and `gc-cons-percentage' value."
    (setq gc-cons-threshold  actuator-original-gc-cons-threshold)
    (setq gc-cons-percentage actuator-original-gc-cons-percentage)
    (garbage-collect))

  (defun actuator-engorge-gc ()
    "Set `gc-cons-threshold' and `gc-cons-percentage' to huge numbers."
    (setq gc-cons-threshold actuator-engorged-gc-cons-threshold)
    (setq gc-cons-percentage actuator-engorged-gc-cons-percentage))

  (actuator-engorge-gc)
  (add-hook 'after-init-hook #'actuator-restore-gc)
#+end_src

#+begin_src emacs-lisp :comments no
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :mkdirp yes
:END:
** Lexical Binding
#+begin_src emacs-lisp :comments no
  ;;; init.el -*- lexical-binding: t; -*-
#+end_src

** Csetq
https://lists.gnu.org/archive/html/help-gnu-emacs/2015-12/msg00097.html

#+begin_src emacs-lisp
  (defmacro csetq (variable value)
        "Macro to set the value of a variable, possibly a custom user option."
        `(funcall (or (get ',variable 'custom-set)
                      (and (plist-member (symbol-plist ',variable)
                                         'standard-value)
                           'set-default)
                      'set)
                  ',variable ,value))
#+end_src

** Package Init

#+begin_src emacs-lisp
  (require 'package)

  (csetq package-archives
         '(("org"    . "https://orgmode.org/elpa/")
           ("melpa"  . "https://melpa.org/packages/")
           ("gnu"    . "https://elpa.gnu.org/packages/")
           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (csetq package-archive-priorities '(("org"   . 40)
                                      ("melpa" . 30)
                                      ("gnu"   . 20)
                                      ("nongnu". 10)))
  (setq package-selected-packages nil)
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-var-directory (expand-file-name (convert-standard-filename "var/") user-emacs-directory))
  (make-directory actuator-var-directory t)
#+end_src

** Exec path from shell
#+begin_src emacs-lisp
  (when (file-attributes "/usr/local/bin" t)
    (add-to-list 'exec-path "/usr/local/bin"))

  (when (file-attributes "/usr/local/sbin" t)
    (add-to-list 'exec-path "/usr/local/sbin"))

  (when (file-attributes "/usr/local/bin" t)
    (add-to-list 'exec-path "/usr/local/bin"))

  (when (file-attributes "/Library/TeX/texbin" t)
    (add-to-list 'exec-path "/Library/TeX/texbin"))

  (when (file-attributes "/opt/local/bin" t)
    (add-to-list 'exec-path "/opt/local/bin"))

  (when (file-attributes "/opt/local/sbin" t)
    (add-to-list 'exec-path "/opt/local/sbin"))
#+end_src

* Stable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :comments link :noweb yes
:END:
** Custom-set Variables

#+begin_src emacs-lisp
  (csetq custom-file (expand-file-name "custom.el" actuator-var-directory))
  (defun actuator-load-custom-file ()
    "The most basic of functions to load the custom file."
    (load custom-file 'noerror))
  (add-hook 'after-init-hook #'actuator-load-custom-file)
#+end_src

** Read only
#+begin_src emacs-lisp
  (csetq view-read-only t)
#+end_src

** Ctrl-Z
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Just one space
#+begin_src emacs-lisp
  (defun actuator-just-one-space ()
    "Insert just one space, killing ALL whitespace."
    (interactive)
    (just-one-space -1))

  (global-set-key (kbd "M-/") #'actuator-just-one-space)
#+end_src

** Unfill paragraph
#+begin_src emacs-lisp
  (defun actuator-unfill-paragraph ()
    "Unfills a paragraph."
    (interactive)
    (let ((fill-column most-positive-fixnum))
      (fill-paragraph)))

  (global-set-key (kbd "C-M-q") #'actuator-unfill-paragraph)
#+end_src

** Savehist
#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'savehist-mode)
  (csetq history-length 10000)
  (csetq history-delete-duplicates t)
  (csetq message-log-max 10000)
  (csetq savehist-save-minibuffer-history t)
  (csetq savehist-additional-variables
                          '(buffer-name-history
                            command-history
                            compile-history
                            extended-command-history
                            file-name-history
                            file-name-history
                            global-mark-ring
                            Info-history-list
                            kill-ring
                            kmacro-ring
                            last-kbd-macro
                            minibuffer-history
                            org-link--history
                            org-read-date-history
                            org-refile-history
                            org-table-formula-history
                            org-tags-history
                            regexp-search-ring
                            register-alist
                            savehist-minibuffer-history-variables
                            shell-command-history
                            mark-ring))
  (csetq savehist-file (expand-file-name "savehist.el" actuator-var-directory))
#+end_src

#+results:
: /home/g/.config/emacs/var/savehist.el

1. Quick fixes:

   ;; the issue could be that save-interprogram-paste-before-kill means a large clipboard which becomes part of savehist:

https://github.com/syl20bnr/spacemacs/issues/9409

#+begin_src emacs-lisp
  (put 'minibuffer-history 'history-length 100)
  (put 'kill-ring 'history-length 25)
  (setq save-interprogram-paste-before-kill nil)
#+end_src

https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist

2. Unpropertize kill ring on quit
#+begin_src emacs-lisp
  (defun actuator-unpropertize-kill-ring ()
    "It do thing."
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook #'actuator-unpropertize-kill-ring)
  (add-hook 'after-save-hook #'actuator-unpropertize-kill-ring)
#+end_src

3. Savehist on kill only

#+begin_src emacs-lisp
  (setq savehist-autosave-interval nil)
  (add-hook 'kill-emacs-hook #'savehist-save)
  (add-hook 'after-save-hook #'savehist-save)
#+end_src
** Autorevert
#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'global-auto-revert-mode 1)
  ;;(csetq global-auto-revert-non-file-buffers nil)
  ;;(csetq auto-revert-verbose nil)
  ;;(csetq auto-revert-avoid-polling nil)
  ;;(csetq buffer-auto-revert-by-notification t)
  (csetq auto-revert-interval 15)
  ;;(csetq revert-without-query t)
  (csetq auto-revert-check-vc-info nil)
#+end_src

** Server

#+begin_src emacs-lisp
  (defun actuator-start-server-if-not-running ()
    (require 'server)
    (unless (server-running-p) (server-start)))
  (run-with-idle-timer 2 nil #'actuator-start-server-if-not-running)
#+end_src

** Undo
- [[https://b3n.sdf-eu.org/undo-in-emacs.html][Undo in Emacs]]

  #+begin_src emacs-lisp
    (global-set-key (kbd "s-z") #'undo-only)
    (global-set-key (kbd "s-Z") #'undo-redo)
  #+end_src

** Cancel GC in Minibuffer
#+begin_src emacs-lisp
  (when (and (fboundp 'actuator-engorge-gc)
             (fboundp 'actuator-restore-gc))
    (add-hook 'minibuffer-setup-hook #'actuator-engorge-gc)
    (add-hook 'minibuffer-exit-hook  #'actuator-restore-gc))

#+end_src

** Minibuffer Resize
#+begin_src emacs-lisp
  (defun actuator-minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((org-document-title :height 1.0))))

  (add-hook 'minibuffer-setup-hook #'actuator-minibuffer-setup)
#+end_src
** Hippie Expand

#+begin_src emacs-lisp
  (csetq dabbrev-case-distinction t)
  (csetq dabbrev-case-fold-search t)
  (csetq dabbrev-case-replace t)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'hippie-exp
    (require 'dabbrev))
#+end_src

#+begin_src emacs-lisp
  (csetq hippie-expand-verbose t)
  (csetq hippie-expand-try-functions-list
         '(try-expand-all-abbrevs
           try-expand-dabbrev-visible
           try-expand-dabbrev
           try-expand-dabbrev-all-buffers
           try-expand-dabbrev-from-kill
           try-complete-file-name-partially
           try-complete-file-name
           try-expand-line
           try-complete-lisp-symbol-partially
           try-complete-lisp-symbol
           try-expand-list
           try-expand-list-all-buffers
           try-expand-whole-kill
           try-expand-line-all-buffers))
  (global-set-key (kbd "<M-SPC>") #'hippie-expand)
#+end_src

- try-complete-lisp-symbol has a lot of completions
- try-expand-line-all-buffers is very slow

#+begin_src emacs-lisp
  (defun actuator-hippie-unexpand ()
    "Remove an expansion without having to loop around."
    (interactive)
    (hippie-expand 0))
  (global-set-key (kbd "M-S-SPC") #'actuator-hippie-unexpand)
#+end_src

** Open org-links in new window or not
#+begin_src emacs-lisp
  (csetq org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                (vm-imap . vm-visit-imap-folder-other-frame)
                                (gnus . org-gnus-no-new-news)
                                (file . find-file)))
#+end_src
* Unstable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :noweb yes
:END:
** NSM
#+begin_src emacs-lisp
  (csetq nsm-settings-file (expand-file-name "nsm.el" actuator-var-directory))
#+end_src
** Diary
#+begin_src emacs-lisp
  (setq diary-file (expand-file-name "diary" org-directory))
  (setq calendar-date-style 'iso)
#+end_src

** Capture Templates

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("l" "Todo (with link)" entry
                   (file "inbox.org")
                   "* TODO %?\n:LOGBOOK:\n- Added on %U\n:END:\n%i\n%a\n")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("t" "Todo (no link)" entry
                   (file "inbox.org")
                   "* TODO %?\n:LOGBOOK:\n- Added on %U\n:END:\n%i\n")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (defun actuator-date-stamp ()
      (format-time-string "%A %-e %B %Y %H:%M %Z"))
    (add-to-list 'org-capture-templates
                 `("j" "Journal" entry
                   (file+olp+datetree "journal.org")
                   "* %(actuator-date-stamp)\n%?")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("C" "Contact" entry (file "contacts.org")
                   "* %^{Name}
  :PROPERTIES:
  :EMAIL: %^{Email}
  :PHONE: %^{Phone}
  :END:
  :LOGBOOK:
  - Added on %U
  :END:\n\n%?")))
#+end_src

** Personal Stuff

#+begin_src emacs-lisp
  (setq user-full-name "Geoff MacIntosh")
  (setq user-mail-address "geoff@mac.into.sh")
  (setq calendar-latitude [47 33 north])
  (setq calendar-longitude [52 42 west])
#+end_src
** Unfiled Settings
:PROPERTIES:
:ID:       3659786E-6B2D-4AF8-8901-434068730FC7
:END:

#+begin_src emacs-lisp
  (fringe-mode 12)
#+end_src

#+begin_src emacs-lisp
  (csetq bookmark-version-control t)
  (csetq bookmark-save-flag 1)
#+end_src

#+begin_src emacs-lisp
  (setq window-combination-resize t)
  (setq undo-limit (* 80 1024 1024))
#+end_src

From  emacs-plus:

#+begin_src emacs-lisp
  ;; C source code
  (setq frame-resize-pixelwise t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") #'count-words)
#+end_src

#+begin_src emacs-lisp
  (global-unset-key (kbd "<C-wheel-down>"))
  (global-unset-key (kbd "<C-wheel-up>"))
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
#+end_src

#+begin_src emacs-lisp
  (setq help-window-select t) ; Select help window by default
  (setq jit-lock-defer-time 0) ; Delay font-lock if its slow
  (defalias 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "M-o") #'other-window)

  (run-with-idle-timer 2 nil #'delete-selection-mode t)
  (run-with-idle-timer 2 nil #'midnight-mode t)
  (setq sentence-end-double-space nil)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")

  (add-hook 'before-save-hook 'whitespace-cleanup)

  (setq indent-tabs-mode nil) ; Never insert tabs with tab key
  (setq require-final-newline t)

  (run-with-idle-timer 2 nil #'save-place-mode 1)
  (csetq save-place-file (expand-file-name "save-place.el" actuator-var-directory))

  (setq backup-by-copying    t)
  (setq delete-old-versions  t)
  (setq kept-new-versions    50)
  (setq kept-old-versions    5) ; I don't know what an old version is
  (setq version-control      t)
  (setq vc-make-backup-files t)

  (setq uniquify-buffer-name-style 'forward) ; Like a path, the way that makes sense
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
  (setq uniquify-strip-common-suffix nil)

  (setq find-file-visit-truename nil) ; Don't resolve symlinks
  (setq confirm-kill-emacs 'y-or-n-p)

  ;;(abbrev-mode)
  (run-with-idle-timer 1 nil #'abbrev-mode 1)
  ;;(setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)

  (setq enable-recursive-minibuffers t)
  (run-with-idle-timer 2 nil #'minibuffer-depth-indicate-mode t)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-defun  'disabled nil)

  (add-hook 'after-save-hook
            #'executable-make-buffer-file-executable-if-script-p)

  (defun display-startup-echo-area-message ()
    "Remove the GNU info from the minibuffer on startup.
  All you have to do is create a function with this name.  It's
  called automatically."
    (message ""))

  (setq default-frame-alist
        '((ns-transparent-titlebar . t)
          (ns-appearance           . 'light)))

  (setq completion-styles
        '(fuzzy
          basic
          partial-completion
          substring
          initials
          emacs22))

  (defun actuator-font-exists-p (font)
    "Return non-nil if FONT is loaded."
    (member font (font-family-list)))

  (defun actuator-frame-init (&optional _frame)
    "Initialize per-frame variables.
  These variables need to be set every time a frame is created."
    (when (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (when (fboundp 'tooltip-mode)    (tooltip-mode    -1))
    (when (and (not (display-graphic-p))
               (fboundp 'menu-bar-mode))
      (menu-bar-mode   -1))
    (when (actuator-font-exists-p "SF Mono")
      (set-frame-font "SF Mono-12" nil t)))

  (add-hook 'after-make-frame-functions 'actuator-frame-init)
  (actuator-frame-init)
#+end_src
** Misc

#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'recentf-mode 1)
  (global-set-key (kbd "C-x C-r") #'recentf-open-files)
  (csetq recentf-max-saved-items 1000)
  (csetq recentf-save-file (expand-file-name "recentf.el" actuator-var-directory))
  (csetq recentf-exclude `(,actuator-var-directory
                       "^/\\(?:ssh\\|su\\|sudo\\)?:"
                       "/var/folders/"))
  (add-hook 'midnight-mode-hook #'recentf-cleanup)
#+end_src

** Plain Font

#+begin_src emacs-lisp
  (load-theme 'actuator t)

  (blink-cursor-mode -1)
  (setq cursor-type 'box)
  ;;(pixel-scroll-mode)
  (setq scroll-conservatively 101) ; Move the buffer just enough to display point, but no more
  (setq scroll-margin 0)
  (setq mouse-wheel-scroll-amount '(1))

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+end_src

#+begin_src emacs-lisp
  (unless 'window-system
    (require 'mouse)
    (require 'xt-mouse)
    ;;(csetq mouse-sel-mode t)
    (xterm-mouse-mode t)
    (defun track-mouse (_e)))
#+end_src

#+begin_src emacs-lisp
  (when (executable-find "mdfind")
    (csetq locate-command "mdfind"))
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-hook 'emacs-lisp-mode-hook #'flymake-mode)
#+end_src

#+results:

#+begin_src emacs-lisp
  (csetq vc-handled-backends nil)
#+end_src

#+begin_src emacs-lisp
  (run-with-idle-timer 2 nil #'show-paren-mode 1)
  (run-with-idle-timer 2 nil #'electric-pair-mode 1)
  (csetq blink-matching-paren nil)
  (csetq show-paren-delay 0)
  (csetq show-paren-style 'mixed)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'actuator-startup-profile)

  (defun actuator-startup-profile ()
    "Displays startup time garbage collections in the modeline."
    (message "Emacs ready in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
#+end_src
** Eliminate frame title
#+begin_src emacs-lisp
  (setq ns-use-proxy-icon nil)
  (setq frame-title-format
        '((:eval (when (buffer-file-name)
                   (abbreviate-file-name default-directory)))
          "%b" ))
  ;;(set-frame-parameter (selected-frame) 'title nil)
#+end_src

#+begin_src emacs-lisp
  (defun remember-titlebar-settings ()
    "Get fucked, Emacs"
    (set-frame-parameter (selected-frame) 'name nil)
    (set-frame-parameter (selected-frame) 'title nil))
  ;;(add-hook 'window-configuration-change-hook #'remember-titlebar-settings)
#+end_src

** Help
#+begin_src emacs-lisp
  ;;(global-set-key (kbd "C-h x k") #'describe-key)
#+end_src

** Delete by Moving to Trash
#+begin_src emacs-lisp
  (defun system-move-file-to-trash (file)
    "Move FILE to trash via the `trash` command-line tool."
    (call-process "trash" nil nil nil file))
#+end_src

#+begin_src emacs-lisp
  (when (executable-find "trash")
    (csetq delete-by-moving-to-trash t))
#+end_src

** Copy sentence
#+begin_src emacs-lisp
  (defun actuator-copy-sentence ()
    "Save the entire sentence to the clipboard/kill ring."
    (interactive)
    (save-excursion
      (backward-sentence)
      (mark-end-of-sentence nil)
      (copy-region-as-kill nil nil t)))
#+end_src

** Org
#+begin_src emacs-lisp
  (make-directory (expand-file-name "org/" actuator-var-directory) t)

  (make-directory (expand-file-name "org-publish/"
                                    actuator-var-directory)
                  t)
  (csetq org-clock-persist-file (expand-file-name "org/org-clock-persist.el"
                                            actuator-var-directory))
  (csetq org-publish-timestamp-directory (expand-file-name "org-publish/"
  actuator-var-directory))
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-files (expand-file-name "agenda" org-directory))
  (csetq org-use-fast-todo-selection 'expert)
  (csetq org-todo-keywords
         '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "SOMEDAY(s)" "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)")))
  (csetq org-agenda-custom-commands
         '(("h" "Agenda Plus"
            ((agenda "")
             (tags-todo "current")))))
  (csetq org-agenda-window-setup 'reorganize-frame)
  (csetq org-agenda-restore-windows-after-quit t)
  (csetq org-agenda-span 'week) ;; fortnight
  (csetq org-agenda-include-diary t)
  (csetq org-agenda-text-search-extra-files nil)
  (csetq org-agenda-todo-list-sublevels t)
  (csetq org-agenda-sticky t)
  (csetq org-agenda-dim-blocked-tasks t)
  (csetq org-list-indent-offset 1)
  (csetq org-use-speed-commands t)
  (csetq org-refile-allow-creating-parent-nodes 'confirm)
  (csetq org-outline-path-complete-in-steps nil)
  (csetq org-refile-use-outline-path 'file)
  (csetq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (csetq org-footnote-auto-adjust t)
  (csetq org-footnote-define-inline t)
  (csetq org-footnote-auto-label t)
  (csetq org-confirm-babel-evaluate nil)
  (csetq org-babel-results-keyword "results")
  (csetq org-edit-src-persistent-message nil)
  (csetq org-src-tab-acts-natively t)
  (csetq org-src-window-setup 'current-window)
  (csetq org-src-ask-before-returning-to-edit-buffer nil)
  (csetq org-src-fontify-natively t)
  (csetq org-tags-exclude-from-inheritance '("crypt"))
  (csetq org-crypt-key nil)
  (csetq org-habit-show-habits-only-for-today t)
  (csetq org-capture-bookmark t)
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-columns-add-appointments-to-effort-sum t)
  ;;(add-to-list 'org-global-properties '("Effort_ALL". "0 0:10 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")) ;; WHY NO WORK
#+end_src



#+begin_src emacs-lisp
  (csetq org-agenda-todo-ignore-scheduled 'future)
  (csetq org-agenda-todo-ignore-deadlines 'far)
  (csetq org-agenda-todo-ignore-timestamp 'future)
  (csetq org-agenda-todo-ignore-with-date nil)
  (csetq org-agenda-tags-todo-honor-ignore-options t)
#+end_src
#+begin_src emacs-lisp
  (defun actuator-org-src-line-wrap-setup ()
        "Set truncate-lines-mode in org-source-editing buffers."
        (setq-local truncate-lines t))
  (add-hook 'org-src-mode-hook #'actuator-org-src-line-wrap-setup)
#+end_src

#+results:
| org-src-babel-configure-edit-buffer | org-src-mode-configure-edit-buffer | actuator-org-src-line-wrap-setup |

#+begin_src emacs-lisp
   (with-eval-after-load 'org-agenda
       (csetq org-agenda-follow-mode t))
#+end_src

#+results:

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;;(add-to-list 'org-default-properties "DIR")
    ;;(add-to-list 'org-default-properties "header-args")
    (org-crypt-use-before-save-magic)
    (add-to-list 'org-modules 'org-crypt)
    (org-indent-mode 1)
    ;;(org-emphasis-alist (delete '("+" (:strike-through t)) org-emphasis-alist))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (shell      . t)))
    (require 'org-checklist)
    (add-to-list 'org-modules 'org-habit)
    (require 'org-habit)
    (add-to-list 'org-modules 'org-checklist))
#+end_src

#+results:
| org-checklist | org-habit | org-crypt |

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-plus-contrib)
  (csetq org-babel-default-header-args '((:mkdirp   . "yes")
                                        (:comments . "link")
                                        (:session  . "none")
                                        (:results  . "replace")
                                        (:exports  . "code")
                                        (:cache    . "no")
                                        (:noweb    . "no")
                                        (:hlines   . "no")
                                        (:tangle   . "no")))

  (defun actuator-update-all-dynamic-blocks ()
    "Hi"
    (org-dblock-update 1))

  (defun actuator-org-mode-subhook ()
    "Thing"
    (electric-indent-local-mode -1)
    (visual-line-mode)
    (add-hook 'before-save-hook
                        'actuator-update-all-dynamic-blocks nil
                        'make-it-local))

  (add-hook 'org-mode-hook #'actuator-org-mode-subhook)

  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c l") #'org-store-link)

  (csetq org-startup-folded 'content)
  (csetq org-ellipsis " →")
  (csetq org-startup-align-all-tables t)
  (csetq org-startup-shrink-all-tables t)
  (csetq org-startup-with-inline-images t)
  (csetq org-startup-indented t)
  (csetq org-hide-leading-stars t)
  (csetq org-pretty-entities-include-sub-superscripts t)
  (csetq org-hide-emphasis-markers t)
  ;;
  (csetq org-image-actual-width 300)
  (csetq org-fontify-done-headline t)
  (csetq org-structure-template-alist '(("e" . "src emacs-lisp")
                                  ("s" . "src shell")))
  (csetq org-log-done 'time)
  (csetq org-log-into-drawer t)
  (csetq org-log-reschedule 'time)
  (csetq org-log-refile 'time)
  (csetq org-log-redeadline 'time)
  (csetq org-closed-keep-when-no-todo t)
  (csetq org-enforce-todo-dependencies t)
  (csetq org-enforce-todo-checkbox-dependencies t)
  (csetq org-complete-tags-always-offer-all-agenda-tags nil)
  (csetq org-clone-delete-id t)
  (csetq org-tags-column -60)
  (csetq org-catch-invisible-edits 'show-and-error)
  (csetq org-insert-heading-respect-content t)
  (csetq org-ctrl-k-protect-subtree t)
  (csetq org-M-RET-may-split-line '((default . nil)))
  (csetq org-special-ctrl-k t)
  (csetq org-special-ctrl-a/e t)
  ;; (csetq org-blank-before-new-entry '((heading         . t)
  ;;                               (plain-list-item . auto)))
  (csetq org-use-property-inheritance t)
  (csetq org-modules nil)
  (csetq org-tag-persistent-alist '(("noexport")
                                    ("ignore")
                                    ("unpublished")
                                    ("blog")
                                    ("tbd")))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-capture-turn-off-header-line ()
    "Disable the header-line in a local mode.
  This is used to disable the help line in `org-capture' buffers as
  there's no variable that will do it."
    (setq-local header-line-format nil))
  (add-hook 'org-capture-mode-hook #'actuator-org-capture-turn-off-header-line)
#+end_src

** Holidays
:PROPERTIES:
:CATEGORY: Holiday
:END:
#+begin_src emacs-lisp
  (setq holiday-islamic-holidays nil)
  ;;(setq holiday-christian-holiday nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-oriental-holidays nil)
  ;;(setq holiday-other-holidays '((lunar-phases)))
#+end_src

** Keyboard Macros

- ~C-x (~ Start defining a keyboard macro.
- ~C-x )~ End a keyboard macro.
- ~C-u C-x (~ Replay macro and append keys to the definition.
- ~C-u C-u C-x (~ Don’t replay but append keys.
- ~C-x C-k r~ Run the last keyboard macro on each line that begins in the region.
- ~C-x C-k n~ Name the most recent macro.
- ~C-x C-k b~ Bind the most recent macro to a keybinding (for the session only).
- ~M-x insert-kbd-macro~ Insert the most recent macro into the buffer as lisp. That’s how you save it.
- ~C-x C-k 0-9~ and ~C-x C-k A-Z~ are reserved for keyboard macros

*** Make Checklist
#+begin_src emacs-lisp
(fset 'actuator-make-checklist
   (kmacro-lambda-form [?\C-a ?- ?  ?\[ ?  ?\] ?  ?\C-n] 0 "%d"))
    (global-set-key (kbd "C-x C-k 1") #'actuator-make-checklist)
#+end_src

*** References
- [[http://ergoemacs.org/emacs/emacs_macro_example.html][Emacs: Keyboard Macro ]][2020-06-08 Mon]
- [[https://www.emacswiki.org/emacs/KeyboardMacros][EmacsWiki: Keyboard Macros]] [2020-06-08 Mon]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html][Basic Keyboard Macro - GNU Emacs Manual]] [2020-06-08 Mon]

** Web
*** URL
#+begin_src emacs-lisp
  (make-directory (expand-file-name "url/" actuator-var-directory) t)
  (make-directory (expand-file-name "url/" actuator-var-directory) t)
  (csetq url-cache-directory (expand-file-name "url/" actuator-var-directory))
  (csetq url-configuration-directory (expand-file-name "url/" actuator-var-directory))
#+end_src

*** Set up browsing handlers                      :ignore:
Customizing the browse-url handlers is remarkably powerful. I don't use Emacs as a web browser much, but I do use a lot of links in Org-mode documents. If something isn't set here, it opens the URL in the default manner, which in my case is Safari ([[https://developer.apple.com/safari/technology-preview/][Technology Preview]]).

#+begin_src emacs-lisp
  (csetq browse-url-handlers '(("wikipedia"   . eww )
                               ("youtu\\.?be" . actuator-browse-video)
                               ("twitch"      . actuator-browse-video)))
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "eww" actuator-var-directory) t)
  (csetq eww-bookmarks-directory (expand-file-name "eww" actuator-var-directory))
#+end_src

*** Handle video urls                             :ignore:
I want video links to be opened in MPV. This helps my battery life as well as my personal life because I don't have to visit YouTube. This requires [[https://mpv.io][MPV]] to be installed, which is best installed via [[http://brew.sh][Brew]] on macOS. I've tried to use [[https://nixos.org/download.html][Nix]], but it doesn't work well.

#+begin_src emacs-lisp
    (defun actuator-browse-video (url &rest _args)
      "Browse a URL with a dedicated video player.
  Avoids opening a browser window."
      (start-process "mpv" nil "mpv" url))
#+end_src

*** Simple HTML renderer                          :ignore:
SHR is used to render all sorts of basic HTML in Emacs, including Elfeed posts and Nov.el books. Normally it wraps at the page width, but that can be adjusted.

#+begin_src emacs-lisp
  (csetq shr-width 75)
#+end_src

*** Open links in background                      :ignore:

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq browse-url-browser-function 'eww)
    (setq browse-url-secondary-browser-function 'browse-url-generic)
    (setq browse-url-generic-program "open")
    (setq browse-url-generic-args '("--background")))
#+end_src

#+begin_src emacs-lisp
  (make-directory "~/Sync/.sync/eww/" t)
  (csetq eww-bookmarks-directory "~/Sync/.sync/eww/")
#+end_src

** iBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (csetq ibuffer-expert t)
#+end_src

#+begin_src emacs-lisp
  (csetq ibuffer-show-empty-filter-groups nil)
  (csetq ibuffer-saved-filter-groups
        '(("default"
           ("Misc"      (name . "^\\*.*\\*$"))
           ("Magit"     (name . "magit"))
           ("Src"       (name . "\*Org Src"))
           ("Dired"     (mode . dired-mode))
           ("My Org"    (directory . "/Users/g/org"))
           ("Config"    (or
                         (directory . "/Users/g/.config")
                         (directory . "/usr/local/share/emacs"))))))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-ibuffer-setup ()
    "Setup ibuffer defaults."
    (require 'ibuf-ext)
    (declare-function 'ibuffer-switch-to-saved-filter-groups "ibuf-ext")
    (declare-function 'ibuffer-auto-mode "ibuf-ext")
    (ibuffer-switch-to-saved-filter-groups "default")
    (ibuffer-auto-mode 1)
    (toggle-truncate-lines +1))
  (add-hook 'ibuffer-mode-hook #'actuator-ibuffer-setup)
#+end_src

** Encryption (EPG)
#+begin_src emacs-lisp
  (csetq epg-pinentry-mode 'loopback)
#+end_src
** Dired
#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (require 'dired-x)
    (require 'wdired))
  (add-hook 'dired-mode-hook #'dired-omit-mode)
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "image-dired/gallery/" actuator-var-directory) t)
  (csetq image-dired-dir (expand-file-name "image-dired/" actuator-var-directory))
  (csetq image-dired-db-file (expand-file-name "image-dired/image-dired.db" actuator-var-directory))
  (csetq image-dired-gallery (expand-file-name "image-dired/gallery/" actuator-var-directory))
  (csetq image-dired-temp-image-file (expand-file-name "image-dired/temp-image" actuator-var-directory))
  (csetq image-dired-temp-rotate-image-file (expand-file-name "image-dired/temp-rotate-image" actuator-var-directory))
#+end_src

#+begin_src emacs-lisp
  (setq image-dired-thumb-size 100)
  (setq image-dired-thumb-width 300)
  (setq image-dired-thumb-height 300)
  (setq image-dired-thumb-margin 5)
#+end_src


#+begin_src emacs-lisp
  (csetq dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`.DS_Store\\'\\|^.git$")
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'dired-shell-command-history))

  (csetq dired-dwim-target t)
  (csetq ls-lisp-use-insert-directory-program t)
  (csetq ls-lisp-ignore-case t)
  (csetq ls-lisp-use-string-collate nil)
  (csetq ls-lisp-verbosity '(links uid))
  (csetq ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
  (csetq ls-lisp-use-localized-time-format nil)

  (csetq dired-listing-switches "-alhFo") ; Not use for ls-lisp?
  ;; a :: include files beginning with dots
  ;; l :: display as list
  ;; h :: human-readable filenames
  ;; F :: display a slash after directories
  ;; S :: sort by size

  (csetq wdired-allow-to-change-permissions t)

  (csetq dired-recursive-copies 'always)
#+end_src

** Attach
:PROPERTIES:
:ID:       7542A761-77AB-4B42-B25E-33BFE7A45FE9
:END:

#+begin_src emacs-lisp
  (csetq org-attach-store-link-p t)
  (csetq org-attach-expert nil)
  (csetq org-attach-dir-relative t)
  (csetq org-attach-preferred-new-method 'dir)
  (csetq org-attach-method 'mv)
  (csetq org-attach-auto-tag "attach")
  (csetq org-attach-archive-delete 'query)
#+end_src
** Clock

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-clock-persistence-insinuate))
  (csetq org-clock-into-drawer "CLOCK")
  ;;(csetq org-clock-persist t)
  (csetq org-clock-out-remove-zero-time-clocks t)
  (csetq org-clock-mode-line-total 'auto)
#+end_src

** World Time
#+begin_src emacs-lisp
  (setq world-clock-list '(("America/New_York" "New York")
                            ("Europe/London"    "London")
                            ("Australia/Sydney" "Sydney")
                            ("America/Edmonton" "Calgary")
                            ("America/St_Johns" "St. John's")))
#+end_src

** Ediff
#+begin_src emacs-lisp
  (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
  (csetq ediff-split-window-function 'split-window-horizontally)

  (defun actuator-ediff-startup ()
    "Prep Ediff for success."
    (window-configuration-to-register :ediff))

  (defun actuator-ediff-quit ()
    "Restore files after diffing."
    (jump-to-register :ediff))

  (defun ediff-org-reveal-around-difference (&rest _)
    (require 'ediff)
    (dolist (buf (list ediff-buffer-A ediff-buffer-B ediff-buffer-C))
      (ediff-with-current-buffer buf
                                 (when (derived-mode-p 'org-mode)
                                   (org-reveal t)))))

  (advice-add 'ediff-next-difference :after
              #'ediff-org-reveal-around-difference)
  (advice-add 'ediff-previous-difference :after
              #'ediff-org-reveal-around-difference)

  (add-hook 'ediff-startup-hook #'actuator-ediff-startup)
  (add-hook 'ediff-quit-hook #'actuator-ediff-quit)
#+end_src

[[https://www.reddit.com/r/emacs/comments/dxzi96/have_some_code_make_ediffing_folded_org_files/][Have some code: make ediffing folded org files better : emacs]]

** Mu4e

[[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][Fastmail + mu4e]]

#+begin_src emacs-lisp
  (csetq mu4e-maildir-shortcuts
         '((:maildir "/Archive" :key ?a)
           (:maildir "/Inbox"   :key ?i)))
  (csetq mail-user-agent 'mu4e-user-agent)
  (csetq mu4e-hide-index-messages t)
  (csetq mu4e-update-interval nil)
  (csetq mu4e-index-update-in-background nil)
  (csetq mu4e-index-update-error-warning t)
  (csetq mu4e-refile-folder "/Archive")
  (csetq mu4e-sent-folder   "/Sent Items")
  (csetq mu4e-drafts-folder "/Drafts")
  (csetq mu4e-trash-folder  "/Trash")
  (csetq mu4e-attachment-dir "~/Downloads/")
  (csetq mu4e-view-show-images t)
  (csetq mu4e-view-show-addresses t)
  (csetq mu4e-change-filenames-when-moving t)
  (csetq mu4e-headers-skip-duplicates t)
  (csetq mu4e-compose-format-flowed t)
  (csetq mu4e-date-format "%y-%m-%d")
  (csetq mu4e-headers-date-format "%y-%m-%d")
  ;;(csetq mu4e-get-mail-command (concat (executable-find "mbsync") " --all"))
  (csetq mu4e-get-mail-command "mbsync --all")
  (csetq mu4e-mu-binary (executable-find "mu"))
  ;;(csetq mu4e-mu-binary "mu")
#+end_src

** Message

#+begin_src emacs-lisp
  (csetq send-mail-function 'sendmail-send-it)
  (csetq message-send-mail-function 'sendmail-send-it)
#+end_src

** Native Compile
#+begin_src emacs-lisp
  (when (boundp 'comp-async-report-warnings-errors)
    (setq comp-async-report-warnings-errors nil))
#+end_src

** Package Quickstart

#+begin_src emacs-lisp
  (add-hook 'kill-emacs-hook #'package-quickstart-refresh)
#+end_src

** Byte compile init

#+begin_src emacs-lisp
  (defun actuator-byte-recompile-init ()
    "Recompiles the inits. I dunno why I want to."
    (interactive)
    (let ((init   (expand-file-name "init.el"       user-emacs-directory)))
      (if (fboundp 'native-compile)
          (progn
            (native-compile init))
        (progn
          (byte-recompile-file init nil 0)))))
  (add-hook 'kill-emacs-hook #'actuator-byte-recompile-init)
#+end_src

#+results:
| prescient--save | transient-maybe-save-history | save-place-kill-emacs-hook | recentf-save-list | desktop-kill | elfeed-db-save-safe | actuator-byte-recompile-init | package-quickstart-refresh | org-clock-save | org-id-locations-save | org-babel-remove-temporary-directory | bookmark-exit-hook-internal | savehist-save | actuator-unpropertize-kill-ring | savehist-autosave | elfeed-db-gc-safe | server-force-stop |

** Modeline time
#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'display-time)
  (csetq display-time-24hr-format t)
  (csetq display-time-default-load-average nil)
#+end_src

** Allow different places in the same buffer
#+begin_src emacs-lisp
  (csetq switch-to-buffer-preserve-window-point t)
#+end_src

#+results:
: t

** ERC
#+begin_src emacs-lisp
  (defun actuator-twitch-start-irc ()
    "Connect to Twitch IRC."
    (interactive)
    (erc-tls :server "irc.chat.twitch.tv"
             :port 6697
             :nick (auth-source-pass-get "user" "twitch.tv")
             :password (auth-source-pass-get "oauth" "twitch.tv")))
#+end_src

** Doc View
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . doc-view-mode))

  (defvar actuator-doc-view-bookmark-push-p t
    "Whether to push automatic doc-view bookmarks, or clobber them.")
  (defun actuator-doc-view-open-handler ()
    "Stuff."
    (require 'bookmark)
    (bookmark-maybe-load-default-file)
    (bookmark-jump (buffer-name)))

  (defun actuator-doc-view-save-handler ()
    "Stuff"
    (when (eq major-mode 'doc-view-mode)
      (require 'bookmark)
      (bookmark-maybe-load-default-file)
      (bookmark-set (buffer-name) actuator-doc-view-bookmark-push-p)))

  (add-hook 'doc-view-mode-hook #'actuator-doc-view-open-handler)
  (add-hook 'kill-buffer-hook #'actuator-doc-view-save-handler)

  (csetq doc-view-resolution 150)
#+end_src
https://gist.github.com/spacebat/5500966

** Sync stuff
#+begin_src emacs-lisp
  (setq elfeed-db-directory   "~/Sync/.sync/elfeed")
  (setq abbrev-file-name      (expand-file-name "etc/abbrev.el" org-directory))
  (setq bookmark-default-file "~/Sync/.sync/bookmark.el")
#+end_src

** Org Randomnote
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-randomnote)
#+end_src

** Auth Source

#+begin_src emacs-lisp
  (csetq auth-sources '(password-store))
#+end_src


** Fish Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'fish-mode)
#+end_src
** Ledger Mode
#+begin_src emacs-lisp
  (csetq ledger-default-date-format 'ledger-iso-date-format)
  (add-to-list 'package-selected-packages 'ledger-mode)
#+end_src
** Markdown Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'markdown-mode)
#+end_src

** YAML Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'yaml-mode)
#+end_src
** TOML Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'toml-mode)
#+end_src
** Lua Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'lua-mode)
#+end_src
** Gitignore Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'gitignore-mode)
#+end_src
** Gitconfig Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'gitconfig-mode)
#+end_src
** Ripgrep
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'rg)
#+end_src
** Nov.el
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (csetq nov-save-place-file (expand-file-name "nov-save-place.el" actuator-var-directory))
  (csetq nov-text-width 75)
  (defun actuator-novel-setup ()
    (face-remap-add-relative 'variable-pitch :family "Georgia"
                             :height 1.3)
    (setq-local line-spacing 1.2))
  (add-hook 'nov-mode-hook 'actuator-novel-setup)
#+end_src

** Project
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'project)
  (csetq project-list-file (expand-file-name "project-list.el" actuator-var-directory))
#+end_src

** Org Link Minor Mode

#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'org-link-minor-mode)

  (when (package-installed-p 'org-link-minor-mode)
    (add-hook 'emacs-lisp-mode #'org-link-minor-mode))
#+end_src

** HTMLize
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'htmlize)
#+end_src

** Eldoc

[[https://www.reddit.com/r/emacs/comments/c1zl0s/weekly_tipstricketc_thread/ergullj/?context=1][Improve eldoc's documentation]]

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'eldoc)

  (csetq eldoc-echo-area-use-multiline-p t)
  (csetq eldoc-idle-delay 0)

  (with-eval-after-load 'eldoc
    (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
      "If SYM is a function, append its docstring."
      (require 'subr-x)
      (concat
       (apply orig-fun sym r)
       (when-let ((doc (and (fboundp sym) (documentation sym 'raw)))
                  (oneline (substring doc 0 (string-match "\n" doc))))
         (when (not (string= "" oneline))
           (concat " " (propertize oneline 'face 'italic)))))))
#+end_src

** Forge
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'forge)
  (make-directory (expand-file-name "forge/post/" actuator-var-directory) t)
  (csetq forge-database-file (expand-file-name "forge/forge.db" actuator-var-directory))
  (csetq forge-post-directory (expand-file-name "forge/post/" actuator-var-directory))
#+end_src

#+results:

** Transient
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'transient)
  (make-directory (expand-file-name "transient" actuator-var-directory) t)
  (csetq transient-history-file (expand-file-name "transient/history.el" actuator-var-directory))
  (csetq transient-levels-file (expand-file-name "transient/levels.el" actuator-var-directory))
  (csetq transient-values-file (expand-file-name "transient/values.el" actuator-var-directory))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'counsel)
  (add-to-list 'package-selected-packages 'ivy)
  (add-to-list 'package-selected-packages 'swiper)

  (with-eval-after-load 'counsel
    (setq counsel-find-file-ignore-regexp "\\`\\."))

  (when (package-installed-p 'counsel)
    (require 'counsel)
    (require 'ivy)
    (require 'swiper)
    (counsel-mode 1)
    (global-set-key (kbd "C-x C-r") #'counsel-buffer-or-recentf)
    (global-set-key (kbd "C-x C-f") #'counsel-find-file)
    (global-set-key (kbd "M-x")     #'counsel-M-x)
    (global-set-key (kbd "C-h f")   #'counsel-describe-function)
    (global-set-key (kbd "C-h v")   #'counsel-describe-variable)
    (global-set-key (kbd "C-c s")   #'counsel-search)
    (global-set-key (kbd "M-y")     #'counsel-yank-pop))
#+end_src

#+begin_src emacs-lisp
  (when (package-installed-p 'ivy)
    (ivy-mode 1)
    (global-set-key (kbd "C-x b") #'ivy-switch-buffer))

  (with-eval-after-load 'ivy
    (define-key ivy-minibuffer-map (kbd "<C-return>") #'ivy-immediate-done)
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
    (define-key ivy-minibuffer-map (kbd "M-y") #'ivy-next-line))

  (csetq ivy-use-ignore-default 'always)
  (csetq ivy-ignore-buffers '("*elfeed-log*"
                              "*straight-process*"
                              "*Completions*"
                              "*Compile-Log*"))
  (csetq ivy-use-virtual-buffers nil)
  (csetq ivy-count-format "(%d/%d) ")
  (csetq ivy-extra-directories nil)
#+end_src


#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'prescient)
  (add-to-list 'package-selected-packages 'ivy-prescient)

  (with-eval-after-load 'ivy
    (when (package-installed-p 'ivy-prescient)
      (ivy-prescient-mode 1)
      (prescient-persist-mode 1)))

  (csetq prescient-save-file (expand-file-name "prescient.el" actuator-var-directory))
  (csetq prescient-history-length 10000)
  (csetq prescient-aggressive-file-save t)
#+end_src
** Cliplink

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-cliplink)
  (global-set-key (kbd "C-x p i") #'org-cliplink)
    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                   '("b" "Bookmark" entry
                     (file "bookmarks.org")
                     "* %(org-cliplink-capture) %^g\nSaved on: %U\n\n%?"
                     :prepend
                     :empty-lines 1
                     :kill-buffer)))
#+end_src

** Anki
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'anki-editor)
#+end_src

** Auctex
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'auctex)
  (csetq TeX-engine 'luatex)
  (csetq TeX-source-correlate-start-server t)
#+end_src
** Magit
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'magit)

  (global-set-key (kbd "C-c g") #'magit-status)
  (global-set-key (kbd "C-x g") #'magit-status)
  (global-set-key (kbd "C-x G") #'magit-list-repositories)

  (csetq magit-diff-refine-hunk 'all)
  (csetq magit-save-repository-buffers 'dontask)
  (csetq magit-section-initial-visibility-alist
         '((untracked . show)
           (unstaged  . show)
           (unpushed  . show)
           (upstream  . show)))
  ;;(csetq magit-auto-revert-mode t)
  (csetq magit-push-always-verify nil)
  (csetq magit-no-confirm '(stage-all-changes
                            unstage-all-changes))
  (csetq magit-status-initial-section nil)
  (csetq magit-repository-directories
         `((,org-directory . 0)
           ("~/env.d"      . 0)
           ("~/Projects"   . 1)))
#+end_src

#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
       (window-configuration-to-register :magit-fullscreen)
       ad-do-it
       (delete-other-windows))
#+end_src


#+begin_src emacs-lisp
(defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (auto-revert-mode -1)
      (jump-to-register :magit-fullscreen))
#+end_src

** Org download

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-download)

  ;;(global-set-key (kbd "C-M-y") #'org-download-screenshot)

  ;;(require 'org-download)


    (csetq org-download-method 'directory)
    (csetq org-download-image-dir nil)
    ;;(csetq org-download-annotate-function #'actuator-org-dl-annotate)
    ;;(csetq org-download-timestamp "")
    (csetq org-download-screenshot-method "screencapture -i %s")
    (csetq org-download-heading-lvl nil)
    (csetq org-download-timestamp "%Y%m%d-%H%M%S-")
    ;;(csetq org-download-screenshot-method "/usr/local/bin/pngpaste %s")

#+end_src

** Web Mode

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'web-mode)

  (when (package-installed-p 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'"   . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.json\\'"  . web-mode)))

  (csetq web-mode-markup-indent-offset 2)
  (csetq web-mode-code-indent-offset 2)
  (csetq web-mode-css-indent-offset 2)
#+end_src
** Elfeed
#+begin_src emacs-lisp
  (csetq elfeed-search-filter "@1-week-ago +unread ")
  (global-set-key (kbd "C-x w") #'actuator-elfeed-load-db-and-open)
  (with-eval-after-load 'elfeed
    (define-key elfeed-search-mode-map (kbd "q") #'actuator-elfeed-save-db-and-bury)
    (define-key elfeed-search-mode-map (kbd "R") #'actuator-elfeed-mark-all-as-read))
#+end_src

Filters are kind of the star of Elfeed. I mostly use them to remove items that I don't want to see (or already see in other contexts---podcasts for example). I think it's all pretty straightforward. The only thing of note that I do is adding a debug tag to each hook that hides things. That way I can tell which filter it is that's causing problems when I make a stupid typo and suddenly a specific filter matches all entries.

#+begin_src emacs-lisp
  (with-eval-after-load 'elfeed
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :entry-title "sponsor\\|revenue\\|financial"
                                  :add '(junk debug1)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "2 weeks ago"
                                  :add 'debug2
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "MacSparky"
                                  :entry-title "focused\\|Mac Power Users\\|jazz\\|automators\\|podcast"
                                  :add '(junk debug3)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "Six Colors"
                                  :entry-title "podcast\\|macworld\\|member"
                                  :add '(junk debug4)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "Longreads"
                                  :entry-title "longreads"
                                  :add '(junk debug5)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "youtube\\.com"
                                  :add '(video youtube)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "twitchrss"
                                  :add '(video twitch)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "kijiji\\.ca"
                                  :add '(shop kijiji)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "reddit"
                                  :add 'reddit))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "ikea"
                                  :entry-title "Q\\:"
                                  :remove 'unread
                                  :add '(junk debug6)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "cestlaz"
                                  :entry-title '(not "emacs")
                                  :add '(junk debug7)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "reddit\\.com"
                                  :entry-title '(not "F1")
                                  :add '(junk debug8)
                                  :remove 'unread)))
#+end_src

You don't need to do anything special to load Elfeed. You can set up a keybinding that runs ~(elfeed)~ and it should work. I took this function from [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][Pragmatic Emacs]] when I first set up Elfeed a few years ago because I wanted to keep the database in sync between multiple computers. These helper functions ensure that the database is loaded and saved at the appropriate moments. I'm not sure there's any benefit to these if you only use them on one computer (as I do now) but I can't find any downsides either, so they stay.

#+begin_src emacs-lisp
  (defun actuator-elfeed-load-db-and-open ()
        "Wrapper to load the elfeed database from disk before
        opening. Taken from Pragmatic Emacs."
        (interactive)
        (window-configuration-to-register :elfeed-fullscreen)
        (delete-other-windows)
        (elfeed)
        (elfeed-db-load)
        (elfeed-search-update 1)
        (elfeed-update))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-elfeed-save-db-and-bury ()
    "Wrapper to save the Elfeed database to disk before burying
    buffer. Taken from Pragmatic Emacs."
    (interactive)
    (elfeed-db-save)
    (elfeed-db-gc)
    (elfeed-db-compact)
    (elfeed-db-unload)
    (quit-window)
    (garbage-collect)
    (jump-to-register :elfeed-fullscreen))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-elfeed-mark-all-as-read ()
      "Mark all feeds in search as read. Taken from Mike Zamansky"
      (interactive)
      (with-no-warnings (mark-whole-buffer))
      (elfeed-search-untag-all-unread))
#+end_src

Changing the colours of an entry is neat, but not that useful. I mostly have this set up in order to learn how to do it, and as a vague novelty.

#+begin_src emacs-lisp
  (with-eval-after-load 'elfeed
  (add-to-list 'elfeed-search-face-alist
               '(video actuator-elfeed-video-face))
  (add-to-list 'elfeed-search-face-alist
               '(image actuator-elfeed-image-face))
  (add-to-list 'elfeed-search-face-alist
               '(comic actuator-elfeed-comic-face)))
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-video-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed video entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-image-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed image entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-comic-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed comic entry."
    :group 'actuator-elfeed)
#+end_src

** Org-elfeed
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'elfeed-org)

  (with-eval-after-load 'elfeed
    (require 'elfeed-org nil t)
    (elfeed-org))

  (csetq rmh-elfeed-org-ignore-tag "disconnected")
  (csetq rmh-elfeed-org-auto-ignore-invalid-feeds nil)
  (csetq rmh-elfeed-org-files `(,(expand-file-name "feeds.org" org-directory)))
#+end_src

** Eshell

#+begin_src emacs-lisp
  (make-directory (expand-file-name "elfeed" actuator-var-directory) t)
  (csetq eshell-directory-name (expand-file-name "elfeed" actuator-var-directory))
  (csetq eshell-history-file-name (expand-file-name "history" eshell-directory-name))
#+end_src

#+begin_src emacs-lisp
  (defalias 'eshell/f  'find-file-other-window)
  (defalias 'eshell/ff 'find-file)
  (defalias 'eshell/v  'view-file-other-window)
  (defalias 'eshell/vv 'view-file)

  (csetq eshell-destroy-buffer-when-process-dies t)
  (csetq eshell-banner-message "")
#+end_src

#+begin_src emacs-lisp
  (csetq eshell-history-size 10000)
  (csetq eshell-hist-ignoredups t)
#+end_src

#+begin_src emacs-lisp
  (csetq eshell-cmpl-cycle-completions nil)
  (csetq eshell-cmpl-ignore-case t)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-eshell-smart-shell ()
    "Set up Plan9/Smart shell stuff."
    (require 'em-smart)
    (declare-function eshell-smart-initialize "em-smart")
    (eshell-smart-initialize))
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
  (add-hook 'eshell-mode-hook #'actuator-eshell-smart-shell)
#+end_src

- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

#+begin_src emacs-lisp
    (defun actuator-eshell-imenu ()
      "Set up eshell-imenu integration"
      (setq-local imenu-generic-expression
                  '(("Prompt" "^.*?[#❯]" 1))))
    ;;(add-hook 'eshell-mode-hook #'actuator-eshell-imenu)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-eshell-autocomplete ()
    "Enable tab autocompletion in eshell."
    (define-key eshell-mode-map (kbd "<tab>") #'actuator-eshell-autocomplete))
  (defun actuator-pcomplete-std-complete ()
    (interactive)
    (pcomplete-std-complete))
  ;;(add-hook 'eshell-mode-hook #'actuator-eshell-autocomplete)
#+end_src

#+results:
| actuator-fish-completion | actuator-eshell-autocomplete | actuator-eshell-imenu |

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'pcmpl-args)
  (with-eval-after-load 'eshell
    (require 'pcmpl-args nil t))
#+end_src

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'package-selected-packages 'pcmpl-homebrew)
    (with-eval-after-load 'eshell
      (require 'pcmpl-homebrew nil t)))
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'fish-completion)

  (csetq fish-completion-fallback-on-bash-p t)

  (defun actuator-set-up-eshell-fish-completion ()
    "arst"
    (when (executable-find "fish")
      (require 'fish-completion nil t)
      (fish-completion-mode)))

  ;;(add-hook 'eshell-mode-hook #'actuator-set-up-eshell-fish-completion)
#+end_src

#+begin_src emacs-lisp
  ;;(add-hook 'eshell-expand-input-functions
  ;;           #'eshell-expand-history-references)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'eshell
    (defun actuator-eshell-prompt ()
      (require 'eshell)
      (require 'em-dirs)
      (declare-function 'eshell/pwd "em-dirs")
      (concat
       ;;(user-login-name)
       ;;"@"
       ;;(system-name)
       ;;":"
       (eshell/pwd)
       " ❯ ")))
    (csetq eshell-prompt-regexp "^.+@.+:.+❯ ")
    (csetq eshell-prompt-function #'actuator-eshell-prompt)
#+end_src

#+results:
: actuator-eshell-prompt

** Mu4e Alert
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'mu4e-alert)

  (defun actuator-set-up-mu4e-alert ()
    "Set up mu4e alerts if both mu4e and mu4e-alert are installed.

  If run with an idle timer such as:

  (run-with-idle-timer 2 nil #'actuator-set-up-mu4e-alert)

  it will not hurt the startup time."
    (require 'mu4e-alert nil t)
    (require 'mu4e nil t)
    (when (and (featurep 'mu4e-alert) (featurep 'mu4e))
      (cond ((eq system-type 'gnu/linux)
             (mu4e-alert-set-default-style 'libnotify))
            ((eq system-type 'darwin)
             (mu4e-alert-set-default-style 'osx-notifier)))
      (mu4e-alert-enable-notifications)
      (mu4e-alert-enable-mode-line-display)))

  (run-with-idle-timer 2 nil #'actuator-set-up-mu4e-alert)
#+end_src
** Alert

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'alert)
  (cond ((eq system-type 'gnu/linux)
         (csetq alert-default-style 'libnotify))
        ((eq system-type 'darwin)
         (csetq alert-default-style 'osx-notifier)))
#+end_src
** Systemd
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'systemd)
#+end_src

** Tramp
#+begin_src emacs-lisp
  (make-directory (expand-file-name "tramp/" actuator-var-directory) t)
  (csetq tramp-auto-save-directory (expand-file-name "tramp/auto-save/" actuator-var-directory))
  (csetq tramp-persistency-file-name (expand-file-name "tramp.el" actuator-var-directory))
#+end_src

** Rainbow
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'rainbow-mode)
  (require 'rainbow-mode nil t)
  (when (featurep 'rainbow-mode)
    (rainbow-mode))
#+end_src
** Modeline

#+begin_src emacs-lisp
  (setq-default mode-line-format
                (list
                 " %e"
                 mode-line-mule-info
                 mode-line-client
                 mode-line-modified
                 "   "
                 '(:eval (when (buffer-file-name)
                           (abbreviate-file-name default-directory)))
                 ;;mode-line-buffer-identification
                 (propertize "%b" 'face 'mode-line-buffer-id)
                 " %IB "
                 mode-line-position
                 "  "
                 mode-line-misc-info
                 '(:eval (when (featurep 'minions)
                           minions-mode-line-modes))))
#+end_src

*** References
 - [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Custom Emacs Modeline]]
** Minions
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'minions)
  (require 'minions nil t)
  (when (featurep 'minions)
    (minions-mode))
#+end_src
** Sudoers

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'etc-sudoers-mode)
#+end_src

** VTerm

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'vterm)
  (when (executable-find "fish")
    (csetq vterm-shell "fish"))
#+end_src

** Auto-save
#+begin_src emacs-lisp
  (csetq auto-save-list-file-prefix (expand-file-name "auto-save/"
                                                      actuator-var-directory))
  (auto-save-mode)
#+end_src

#+results:

** Backups
#+begin_src emacs-lisp
  (csetq backup-directory-alist
                          `(("." . ,(expand-file-name "backups" actuator-var-directory))))
#+end_src

** Ignore disabled commands
#+begin_src emacs-lisp
  (setq disabled-command-function 'ignore)
#+end_src

** MPDel
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'mpdel)
  (require 'mpdel nil t)
  ;; (mpdel-mode)
  (csetq mpdel-prefix-key (kbd "C-z"))
#+end_src

https://gitea.petton.fr/mpdel/mpdel

** Spell check
#+begin_src emacs-lisp
  ;;(csetq ispell-program-name "aspell")
  (csetq ispell-personal-dictionary (expand-file-name "etc/dictionary" org-directory))
  (csetq ispell-silently-savep t)
  (defun actuator-org-reveal-around-ispell ()
    "Reveals the area around the point in org-mode files."
    (when (derived-mode-p 'org-mode)
      (org-reveal t)))
  (add-hook 'ispell-update-post-hook #'actuator-org-reveal-around-ispell)
#+end_src

** Remove bidirectional editing to make long lines better
#+begin_src emacs-lisp
  (csetq bidi-paragraph-direction 'left-to-right)
  (csetq bidi-inhibit-bpa t)
#+end_src

** Long lines mode
#+begin_src emacs-lisp
  (run-with-idle-timer 2 nil #'global-so-long-mode 1)
#+end_src
