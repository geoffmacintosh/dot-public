#+title: Emacs

* Early Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/early-init.el
:END:
#+begin_src emacs-lisp
  ;;; early-init.el -*- lexical-binding: t; -*-
  (setq load-prefer-newer t)
  (setq package-quickstart t)
  (setq frame-inhibit-implied-resize t)
#+end_src

#+begin_src emacs-lisp
  (when (boundp 'comp-eln-load-path)
    (setcar (nthcdr 0 comp-eln-load-path)
     (expand-file-name "var/eln-cache/" user-emacs-directory)))
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-gc-cons-threshold gc-cons-threshold
    "Original value for `gc-cons-threshold'.")
  (defun actuator-restore-gc-cons-threshold ()
    "Restore `gc-cons-threshold' value."
    (setq gc-cons-threshold actuator-gc-cons-threshold)
    (garbage-collect))
  (add-hook 'after-init-hook #'actuator-restore-gc-cons-threshold)
  (setq gc-cons-threshold (* 5 1024 1024 1024))
#+end_src

#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :comments link :noweb yes :mkdirp yes
:END:
** Lexical Binding
#+begin_src emacs-lisp
  ;;; init.el -*- lexical-binding: t; -*-
#+end_src

** Package Init

#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)

  (setq package-archives
        '(("org"    . "https://orgmode.org/elpa/")
          ("melpa"  . "https://melpa.org/packages/")
          ("gnu"    . "https://elpa.gnu.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (setq package-archive-priorities '(("org"   . 40)
                                     ("melpa" . 30)
                                     ("gnu"   . 20)
                                     ("nongnu". 10)))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package nil t))
  (require 'use-package-ensure nil t)
  (setq use-package-always-ensure t)
#+end_src

** No Littering
#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t)
#+end_src

** Exec path from shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure
    :demand t
    :custom
    (exec-path-from-shell-arguments '("-l" "-i"))
    :config
    (when (eq system-type 'darwin)
      (exec-path-from-shell-initialize)))
#+end_src

* Theme
#+begin_src emacs-lisp :tangle ~/.config/emacs/actuator-theme.el
  (deftheme actuator)

  (add-hook 'minibuffer-setup-hook 'actuator--minibuffer-setup)

  (defun actuator--minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((org-document-title :height 1.0))))

  (let ((blue  "#29BEEA")
        (white "#FFFFFF")
        (dark  "#000000")
        (cyan  "#00FFFF")
        (red   "#8b0000")
        (grey  "#484e55")
        (lgrey "#bdc4cc")

        (highlight-dim "#B1F8FF")
        (code-background "#FFFFFF")

        (xgrey "#F5F6F8")
        (xbord "#EDF0F4"))

    (custom-theme-set-faces
     `actuator
     `(fixed-pitch ((t (:family "SF Mono" :weight light))))
     `(variable-pitch ((t (:family "SF Pro Text" :weight light))))
     `(default ((t (:background ,white :foreground ,dark :weight light))))
     `(cursor ((t (:background ,blue))))
     `(fringe ((t (:background ,white))))
     `(region ((t (:background ,highlight-dim))))
     `(highlight ((t (:background nil))))

     `(font-lock-builtin-face ((t (:weight bold))))
     `(font-lock-constant-face ((t (:weight bold))))
     `(font-lock-function-name-face ((t (:weight bold))))
     `(font-lock-keyword-face ((t (:weight bold))))
     `(font-lock-variable-name-face ((t (:weight bold))))
     `(font-lock-type-face ((t (:weight bold))))
     `(font-lock-string-face ((t (:weight thin))))

     `(font-lock-warning-face ((t (:foreground ,red))))
     `(font-lock-comment-face ((t (:weight thin))))
     `(font-lock-comment-delimiter-face ((t (:weight thin))))

     `(org-drawer ((t (:foreground ,lgrey))))
     `(org-special-keyword ((t (:inherit org-drawer
                                         :foreground ,dark))))
     `(org-block ((t (:background ,code-background :extend t))))
     `(org-block-begin-line ((t :inherit org-block)))
     `(link ((t :foreground ,dark
                :underline t)))
     `(org-document-title ((t (:foreground ,dark
                               :height 220))))


     `(mode-line ((t (:box (:line-width 5
                                        :color ,xgrey)
                           ;;:underline nil
                           ;;:overline ,xbord
                           :foreground ,dark
                           :background ,xgrey
                           :inherit variable-pitch
                           :height 110))))
     `(mode-line-inactive ((t (:inherit mode-line
                               :foreground ,lgrey))))


     ))

  (provide-theme 'actuator)

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; End:

  ;;; actuator-theme.el ends here
#+end_src
* Stable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :comments link :noweb yes
:END:
** Read only
#+begin_src emacs-lisp
  (setq view-read-only t)
#+end_src

** Reset garbage collection
#+begin_src emacs-lisp
  <<init-garbage-collection>>
#+end_src

** Ctrl-Z
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Just one space
#+begin_src emacs-lisp
  (defun actuator-just-one-space ()
    "Insert just one space, killing ALL whitespace."
    (interactive)
    (just-one-space -1))

  (global-set-key (kbd "<M-SPC>") 'actuator-just-one-space)
#+end_src
** Unfill paragraph
#+begin_src emacs-lisp
  (defun actuator-unfill-paragraph ()
    "Unfills a paragraph."
    (interactive)
    (let ((fill-column most-positive-fixnum))
      (fill-paragraph)))
  (global-set-key (kbd "C-M-q") 'actuator-unfill-paragraph)
#+end_src
** Savehist
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :config
    (savehist-mode)
    :custom
    (history-length 1000)
    (history-delete-duplicates t)
    (message-log-max 1000)
    (savehist-save-minibuffer-history t)
    (savehist-additional-variables
     '(buffer-name-history
       command-history
       compile-history
       extended-command-history
       file-name-history
       file-name-history
       global-mark-ring
       Info-history-list
       kill-ring
       kmacro-ring
       last-kbd-macro
       minibuffer-history
       org-link--history
       org-read-date-history
       org-refile-history
       org-table-formula-history
       org-tags-history
       regexp-search-ring
       register-alist
       savehist-minibuffer-history-variables
       shell-command-history
       mark-ring)))
#+end_src

1. Quick fixes:

   ;; the issue could be that save-interprogram-paste-before-kill means a large clipboard which becomes part of savehist:

https://github.com/syl20bnr/spacemacs/issues/9409

#+begin_src emacs-lisp
  (put 'minibuffer-history 'history-length 100)
  (put 'kill-ring 'history-length 25)
  (setq save-interprogram-paste-before-kill nil)
#+end_src

https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist

2. Unpropertize kill ring on quit
#+begin_src emacs-lisp
  (defun actuator-unpropertize-kill-ring ()
    "It do thing."
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook #'actuator-unpropertize-kill-ring)
  (add-hook 'after-save-hook #'actuator-unpropertize-kill-ring)
#+end_src

3. Savehist on kill only

#+begin_src emacs-lisp
  (setq savehist-autosave-interval nil)
  (add-hook 'kill-emacs-hook #'savehist-save)
  (add-hook 'after-save-hook #'savehist-save)
#+end_src
** Autorevert
#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode 1)
    :custom
    (global-auto-revert-non-file-buffers nil)
    (auto-revert-verbose nil)
    (auto-revert-avoid-polling t)
    (buffer-auto-revert-by-notification t)
    (auto-revert-interval 60)
    (revert-without-query t)
    (auto-revert-check-vc-info nil))
#+end_src
** Server

#+begin_src emacs-lisp
  (use-package server
    :ensure nil
    :init
    (load "server")
    (unless (server-running-p) (server-start)))
#+end_src

** Undo
- [[https://b3n.sdf-eu.org/undo-in-emacs.html][Undo in Emacs]]

  #+begin_src emacs-lisp
    (global-set-key (kbd "s-z") #'undo-only)
    (global-set-key (kbd "s-Z") #'undo-redo)
  #+end_src
** Cancel GC in Minibuffer
#+begin_src emacs-lisp
  (defun actuator-minibuffer-setup-hook ()
    (setq gc-cons-threshold (* 500 1024 1024)))

  (defun actuator-minibuffer-exit-hook ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'actuator-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook  #'actuator-minibuffer-exit-hook)
#+end_src
** Minibuffer Resize
#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook 'actuator-minibuffer-setup)

  (defun actuator-minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((org-document-title :height 1.0))))
#+end_src
** Hippie Expand

#+begin_src emacs-lisp
  (use-package hippie-exp
    :ensure nil
    :bind ("M-/" . hippie-expand)
    :custom
    (hippie-expand-verbose t)
    (hippie-expand-try-functions-list
     '(try-expand-all-abbrevs
       try-expand-dabbrev-visible
       try-expand-dabbrev
       try-expand-dabbrev-all-buffers
       try-expand-dabbrev-from-kill
       try-complete-file-name-partially
       try-complete-file-name
       try-expand-line
       try-complete-lisp-symbol-partially
       try-complete-lisp-symbol
       try-expand-list
       try-expand-list-all-buffers
       try-expand-whole-kill
       try-expand-line-all-buffers)))
#+end_src

- try-complete-lisp-symbol has a lot of completions
- try-expand-line-all-buffers is very slow

#+begin_src emacs-lisp
  (defun actuator-hippie-unexpand ()
    "Remove an expansion without having to loop around."
    (interactive)
    (hippie-expand 0))
  (global-set-key (kbd "<backtab>") #'actuator-hippie-unexpand)
#+end_src

** Open org-links in new window or not
#+begin_src emacs-lisp
  (use-package ol
    :ensure nil
    :custom
    (org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                            (vm-imap . vm-visit-imap-folder-other-frame)
                            (gnus . org-gnus-no-new-news)
                            (file . find-file))))
#+end_src
* Unstable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :noweb yes
:END:
** Auto-upgrade
#+begin_src emacs-lisp
    (use-package auto-package-update
      :ensure t
      :demand t
      :config
      (require 'auto-package-update)
      :hook (auto-package-update-before . actuator-backup-emacs-directory))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-backup-emacs-directory ()
    "It does."
    (shell-command "BORG_REPO=~/Backup/emacs borg create --stats --verbose \\
  --compression zstd,22 ::{hostname}-{now} \\
  ~/.config/emacs" "*Package backup log*")
    (shell-command "BORG_REPO=~/Backup/emacs borg prune --stats --keep-last 10 \\
  --save-space" "*Package backup log*"))
#+end_src

** SVG Screenshot
#+begin_src emacs-lisp
  (defun screenshot-svg ()
    “Save a screenshot of the current frame as an SVG image.
  Saves to a temp file and puts the filename in the kill ring.”
    (interactive)
    (let* ((filename (make-temp-file “Emacs” nil “.svg”))
           (data (x-export-frames nil ‘svg)))
      (with-temp-file filename
        (insert data))
      (kill-new filename)
      (message filename)))
#+end_src
** Git autocommit
#+begin_src emacs-lisp
  (use-package git-auto-commit-mode
    :ensure t)
#+end_src

** Sunrise/set

#+begin_src emacs-lisp
  (require 'solar)
  (setq calendar-location-name "St. John's, NL")

  (defun solar-sunrise-string (date &optional nolocation)
    "String of *local* time of sunrise and daylight on Gregorian DATE."
    (let ((l (solar-sunrise-sunset date)))
      (format
       "%s (%s hours daylight)"
       (if (car l)
       (concat "Sunrise " (apply 'solar-time-string (car l)))
         "no sunrise")
       (nth 2 l)
       )))
  ;; To be called from diary-list-sexp-entries, where DATE is bound.
  ;;;###diary-autoload
  (defun diary-sunrise ()
    "Local time of sunrise as a diary entry.
    Accurate to a few seconds."
    (or (and calendar-latitude calendar-longitude calendar-time-zone)
        (solar-setup))
    (solar-sunrise-string date))

    (defun solar-sunset-string (date &optional nolocation)
    "String of *local* time of sunset and daylight on Gregorian DATE."
    (let ((l (solar-sunrise-sunset date)))
      (format
       "%s (%s hours daylight)"
       (if (cadr l)
       (concat "Sunset " (apply 'solar-time-string (cadr l)))
         "no sunset")
       (nth 2 l)
       )))
  ;; To be called from diary-list-sexp-entries, where DATE is bound.
  ;;;###diary-autoload
  (defun diary-sunset ()
    "Local time of sunset as a diary entry.
    Accurate to a few seconds."
    (or (and calendar-latitude calendar-longitude calendar-time-zone)
        (solar-setup))
    (solar-sunset-string date))
#+end_src

[[https://www.reddit.com/r/orgmode/comments/a1z26t/sunrise_sunset_as_separate_entries_on_agenda_view/][Sunrise Sunset as Separate Entries on Agenda View (SUPPORT) : orgmode]]
[[https://stackoverflow.com/questions/22889036/custom-diary-sunrise-function-not-working-autoload-diary-emacs][elisp - Custom diary-sunrise function not working. `autoload-diary`? (Emacs.)...]]



** Capture Templates
:PROPERTIES:
:ID:       105E87F2-7E4C-44A1-94BE-1DD64B9F01A2
:END:
#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("r" "Run" entry
                   (file+olp+datetree ,(expand-file-name "run-log.org" org-directory))
                   "* %<%A %e %B %Y (W%V)> %^{Duration}p %^{Distance}p
                 %^{Elevation}p %^{Pace}p \n%?"
                   :time-prompt
                   :kill-buffer)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("c" "Current" entry
                   (file+olp+datetree "activity.org")
                   "* %^{Task} %^g"
                   :clock-in)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("w" "Watched Film" entry
                   (file+olp+datetree ,(expand-file-name "watch-log.org" org-directory))
                   "* %^{Title} (%^{Year}) %^{Series}p
               %^{SeriesNo}p %^{Rating|2|1|3}p"
                   :time-prompt
                   :kill-buffer)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("i" "Inbox" entry
                   (file ,(expand-file-name "inbox.org" org-directory))
                   "* %^{Title} \n %u \n %i \n\n %a")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("f" "Finished Book" entry
                   (file+olp+datetree ,(expand-file-name "reading-log.org" org-directory))
                   "* %^{Author Name} - %^{Title} (%^{Year}) %^{Series}p
                 %^{SeriesNo}p %^{Author}p %^{Rating|2|1|3}p"
                   :time-prompt
                   :kill-buffer)))
#+end_src

** Personal Stuff

#+begin_src emacs-lisp
  (setq user-full-name "Geoff MacIntosh")
  (setq user-mail-address "geoff@mac.into.sh")
  (setq calendar-latitude [47 33 north])
  (setq calendar-longitude [52 42 west])
#+end_src
** Unfiled Settings
:PROPERTIES:
:ID:       3659786E-6B2D-4AF8-8901-434068730FC7
:END:

#+begin_src emacs-lisp
  (fringe-mode 12)
#+end_src

#+begin_src emacs-lisp
  (use-package bookmark
    :ensure nil
    :custom
    (bookmark-version-control t)
    (bookmark-save-flag 1))
#+end_src

#+begin_src emacs-lisp
  (setq window-combination-resize t)
  (setq undo-limit (* 80 1024 1024))
#+end_src

From  emacs-plus:

#+begin_src emacs-lisp
  ;; C source code
  (setq frame-resize-pixelwise t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") #'count-words)
#+end_src

#+begin_src emacs-lisp
  (global-unset-key (kbd "<C-wheel-down>"))
  (global-unset-key (kbd "<C-wheel-up>"))
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
#+end_src

#+begin_src emacs-lisp
  (setq help-window-select t) ; Select help window by default
  (setq jit-lock-defer-time 0) ; Delay font-lock if its slow
  (defalias 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "M-o") #'other-window)

  (delete-selection-mode t)
  (midnight-mode 1)
  (setq sentence-end-double-space nil)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")

  (add-hook 'before-save-hook 'whitespace-cleanup)

  (setq indent-tabs-mode nil) ; Never insert tabs with tab key
  (setq require-final-newline t)

  (save-place-mode 1)

  (setq backup-by-copying    t)
  (setq delete-old-versions  t)
  (setq kept-new-versions    50)
  (setq kept-old-versions    5) ; I don't know what an old version is
  (setq version-control      t)
  (setq vc-make-backup-files t)

  (setq uniquify-buffer-name-style 'forward) ; Like a path, the way that makes sense
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
  (setq uniquify-strip-common-suffix nil)

  (setq find-file-visit-truename nil) ; Don't resolve symlinks
  (setq confirm-kill-emacs 'y-or-n-p)

  ;;(abbrev-mode)
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)

  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-defun  'disabled nil)

  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)

  (defun display-startup-echo-area-message ()
    "Remove the GNU info from the minibuffer on startup.
  All you have to do is create a function with this name.  It's
  called automatically."
    (message ""))

  (setq default-frame-alist
        '((ns-transparent-titlebar . t)
          (ns-appearance           . 'light)))

  (setq completion-styles
        '(fuzzy
          basic
          partial-completion
          substring
          initials
          emacs22))

  (defun actuator-font-exists-p (font)
    "Return non-nil if FONT is loaded."
    (member font (font-family-list)))

  (defun actuator-frame-init (&optional _frame)
    "Initialize per-frame variables.
  These variables need to be set every time a frame is created."
    (when (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (when (fboundp 'tooltip-mode)    (tooltip-mode    -1))
    (when (and (not (display-graphic-p))
               (fboundp 'menu-bar-mode))
      (menu-bar-mode   -1))
    (when (actuator-font-exists-p "SF Mono")
      (set-frame-font "SF Mono-12" nil t)))

  (add-hook 'after-make-frame-functions 'actuator-frame-init)
  (actuator-frame-init)
#+end_src
** Misc

#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :init
    (recentf-mode)
    :bind ("C-x C-r" . recentf-open-files)
    :custom
    (recentf-max-saved-items 1000)
    (recentf-exclude `(,no-littering-var-directory
                       ,no-littering-etc-directory
                       "^/\\(?:ssh\\|su\\|sudo\\)?:"))
    :hook (midnight-mode . recentf-cleanup))
#+end_src

** Plain Font

#+begin_src emacs-lisp
  (load-theme 'actuator t)

  (blink-cursor-mode -1)
  (setq cursor-type 'box)
  (pixel-scroll-mode)
  (setq scroll-conservatively 101) ; Move the buffer just enough to display point, but no more
  (setq scroll-margin 0)
  (setq mouse-wheel-scroll-amount '(1))

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+end_src

#+begin_src emacs-lisp
  (use-package xt-mouse
    :ensure nil
    :unless window-system
    :config
    (require 'mouse)
    (xterm-mouse-mode t)
    (defun track-mouse (_e))
    :custom
    (mouse-sel-mode t))
#+end_src

#+begin_src emacs-lisp
  (use-package locate
    :ensure nil
    :custom
    (locate-command "mdfind"))
#+end_src

#+begin_src emacs-lisp
  (use-package flymake
    :ensure nil
    :hook (emacs-lisp-mode . flymake-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package cus-edit
    :ensure nil
    :after no-littering
    :custom
    (custom-file (expand-file-name "custom.el" no-littering-var-directory))
    :config
    (load custom-file 'noerror))
#+end_src

#+begin_src emacs-lisp
  (use-package vc-hooks
    :ensure nil
    :custom
    (vc-handled-backends nil))
#+end_src

#+begin_src emacs-lisp
  (use-package paren
    :ensure nil
    :config
    (show-paren-mode)
    (electric-pair-mode 1)
    :custom
    (blink-matching-paren nil)
    (show-paren-delay 0)
    (show-paren-style 'mixed))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'actuator-startup-profile)

  (defun actuator-startup-profile ()
    "Displays startup time garbage collections in the modeline."
    (message "Emacs ready in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
#+end_src
** Eliminate frame title
#+begin_src emacs-lisp
  (setq ns-use-proxy-icon nil)
  (setq-default frame-title-format nil)
  (set-frame-parameter (selected-frame) 'title nil)
#+end_src

#+begin_src emacs-lisp
  (defun remember-titlebar-settings ()
    "Get fucked, Emacs"
    (set-frame-parameter (selected-frame) 'name nil)
    (set-frame-parameter (selected-frame) 'title nil))
  (add-hook 'window-configuration-change-hook #'remember-titlebar-settings)
#+end_src

** Help
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h x k") #'describe-key)
#+end_src

** Delete by Moving to Trash
#+begin_src emacs-lisp
  (defun system-move-file-to-trash (file)
    "Move the file to trash via the `trash` command-line tool."
    (call-process "trash" nil nil nil file))
#+end_src

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src
** Copy sentence
#+begin_src emacs-lisp
  (defun actuator-copy-sentence ()
    "Save the entire sentence to the clipboard/kill ring."
    (interactive)
    (save-excursion
      (backward-sentence)
      (mark-end-of-sentence nil)
      (copy-region-as-kill nil nil t)))
#+end_src

** Org Todos
#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :custom
    (org-agenda-todo-list-sublevels nil))
#+end_src

** Agenda

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("X" agenda ""
           ((ps-number-of-columns 2)
            (ps-landscape-mode t)
            (org-agenda-prefix-format " [ ] ")
            (org-agenda-with-colors nil)
            (org-agenda-start-day "Mon")
            (org-agenda-remove-tags t))
           ("~/Desktop/theagenda.pdf"))))
  (setq org-agenda-window-setup 'only-window)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-span 'fortnight)
  (setq org-agenda-include-diary t)
  (setq org-agenda-text-search-extra-files nil)
#+end_src

** Holidays
:PROPERTIES:
:CATEGORY: Holiday
:END:
#+begin_src emacs-lisp
  (setq holiday-islamic-holidays nil)
  ;;(setq holiday-christian-holiday nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-oriental-holidays nil)
  ;;(setq holiday-other-holidays '((lunar-phases)))
#+end_src
** Habit

#+begin_src emacs-lisp
  (use-package org-habit
    :ensure nil
    :config
    (add-to-list 'org-modules 'org-habit)
    :custom
    (org-habit-show-habits-only-for-today nil))
#+end_src

** Keyboard Macros

- ~C-x (~ Start defining a keyboard macro.
- ~C-x )~ End a keyboard macro.
- ~C-u C-x (~ Replay macro and append keys to the definition.
- ~C-u C-u C-x (~ Don’t replay but append keys.
- ~C-x C-k r~ Run the last keyboard macro on each line that begins in the region.
- ~C-x C-k n~ Name the most recent macro.
- ~C-x C-k b~ Bind the most recent macro to a keybinding (for the session only).
- ~M-x insert-kbd-macro~ Insert the most recent macro into the buffer as lisp. That’s how you save it.
- ~C-x C-k 0-9~ and ~C-x C-k A-Z~ are reserved for keyboard macros

*** Make Checklist
#+begin_src emacs-lisp
(fset 'actuator-make-checklist
   (kmacro-lambda-form [?\C-a ?- ?  ?\[ ?  ?\] ?  ?\C-n] 0 "%d"))
    (global-set-key (kbd "C-x C-k 1") #'actuator-make-checklist)
#+end_src

*** References
- [[http://ergoemacs.org/emacs/emacs_macro_example.html][Emacs: Keyboard Macro ]][2020-06-08 Mon]
- [[https://www.emacswiki.org/emacs/KeyboardMacros][EmacsWiki: Keyboard Macros]] [2020-06-08 Mon]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html][Basic Keyboard Macro - GNU Emacs Manual]] [2020-06-08 Mon]
** Truncate
#+begin_src emacs-lisp
  (setq truncate-partial-width-windows nil)
  (toggle-truncate-lines 1) ; Don't wrap lines by default
  (add-hook 'text-mode-hook    #'turn-on-visual-line-mode)
  (add-hook 'prog-mode-hook    #'auto-fill-mode)
  (add-hook 'special-mode-hook #'turn-on-visual-line-mode)
#+end_src
** Web
*** Set up browsing handlers                      :ignore:
Customizing the browse-url handlers is remarkably powerful. I don't use Emacs as a web browser much, but I do use a lot of links in Org-mode documents. If something isn't set here, it opens the URL in the default manner, which in my case is Safari ([[https://developer.apple.com/safari/technology-preview/][Technology Preview]]).

#+begin_src emacs-lisp
  (use-package browse-url
    :ensure nil
    :custom
    (browse-url-handlers '(("wikipedia"   . eww )
                           ("youtu\\.?be" . actuator-browse-video)
                           ("twitch"      . actuator-browse-video))))
#+end_src

*** Handle video urls                             :ignore:
I want video links to be opened in MPV. This helps my battery life as well as my personal life because I don't have to visit YouTube. This requires [[https://mpv.io][MPV]] to be installed, which is best installed via [[http://brew.sh][Brew]] on macOS. I've tried to use [[https://nixos.org/download.html][Nix]], but it doesn't work well.

#+begin_src emacs-lisp
    (defun actuator-browse-video (url &rest _args)
      "Browse a URL with a dedicated video player.
  Avoids opening a browser window."
      (start-process "mpv" nil "mpv" url))
#+end_src

*** Simple HTML renderer                          :ignore:
SHR is used to render all sorts of basic HTML in Emacs, including Elfeed posts and Nov.el books. Normally it wraps at the page width, but that can be adjusted.

#+begin_src emacs-lisp
  (use-package shr
    :ensure nil
    :custom
    (shr-width 75))
#+end_src

*** Open links in background                      :ignore:

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq browse-url-browser-function 'browse-url-generic)
    (setq browse-url-generic-program "open")
    (setq browse-url-generic-args '("--background")))
#+end_src
** iBuffer
*** Introduction
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :config
    <<ibuffer-filters>>
    :bind ("C-x C-b" . ibuffer)
    :custom
    (ibuffer-expert t))
#+end_src

*** Filters
:PROPERTIES:
:header-args: :noweb-ref ibuffer-filters
:END:

#+begin_src emacs-lisp
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("Misc"      (name . "^\\*.*\\*$"))
           ("Magit"     (name . "magit"))
           ("Src"       (name . "\*Org Src"))
           ("Dired"     (mode . dired-mode))
           ("My Org"    (directory . "/Users/g/org"))
           ("Config"    (or
                         (directory . "/Users/g/.config")
                         (directory . "/usr/local/share/emacs")))
           )))
#+end_src

*** Defaults

#+begin_src emacs-lisp
  (defun actuator-ibuffer-setup ()
    "Setup ibuffer defaults."
    (require 'ibuf-ext)
    (ibuffer-switch-to-saved-filter-groups "default")
    (ibuffer-auto-mode 1)
    (toggle-truncate-lines +1))
  (add-hook 'ibuffer-mode-hook #'actuator-ibuffer-setup)
#+end_src
** Encryption
#+begin_src emacs-lisp
  (setq epa-file-select-keys 1)
  ;;(epa-file-enable)
#+end_src
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (require 'dired-x)
    (require 'ls-lisp)
    (require 'wdired)
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'dired-shell-command-history))
    :custom
    (dired-dwim-target t)
    (ls-lisp-use-insert-directory-program nil)
    (ls-lisp-ignore-case t)
    (ls-lisp-use-string-collate nil)
    (ls-lisp-verbosity '(links uid))
    (ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
    (ls-lisp-use-localized-time-format t)
    (dired-listing-switches "-alhG") ; Not use for ls-lisp?

    (dired-dwim-target t)
    (wdired-allow-to-change-permissions t)

    (dired-recursive-copies 'always)
    :hook (dired-mode . dired-hide-details-mode))
#+end_src
** Split Windows
#+begin_src emacs-lisp
    (defun actuator-split-window-right ()
      "Replacement for `split-window-right'.
    Moves the point to the newly created window and asks for the
    buffer."
      (interactive)
      (split-window-right)
      (other-window 1)
      (when (fboundp 'ivy-switch-buffer)
        (ivy-switch-buffer)))
  (global-set-key (kbd "C-x 3") #'actuator-split-window-right)
#+end_src

#+begin_src emacs-lisp
    (defun actuator-split-window-below ()
      "Replacement for `split-window-below'.
    Moves the point to the newly created window and asks for the
    buffer."
      (interactive)
      (split-window-below)
      (other-window 1)
      (when (fboundp 'ivy-switch-buffer)
        (ivy-switch-buffer)))
  (global-set-key (kbd "C-x 2") #'actuator-split-window-below)
#+end_src

** Attach
:PROPERTIES:
:ID:       7542A761-77AB-4B42-B25E-33BFE7A45FE9
:END:

#+begin_src emacs-lisp
  (use-package org-attach
    :ensure nil
    :custom
    (org-attach-store-link-p t)
    (org-attach-expert nil)
    (org-attach-dir-relative t)
    (org-attach-preferred-new-method 'dir)
    (org-attach-method 'mv)
    (org-attach-auto-tag "attach")
    (org-attach-archive-delete 'query))
#+end_src
** Clock

#+begin_src emacs-lisp
  (use-package org-clock
    :ensure nil
    :init
    (org-clock-persistence-insinuate)
    :custom
    (org-clock-persist t)
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-mode-line-total 'auto))
#+end_src

** World Time
#+begin_src emacs-lisp
  (use-package time
    :ensure nil
    :custom
    (display-time-world-list '(("America/New_York" "New York")
                               ("Europe/London"    "London")
                               ("Australia/Sydney" "Sydney")
                               ("America/Edmonton" "Calgary")
                               ("America/St_Johns" "St. John's"))))
#+end_src

** Ediff
#+begin_src emacs-lisp
  (use-package ediff
    :ensure nil
    :custom
    ;;(ediff-diff-options "")
    ;;(ediff-custom-diff-options "-u")
    (ediff-window-setup-function 'ediff-setup-windows-plain)
    (ediff-split-window-function 'split-window-horizontally)
    :config
    (defun actuator-ediff-startup ()
      "Prep Ediff for success."
      (window-configuration-to-register :ediff))

    (defun actuator-ediff-quit ()
      "Restore files after diffing."
      (jump-to-register :ediff))

    (defun ediff-org-reveal-around-difference (&rest _)
      (dolist (buf (list ediff-buffer-A ediff-buffer-B ediff-buffer-C))
        (ediff-with-current-buffer buf
          (when (derived-mode-p 'org-mode)
            (org-reveal t)))))

    (advice-add 'ediff-next-difference :after
    #'ediff-org-reveal-around-difference)
    (advice-add 'ediff-previous-difference :after
    #'ediff-org-reveal-around-difference)
    :hook
    (ediff-startup . actuator-ediff-startup)
    (ediff-quit    . actuator-ediff-quit))
#+end_src

[[https://www.reddit.com/r/emacs/comments/dxzi96/have_some_code_make_ediffing_folded_org_files/][Have some code: make ediffing folded org files better : emacs]]


** Mu4e

[[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][Fastmail + mu4e]]

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    ;; :init
    ;; (require 'mu4e)
    :config
    (require 'mu4e)
    ;; (fset 'actuator-move-to-trash "mTrash")
    ;;(define-key mu4e-headers-mode-map (kbd "d") 'actuator-move-to-trash)
    ;;(define-key mu4e-view-mode-map (kbd "d") 'actuator-move-to-trash)
    ;; :bind
    ;; (:map mu4e-headers-mode-map
    ;;       ("d" . actuator-move-to-trash))
    ;; (:map mu4e-view-mode-map
    ;;       ("d" . actuator-move-to-trash))
    ;; (cond ((eq system-type 'gnu/linux)
    ;;        (setq mu4e-mu-binary "/usr/bin/mu"))
    ;;       ((eq system-type 'darwin)
    ;;        (setq mu4e-mu-binary "/usr/local/bin/mu")))
    :custom
    (mu4e-maildir-shortcuts
     '((:maildir "/Archive" :key ?a)
       (:maildir "/Inbox"   :key ?i)))
    (mail-user-agent 'mu4e-user-agent)
    (mu4e-hide-index-messages t)
    (mu4e-update-interval (* 60 15))
    (mu4e-refile-folder "/Archive")
    (mu4e-sent-folder   "/Sent Items")
    (mu4e-drafts-folder "/Drafts")
    (mu4e-trash-folder  "/Trash")
    (mu4e-attachment-dir "~/Downloads/")
    (mu4e-view-show-images t)
    (mu4e-view-show-addresses t)
    (mu4e-change-filenames-when-moving t)
    (mu4e-headers-skip-duplicates t)
    (mu4e-compose-format-flowed t)
    (mu4e-date-format "%y-%m-%d")
    (mu4e-headers-date-format "%y-%m-%d")
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-mu-binary (executable-find "mu")))
#+end_src

** SMTP Mail

#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :custom
    (smtpmail-default-smtp-server "smtp.fastmail.com")
    (smtpmail-smtp-server "smtp.fastmail.com")
    (smtpmail-smtp-service 587))
#+end_src

** Message

#+begin_src emacs-lisp
  (use-package message
    :ensure nil
    :custom
    (message-send-mail-function 'smtpmail-send-it))
#+end_src

** Native Compile
#+begin_src emacs-lisp
  (when (boundp 'comp-async-report-warnings-errors)
    (setq comp-async-report-warnings-errors nil))
#+end_src

** Package Quickstart

#+begin_src emacs-lisp
  (add-hook 'kill-emacs-hook #'package-quickstart-refresh)
#+end_src

** Byte compile init

#+begin_src emacs-lisp
  (defun actuator-byte-recompile-init ()
    "Recompiles the inits. I dunno why I want to"
    (interactive)
    (byte-recompile-file (expand-file-name "init.el"
                                           user-emacs-directory) nil 0)
    (byte-recompile-file (expand-file-name "early-init.el"
                                           user-emacs-directory) nil 0))
#+end_src

** Modeline time
#+begin_src emacs-lisp
  (use-package time
    :ensure nil
    :custom
    (display-time-24hr-format t)
    (display-time-default-load-average nil))
#+end_src

** Allow different places in the same buffer
#+begin_src emacs-lisp
  (use-package window
    :ensure nil
    :custom
    (switch-to-buffer-preserve-window-point t))
#+end_src

** ERC
#+begin_src emacs-lisp
    (use-package erc
      :ensure nil
      :config
      (defun twitch-start-irc ()
        "Connect to Twitch IRC."
        (interactive)
        (erc-tls :server "irc.chat.twitch.tv"
                 :port 6697
                 :nick (auth-source-pass-get "user" "twitch.tv")
                 :password (auth-source-pass-get "oauth" "twitch.tv"))))
#+end_src

** Doc View
#+begin_src emacs-lisp
  (use-package doc-view
    :ensure nil
    :config
    (defvar actuator-doc-view-bookmark-push-p t
      "Whether to push automatic doc-view bookmarks, or clobber them.")
    (defun actuator-doc-view-open-handler ()
      "Stuff."
      (require 'bookmark)
      (bookmark-maybe-load-default-file)
      (bookmark-jump (buffer-name)))

    (defun actuator-doc-view-save-handler ()
      "Stuff"
      (when (eq major-mode 'doc-view-mode)
        (require 'bookmark)
        (bookmark-maybe-load-default-file)
        (bookmark-set (buffer-name) actuator-doc-view-bookmark-push-p)))
    :hook
    (doc-view-mode . actuator-doc-view-open-handler)
    (kill-buffer-hook . actuator-doc-viwe-save-handler)
    :custom
    (doc-view-resolution 150 ))
#+end_src
https://gist.github.com/spacebat/5500966

** Sync stuff
#+begin_src emacs-lisp
  (setq elfeed-db-directory "~/Sync/library/elfeed")
  (setq abbrev-file-name    "~/Sync/library/abbrev.el")
  (setq bookmark-file       "~/Sync/library/bookmark.el")
#+end_src

** Org Randomnote
#+begin_src emacs-lisp
  (use-package org-randomnote
    )
#+end_src

** Auth Source

#+begin_src emacs-lisp
  (use-package auth-source-pass
    :ensure
    :config
    (auth-source-pass-enable))
#+end_src

** Org

#+begin_src emacs-lisp
  (defvar org-directory "~/org")
  (use-package org
    :ensure t
    :config
    (org-indent-mode 1)
    ;; (add-to-list 'org-babel-default-header-args
    ;;         '(:mkdirp . "yes"))
    ;; (add-to-list 'org-babel-default-header-args '(:comments . "link"))
    (setq org-babel-default-header-args '((:mkdirp   . "yes")
                                          (:comments . "link")
                                          (:session  . "none")
                                          (:results  . "none")
                                          (:exports  . "code")
                                          (:cache    . "no")
                                          (:noweb    . "no")
                                          (:hlines   . "no")
                                          (:tangle   . "no")))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (shell      . t)))
    (defun actuator-update-all-dynamic-blocks ()
      "Hi"
      (org-dblock-update 1))
    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                          'actuator-update-all-dynamic-blocks nil
                          'make-it-local)))
    (add-to-list 'org-default-properties "DIR")
    (add-to-list 'org-default-properties "header-args")
    ;;(add-to-list 'org-babel-default-header-args '(:mkdirp . "yes"))
    :bind
    ("C-c c" . counsel-org-capture)
    ("C-c a" . org-agenda)
    ("C-c l" . org-store-link)
    :custom
    ;;(setq-local org-display-custom-times nil)
    ;;(org-time-stamp-custom-formats
    ;; '("<%A, %B %e %Y>" . "<%A, %B %e %Y %H:%M>"))
    (org-startup-folded 'content)
    (org-ellipsis "→")
    (org-startup-align-all-tables t)
    (org-startup-shrink-all-tables t)
    (org-startup-with-inline-images t)
    (org-startup-indented t)
    (org-hide-leading-stars t)
    (org-pretty-entities-include-sub-superscripts t)
    (org-hide-emphasis-markers t)
    (org-emphasis-alist (delete '("+" (:strike-through t)) org-emphasis-alist))
    (org-image-actual-width 300)
    (org-fontify-done-headline t)
    (org-structure-template-alist '(("e" . "src emacs-lisp")
                                    ("s" . "src shell")))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-closed-keep-when-no-todo t)
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies t)
    (org-complete-tags-always-offer-all-agenda-tags nil)
    (org-clone-delete-id t)
    (org-tags-column -60)
    (org-catch-invisible-edits 'show-and-error)
    (org-insert-heading-respect-content t)
    (org-ctrl-k-protect-subtree t)
    (org-M-RET-may-split-line '((default . nil)))
    (org-special-ctrl-k t)
    (org-special-ctrl-a/e t)
    (org-blank-before-new-entry '((heading         . t)
                                  (plain-list-item . auto)))
    (org-use-property-inheritance t)
    (org-modules nil)
    (org-tag-persistent-alist '(("noexport")
                                ("ignore")
                                ("unpublished")
                                ("blog")
                                ("tbd")))
    :hook
    (org-mode . visual-line-mode)
    (org-mode . (lambda () (electric-indent-local-mode -1))))
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-files `(,org-directory))
#+end_src


#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :config
    (defun actuator-org-capture-turn-off-header-line ()
    "Disable the header-line in a local mode.
  This is used to disable the help line in `org-capture' buffers as
  there's no variable that will do it."
    (setq-local header-line-format nil))
    :hook (org-capture-mode . actuator-org-capture-turn-off-header-line))
#+end_src

#+begin_src emacs-lisp
  (use-package org-list
    :ensure nil
    :custom
    (org-list-indent-offset 1))
#+end_src

#+begin_src emacs-lisp
  (use-package org-keys
    :ensure nil
    :custom
    (org-use-speed-commands t))
#+end_src

#+begin_src emacs-lisp
  (use-package org-refile
    :ensure nil
    :custom
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-refile-targets '((org-agenda-files :maxlevel . 3)))
    :hook
    (midnight-mode . org-refile-get-targets))
#+end_src

#+begin_src emacs-lisp
  (use-package org-src
    :ensure nil
    :config
    (defun actuator-org-src-line-wrap-setup ()
      "Set truncate-lines-mode in org-source-editing buffers."
      (setq-local truncate-lines t))
    :custom
    (org-edit-src-persistent-message nil)
    (org-src-tab-acts-natively t)
    (org-src-window-setup 'current-window)
    (org-src-ask-before-returning-to-edit-buffer nil)
    (org-src-fontify-natively t)
    :hook (org-src-mode . actuator-org-src-line-wrap-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package org-footnote
    :ensure nil
    :custom
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline t)
    (org-footnote-auto-label 'random))
#+end_src

#+begin_src emacs-lisp
  (use-package ob-core
    :ensure nil
    :custom
    (org-confirm-babel-evaluate nil)
    (org-babel-results-keyword "results"))
#+end_src

#+begin_src emacs-lisp
  (use-package org-crypt
    :ensure nil
    :init
    (require 'org-crypt)
    :config
    (org-crypt-use-before-save-magic)
    (add-to-list 'org-modules 'org-crypt)
    :custom
    (org-tags-exclude-from-inheritance (quote ("crypt")))
    (org-crypt-key nil))
#+end_src

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :custom
    (org-agenda-sticky t)
    (org-agenda-dim-blocked-tasks t))
#+end_src

#+begin_src emacs-lisp
  (use-package org-id
    :ensure nil
    :custom
    (org-id-link-to-org-use-id nil)
    :hook (midnight-mode . org-id-update-id-locations))
#+end_src
** Fish Mode
#+begin_src emacs-lisp
  (use-package fish-mode
    )
#+end_src
** Ledger Mode
#+begin_src emacs-lisp
  (use-package ledger-mode

    :config
    (setq ledger-default-date-format ledger-iso-date-format))
#+end_src
** Markdown Mode
#+begin_src emacs-lisp
    (use-package markdown-mode
      )
#+end_src
** YAML Mode
#+begin_src emacs-lisp
    (use-package yaml-mode
      )
#+end_src
** TOML Mode
#+begin_src emacs-lisp
    (use-package toml-mode
      )
#+end_src
** Lua Mode
#+begin_src emacs-lisp
    (use-package lua-mode
      )
#+end_src
** Gitignore Mode
#+begin_src emacs-lisp
    (use-package gitignore-mode
      )
#+end_src
** Gitconfig Mode
#+begin_src emacs-lisp
  (use-package gitconfig-mode
    )
#+end_src
** Ripgrep
#+begin_src emacs-lisp
  (use-package rg
    )
#+end_src
** Nov.el
#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :mode ("\\.epub\\' .nov-mode")
    :config
    (defun actuator-novel-setup ()
      (face-remap-add-relative 'variable-pitch :family "Georgia"
                               :height 1.3)
      (setq-local line-spacing 1.2))
    ;;(add-hook 'nov-mode-hook 'actuator-novel-setup)
    :custom
    (nov-text-width 65))
#+end_src

** Project
#+begin_src emacs-lisp
  (use-package project
    :ensure t)
#+end_src

** Org Link Minor Mode
#+begin_src emacs-lisp
  (use-package org-link-minor-mode
    :disabled t
    :ensure nil
    :hook (emacs-lisp-mode . org-link-minor-mode))
#+end_src

** HTMLize
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

** Eldoc

[[https://www.reddit.com/r/emacs/comments/c1zl0s/weekly_tipstricketc_thread/ergullj/?context=1][Improve eldoc's documentation]]

#+begin_src emacs-lisp
  (use-package eldoc
    :ensure t
    :custom
    (eldoc-echo-area-use-multiline-p t)
    (eldoc-idle-delay 0)
    :config
    (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
      "If SYM is a function, append its docstring."
      (require 'subr-x)
      (concat
       (apply orig-fun sym r)
       (when-let ((doc (and (fboundp sym) (documentation sym 'raw)))
                  (oneline (substring doc 0 (string-match "\n" doc))))
         (when (not (string= "" oneline))
           (concat " " (propertize oneline 'face 'italic)))))))
#+end_src

** Forge
#+begin_src emacs-lisp
  (use-package forge
    )
#+end_src
** Ivy

#+begin_src emacs-lisp
  (use-package prescient

    :custom
    (prescient-persist-mode 1)
    (prescient-history-length 10000)
    (prescient-aggressive-file-save t))
#+end_src

#+begin_src emacs-lisp
  (use-package counsel

    :functions counsel-mode
    :config
    (setq counsel-find-file-ignore-regexp "\\`\\.")
    (counsel-mode 1)
    :bind
    ("C-x C-r" . counsel-buffer-or-recentf)
    ("C-x C-f" . counsel-find-file)
    ("M-x"     . counsel-M-x)
    ("s-x"     . counsel-M-x)
  ;;  ("C-x m"   . counsel-semantic-or-imenu)
    ("C-r"     . counsel-minibuffer-history)
    ("C-x l"   . counsel-locate)
    ("C-h f"   . counsel-describe-function)
    ("C-h v"   . counsel-describe-variable)
    ;;("C-h k"   . counsel-descbinds)
    ("C-h x f" . counsel-faces)
    ("C-c s"   . counsel-search)
    ("M-y"     . counsel-yank-pop))
#+end_src

#+begin_src emacs-lisp
  (use-package request
    )
#+end_src

#+begin_src emacs-lisp
  (use-package ivy

    :defines ivy-minibuffer-map
    :functions ivy-mode ivy-immediate-done ivy-alt-done ivy-next-line
    :config
    (ivy-mode 1)
    :custom
    (ivy-use-ignore-default 'always)
    (ivy-ignore-buffers '("*elfeed-log*"
                          "*straight-process*"
                          "*Completions*"
                          "*Compile-Log*"))
    (ivy-use-virtual-buffers nil)
    (ivy-count-format "(%d/%d) ")
    (ivy-extra-directories nil)
    :bind
    (("C-x b" . ivy-switch-buffer)
     :map ivy-minibuffer-map
     ("<C-return>" . ivy-immediate-done)
     ("RET"        . ivy-alt-done)
     ("M-y"        . ivy-next-line)))
#+end_src

#+begin_src emacs-lisp
(use-package swiper

  :bind ("C-s" . swiper-isearch))
#+end_src

#+begin_src emacs-lisp
(use-package ivy-prescient

  :after (ivy prescient)
  :functions ivy-prescient-mode
  :config
  (ivy-prescient-mode 1))
#+end_src
** Cliplink
:PROPERTIES:
:ID:       B592B761-0FC7-4954-927A-189783720DD2
:END:
#+begin_src emacs-lisp
  (use-package org-cliplink

    :bind ("C-x p i" . org-cliplink)
    :init
    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                  `("b" "Bookmark" entry (file+olp+datetree ,(expand-file-name "bookmarks.org" org-directory))
                     "* %(org-cliplink-capture) %^g "
                     :immediate-finish
                     :kill-buffer))))
#+end_src

** Anki
#+begin_src emacs-lisp
  (use-package anki-editor
    )
#+end_src

** Auctex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :custom
    (TeX-engine 'luatex)
    (TeX-source-correlate-start-server t))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :after exec-path-from-shell
    :bind
    ("C-c g" . magit-status)
    ("C-x g" . magit-status)
    ("C-x G" . magit-list-repositories)
    :custom
    (magit-diff-refine-hunk 'all)
    (magit-save-repository-buffers 'dontask)
    (magit-section-initial-visibility-alist
     '((untracked . show)
       (unstaged  . show)
       (unpushed  . show)
       (upstream  . show)))
    ;;(magit-auto-revert-mode t)
    (magit-push-always-verify nil)
    (magit-repository-directories '(("~/org"     . 0)
                                    ("~/.config" . 0)))
    (magit-no-confirm '(stage-all-changes
                        unstage-all-changes))
    (magit-status-initial-section nil)
    :config
    <<magit-status>>
    <<magit-quit-session>>)
#+end_src

#+RESULTS:

#+name: magit-status
#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
       (window-configuration-to-register :magit-fullscreen)
       ad-do-it
       (delete-other-windows))
#+end_src

#+name: magit-quit-session
#+begin_src emacs-lisp
(defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (auto-revert-mode -1)
      (jump-to-register :magit-fullscreen))
#+end_src

** Org download

#+begin_src emacs-lisp
    (use-package org-download
      :ensure t
      :bind ("C-M-y" . org-download-screenshot)
      :init
      (require 'org-download)
      :custom
      (org-download-method 'directory)
      (org-download-image-dir nil)
      ;;(org-download-annotate-function #'actuator-org-dl-annotate)
      ;;(org-download-timestamp "")
      (org-download-screenshot-method "screencapture -i %s")
      (org-download-heading-lvl nil)
      (org-download-timestamp "%Y%m%d-%H%M%S-")
      ;;(org-download-screenshot-method "/usr/local/bin/pngpaste %s")
      )
#+end_src
** Web Mode

#+begin_src emacs-lisp
  (use-package web-mode

    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2))
#+end_src
** Elfeed
*** Introduction
Usually people start these things out by explaining what RSS is and all that. I don't think I'll be doing that. I like RSS because I like knowing when new things happen, and I don't want to check a bunch of different services all the time. Beyond that, I also really like the idea of being able to filter out feed items that don't appeal to me. I don't mind if I can only read stuff on my computer, so I haven't set up any sort of sync with my phone, although it should be possible to do that.

I have [[https://github.com/skeeto/elfeed][Elfeed]] set up in a single use-package declaration, and I've pulled all the individual functions out into their own bits so as to talk about them separately.

#+begin_src emacs-lisp
  (use-package elfeed

    :bind
    (("C-x w" . actuator-elfeed-load-db-and-open)
     :map elfeed-search-mode-map
     ("A" . actuator-elfeed-show-all)
     ("U" . actuator-elfeed-show-unread)
     ("q" . actuator-elfeed-save-db-and-bury)
     ("R" . actuator-elfeed-mark-all-as-read))
    :custom
    (elfeed-search-filter "@1-week-ago +unread ")
    :config
    <<shortcuts>>
    <<faces>>
    <<elfeed-filters>>
    <<load-quit>>
    <<mark-all-as-read>>)
#+end_src

*** Open videos in MPV                            :ignore:
One feature that people talk about a lot is setting up Elfeed to handle video-feeds separately from others, allowing you to avoid opening---say---a YouTube link in MPV instead of a browser window. That's pretty nice if you think YouTube's site is bad. There are a variety of ways to do that, but my current solution is to adjust how Emacs handles URLs, as documented in my Web config. The advantage of my system is that it affects all links to YouTube, regardless of where they are. It's a general solution, not an Elfeed solution.

*** Shortcuts                                     :ignore:
:PROPERTIES:
:header-args: :noweb-ref shortcuts :tangle no :results output silent
:END:
I built a few shortcuts to switch between different tag views that I commonly use. Elfeed has support for Emacs' bookmarks, so I just needed to make bookmarks for the views I wanted. I set up the search how I like it (~s~) then made a bookmark entry (~C-x r m~) called, say ~elfeed-all~. I can call that bookmark from anywhere in Emacs to go to that elfeed view, but I also decided to [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][steal some functions from Pragmatic Emacs]] to make single-letter keybindings in elfeed.

#+begin_src emacs-lisp
  (defun actuator-elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
  (defun actuator-elfeed-show-unread ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-unread"))
#+end_src

*** Filters                                       :ignore:
:PROPERTIES:
:header-args: :noweb-ref elfeed-filters :tangle no :results output silent
:END:
Filters are kind of the star of Elfeed. I mostly use them to remove items that I don't want to see (or already see in other contexts---podcasts for example). I think it's all pretty straightforward. The only thing of note that I do is adding a debug tag to each hook that hides things. That way I can tell which filter it is that's causing problems when I make a stupid typo and suddenly a specific filter matches all entries.

#+begin_src emacs-lisp
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :entry-title "sponsor\\|revenue\\|financial"
                                :add '(junk debug1)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :before "2 weeks ago"
                                :add 'debug2
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-title "MacSparky"
                                :entry-title "focused\\|Mac Power Users\\|jazz\\|automators\\|podcast"
                                :add '(junk debug3)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-title "Six Colors"
                                :entry-title "podcast\\|macworld\\|member"
                                :add '(junk debug4)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-title "Longreads"
                                :entry-title "longreads"
                                :add '(junk debug5)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "youtube\\.com"
                                :add '(video youtube)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "twitchrss"
                                :add '(video twitch)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "kijiji\\.ca"
                                :add '(shop kijiji)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "reddit"
                                :add 'reddit))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "ikea"
                                :entry-title "Q\\:"
                                :remove 'unread
                                :add '(junk debug6)))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "cestlaz"
                                :entry-title '(not "emacs")
                                :add '(junk debug7)
                                :remove 'unread))
  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :feed-url "reddit\\.com"
                                :entry-title '(not "F1")
                                :add '(junk debug8)
                                :remove 'unread))
#+end_src

*** Load and quit Elfeed nicely                   :ignore:
:PROPERTIES:
:header-args: :noweb-ref load-quit :tangle no :results output silent
:END:
You don't need to do anything special to load Elfeed. You can set up a keybinding that runs ~(elfeed)~ and it should work. I took this function from [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][Pragmatic Emacs]] when I first set up Elfeed a few years ago because I wanted to keep the database in sync between multiple computers. These helper functions ensure that the database is loaded and saved at the appropriate moments. I'm not sure there's any benefit to these if you only use them on one computer (as I do now) but I can't find any downsides either, so they stay.

#+begin_src emacs-lisp
  (defun actuator-elfeed-load-db-and-open ()
        "Wrapper to load the elfeed database from disk before
        opening. Taken from Pragmatic Emacs."
        (interactive)
        (window-configuration-to-register :elfeed-fullscreen)
        (delete-other-windows)
        (elfeed)
        (elfeed-db-load)
        (elfeed-search-update 1)
        (elfeed-update))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-elfeed-save-db-and-bury ()
    "Wrapper to save the Elfeed database to disk before burying
    buffer. Taken from Pragmatic Emacs."
    (interactive)
    (elfeed-db-save)
    (quit-window)
    (garbage-collect)
    (jump-to-register :elfeed-fullscreen))
#+end_src

*** Mark all as read                              :ignore:
:PROPERTIES:
:header-args: :noweb-ref mark-all-as-read :tangle no :results output silent
:END:

#+begin_src emacs-lisp
  (defun actuator-elfeed-mark-all-as-read ()
      "Mark all feeds in search as read. Taken from Mike Zamansky"
      (interactive)
      (with-no-warnings (mark-whole-buffer))
      (elfeed-search-untag-all-unread))
#+end_src

*** Faces                                         :ignore:
:PROPERTIES:
:header-args: :noweb-ref faces :tangle no :results output silent
:END:
Changing the colours of an entry is neat, but not that useful. I mostly have this set up in order to learn how to do it, and as a vague novelty.

#+begin_src emacs-lisp
  (add-to-list 'elfeed-search-face-alist
               '(video actuator-elfeed-video-face))
  (add-to-list 'elfeed-search-face-alist
               '(image actuator-elfeed-image-face))
  (add-to-list 'elfeed-search-face-alist
               '(comic actuator-elfeed-comic-face))
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-video-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed video entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-image-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed image entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-comic-face
    `((t . (:background "gray90" :foreground "blue")))
    "Face for elfeed comic entry."
    :group 'actuator-elfeed)
#+end_src

*** Org-elfeed
#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :after elfeed
    :config
    (elfeed-org)
    :custom
    (rmh-elfeed-org-ignore-tag "disconnected")
    (rmh-elfeed-org-auto-ignore-invalid-feeds nil)
    (rmh-elfeed-org-files (list "~/org/feeds.org")))
#+end_src

*** Changes                                     :noexport:
**** Wednesday May 20, 2020
- Published

*** Captar
#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("e" "Elfeed Feed" entry
                   (file+olp ,(expand-file-name "elfeed.org"
                                                user-emacs-directory) "Feeds")
                   "* [[%^{Feed URL}][%^{Title}]]\n%(org-time-stamp-inactive)"
                   :immediate-finish
                   :kill-buffer
                   :empty-lines 1)))
#+end_src
** Eshell

#+begin_src emacs-lisp
  (use-package eshell
    :ensure nil
    ;; :bind (:map eshell-mode-map
    ;;             ("\C-a" . eshell-bol)
    ;;             ("\C-r" . counsel-esh-history)
    ;;             ([up]   . previous-line)
    ;;             ([down] . next-line))
    :config
    (defalias 'eshell/f  'find-file-other-window)
    (defalias 'eshell/ff 'find-file)
    (defalias 'eshell/v  'view-file-other-window)
    (defalias 'eshell/vv 'view-file)
    :custom
    (eshell-destroy-buffer-when-process-dies t) ;;em-term
    (eshell-banner-message "")) ;;em-banner
#+end_src

#+begin_src emacs-lisp
  (use-package em-hist
    :ensure nil
    :custom
    (eshell-history-size 10000)
    (eshell-hist-ignoredups t))
#+end_src

#+begin_src emacs-lisp
  (use-package em-cmpl
    :ensure nil
    :custom
    (eshell-cmpl-cycle-completions nil)
    (eshell-cmpl-ignore-case t))
#+end_src

#+begin_src emacs-lisp
  (use-package em-smart
    :ensure nil
    :config
    (defun actuator-eshell-smart-shell ()
      "Set up Plan9/Smart shell stuff."
      (require 'em-smart)
      (eshell-smart-initialize))
    :custom
    (eshell-where-to-jump 'begin)
    (eshell-review-quick-commands nil)
    (eshell-smart-space-goes-to-end t)
    :hook (eshell-mode . actuator-eshell-smart-shell))
#+end_src

- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

#+begin_src emacs-lisp
  (defun actuator-eshell-imenu ()
    "Set up eshell-imenu integration"
    (setq-local imenu-generic-expression
                '(("Prompt" "^.*?[#❯]" 1))))
  (add-hook 'eshell-mode-hook #'actuator-eshell-imenu)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-eshell-autocomplete ()
        "Enable tab autocompletion in eshell."
        (define-key
          eshell-mode-map (kbd "<tab>")
          (lambda () (interactive) (pcomplete-std-complete))))
  (add-hook 'eshell-mode-hook #'actuator-eshell-autocomplete)
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-args
    :ensure
    :config
    (require 'pcmpl-args))
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-homebrew
    :ensure
    :config
    (require 'pcmpl-homebrew))
#+end_src

#+begin_src emacs-lisp
  (use-package fish-completion
    :ensure
    :custom
    (fish-completion-fallback-on-bash-p t)
    :config
    (defun actuator-fish-completion ()
      "arst"
      (when (and (executable-find "fish")
                 (require 'fish-completion nil t))
        (fish-completion-mode)))
    :hook (eshell-mode . actuator-fish-completion))
#+end_src

#+begin_src emacs-lisp
  (use-package eshell-z
    :ensure
    :custom
    (eshell-z-freq-dir-hash-table-file-name "~/.local/share/z/data")
    :config
    (add-hook 'eshell-mode-hook
              (defun actuator-eshell-z ()
                (require 'eshell-z))))
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-hook 'eshell-expand-input-functions
             #'eshell-expand-history-references)
#+end_src

#+begin_src emacs-lisp
(setq eshell-prompt-regexp "^.+@.+:.+❯ ")
(setq eshell-prompt-function
      (lambda ()
        (concat
         ;;(user-login-name)
         ;;"@"
         ;;(system-name)
         ;;":"
         (eshell/pwd)
         " ❯ ")))
#+end_src

** Mu4e Alert
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :config
    (cond ((eq system-type 'gnu/linux)
           (mu4e-alert-set-default-style 'libnotify))
          ((eq system-type 'darwin)
           (mu4e-alert-set-default-style 'osx-notifier)))
    :hook
    (after-init . mu4e-alert-enable-notifications)
    (after-init . mu4e-alert-enable-mode-line-display))
#+end_src
** Alert

#+begin_src emacs-lisp
  (use-package alert
    :ensure t
    :config
      (cond ((eq system-type 'gnu/linux)
             (setq alert-default-style 'libnotify))
            ((eq system-type 'darwin)
             (setq alert-default-style 'osx-notifier))))
#+end_src
** Systemd
#+begin_src emacs-lisp
  (use-package systemd
    :ensure t)
#+end_src

** EMMS
Or could just use mingus?
#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :config
    (require 'emms-player-mpd)
    (require 'emms-setup)
    (emms-minimalistic)
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6600")
    (add-to-list 'emms-info-functions 'emms-info-mpd)
    :custom
    (emms-player-list '(emms-player-mpd))
    (emms-source-file-default-directory "~/Music/Music Files"))
#+end_src
* Disabled
   :PROPERTIES:
   :header-args: :tangle no
   :END:
** Completion at point
#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

https://with-emacs.com/posts/tutorials/customize-completion-at-point/

#+begin_src emacs-lisp
  (autoload 'ffap-file-at-point "ffap")
  (defun complete-path-at-point+ ()
    "Return completion data for UNIX path at point."
    (let ((fn (ffap-file-at-point))
          (fap (thing-at-point 'filename)))
      (when (and (or fn (equal "/" fap))
                 (save-excursion
                   (search-backward fap (line-beginning-position) t)))
        (list (match-beginning 0)
              (match-end 0)
              #'completion-file-name-table :exclusive 'no))))

  (add-hook 'completion-at-point-functions
            #'complete-path-at-point+
            'append)
#+end_src

** Matrix
#+begin_src emacs-lisp
  (use-package matrix-client
    :straight (matrix-client :host github
                             :repo "alphapapa/matrix-client.el"))
#+end_src

** Smart Tab

#+begin_src emacs-lisp
  (use-package smart-tab
    :disabled t
    ;
    :functions global-smart-tab-mode
    :config
    (global-smart-tab-mode 1)
    :custom
    (smart-tab-using-hippie-expand t)
    (smart-tab-completion-functions-alist nil))
#+end_src
** Modeline

#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format
                (list
                 "%e "
                 "%I "
                 "%p "
                 (propertize "%b " 'face 'font-lock-keyword-face)
                 "%m "
                 mode-line-misc-info))
#+end_src

#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format
                (list
                 (propertize (downcase " %m ") 'face 'font-lock-string-face))))
#+end_src

*** References
 - [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Custom Emacs Modeline]]
** Minions
#+begin_src emacs-lisp :tangle no
  (use-package minions

    :config
    (minions-mode))
#+end_src
** Checklist

#+begin_src emacs-lisp :tangle no
  (use-package org-checklist

    :config
    (add-to-list 'org-modules 'org-checklist))
#+end_src

** Backends
#+begin_src emacs-lisp
  ;;(setq org-export-backends '(html icalendar latex))
#+end_src
** Publish Project
#+begin_src emacs-lisp
  (setq org-publish-project-alist
        `(("blog-org"
           :base-directory ,org-directory
           :base-extension "blog\\.org"
           :publishing-directory "~/Documents/Projects/mac-into-sh"
           :publishing-function org-md-publish-to-md
           :with-broken-links mark
           )
          ("blog-images"
           :base-directory ,org-directory
           :base-extension "jpg\\|gif\\|png\\|jpeg"
           :publishing-directory "~/Documents/Projects/mac-into-sh/images"
           :recursive t
           :publishing-function org-publish-attachment)
          ("blog" :components ("blog-org" "blog-images"))))
#+end_src
** Hugo
#+begin_src emacs-lisp
  (use-package ox-hugo

    :custom
    org-hugo-section "posts")
#+end_src

#+begin_src emacs-lisp
  (define-skeleton hugo-header-skeleton
    "Insert the required Hugo information into a file."
    > "#+title: " (setq v1 (skeleton-read "Title: ")) \n
    "#+date: \n"
    "#+hugo_base_dir: ~/Documents/Projects/mac-into-sh/\n"
    "#+export_file_name: index\n"
    "#+hugo_bundle: " (replace-regexp-in-string " " "-" (downcase v1))
    "\n"
    "* " v1 "\n" _ "\n\n"
    "* Metadata                       :noexport:blog:unpublished:")
#+end_src
** Prodigy
#+begin_src emacs-lisp
  (use-package prodigy

    :config
    (prodigy-define-service
     :name "Hugo"
     :command "hugo"
     :args '("server" "-D")
     :cwd "~/Documents/Projects/mac-into-sh"
     :stop-signal 'sigkill
     :kill-process-buffer-on-stop t))
#+end_src
** Ignore headlines
#+begin_src emacs-lisp :tangle no
  (use-package ox-extra

    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))
#+end_src

Then tag a headline with ~:ignore:~ to avoid the headline being exported. The content will be though.

*References*
- [[https://emacs.stackexchange.com/questions/38184/org-mode-ignore-heading-when-exporting-to-latex#41685][StackExchange]]
** Skeleton
You can define a skeleton to expand as an abbrev expansion. Add it to the list via ~M-x edit-abbrevs~ as shown here

#+begin_example
  (c-mode-abbrev-table)
  "example" 0 "" example-skeleton
#+end_example

In this, the abbrev is added to C-mode, it is invoked when you type "example," it runs the skeleton defined ~example-skeleton~ and has been run zero times.

*References*
- [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Skeletons-as-Abbrevs.html][GNU Manual]] [2020-04-26 Sun]

** Spell check

#+begin_src emacs-lisp
;; comment
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package flyspell

    :custom
    (flyspell-abbrev-p t)
    (flyspell-use-global-abbrev-table-p t)
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    (flyspell-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package flyspell-correct-ivy
     :after flyspell
     :bind (:map flyspell-mode-map
           ("C-;" . flyspell-correct-word-generic))
     :custom (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package ispell

    ;;:ensure-system-package hunspell
    :custom
    ;; (when (executable-find "hunspell")
    ;;   (setq-default ispell-program-name "hunspell")
    ;;   (setq ispell-really-hunspell t))
    (ispell-current-personal-dictionary "~/.dict"))
#+end_src

** Dired subtree

#+begin_src emacs-lisp
  (use-package dired-subtree
    :disabled t
    :config
    :bind (:map dired-mode-map
               ("i" . dired-subtree-cycle)))
#+end_src
** Dired git info

#+begin_src emacs-lisp
  (use-package dired-git-info
    :disabled t

    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))
#+end_src
** Diredfl

#+begin_src emacs-lisp
  (use-package diredfl
    :disabled t

    :config
    (diredfl-global-mode 1))
#+end_src
** Dired Open

#+begin_src emacs-lisp
  (defun actuator-dired-open ()
    "Open the file at point with open."
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
           (nfiles (length files)))
      (when (or (< nfiles 8)
                (y-or-n-p (format "Really open %d files?" nfiles)))
        (dolist (file files) (start-process "open" nil "open" file)))))
  (bind-key "e" #'actuator-dired-open dired-mode-map)
#+end_src

** Fancy refile

#+begin_src emacs-lisp
  (defmacro actuator-org-make-refile-command (fn-suffix refile-targets)
    "Generate a command to call `org-refile' with modified targets."
    `(defun ,(intern (concat "actuator-org-refile-" (symbol-name fn-suffix))) ()
       ,(format "`org-refile' to %S" refile-targets)
       (interactive)
       (org-refile-cache-clear)
       (let ((org-refile-target-verify-function nil)
             (org-refile-targets ,refile-targets))
         (call-interactively 'org-refile))))
#+end_src

#+begin_src emacs-lisp
  (actuator-org-make-refile-command this-file `((,(buffer-file-name) :maxlevel . 9)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (defhydra actuator-org-refile-hydra (:color blue :hint nil)
    "
_t_his file"
    ("t" actuator-org-refile-this-file))
  (bind-key "C-c r" #'actuator-org-refile-hydra/body org-mode-map)
#+end_src

https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html
** MRU Clock

#+begin_src emacs-lisp
  (use-package org-mru-clock
    :disabled t

    :bind
    ("C-c C-x i" . org-mru-clock-in)
    ("C-c C-x C-j . org-mru-clock-select-recent-task")
    :custom
    (org-mru-clock-completing-read 'ivy-completing-read))
#+end_src
** Hydra

#+begin_src emacs-lisp
  (use-package hydra

    :custom
    (hydra-hint-display-type 'lv))
#+end_src

** Pulse Line
#+begin_src emacs-lisp
  (defun pulse-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

  (dolist (command '(scroll-up-command scroll-down-command
                     recenter-top-bottom other-window))
    (advice-add command :after #'pulse-line))
#+end_src
