#+title: MacOS

* Hide dock
#+begin_src shell
  defaults write com.apple.Dock autohide-delay -float 2
  killall dock
#+end_src

* Set Emacs As Default Editor
#+begin_src shell
  duti -s org.gnu.Emacs com.apple.property-list all
  duti -s org.gnu.Emacs com.apple.xcode.strings-text all
  duti -s org.gnu.Emacs com.netscape.javascript-source all
  duti -s org.gnu.Emacs net.daringfireball.markdown all
  duti -s org.gnu.Emacs public.c-header all
  duti -s org.gnu.Emacs public.c-plus-plus-source all
  duti -s org.gnu.Emacs public.c-source all
  duti -s org.gnu.Emacs public.data all
  duti -s org.gnu.Emacs public.json all
  duti -s org.gnu.Emacs public.objective-c-source all
  duti -s org.gnu.Emacs public.perl-script all
  duti -s org.gnu.Emacs public.plain-text all
  duti -s org.gnu.Emacs public.precompiled-c-header all
  duti -s org.gnu.Emacs public.python-script all
  duti -s org.gnu.Emacs public.ruby-script all
  duti -s org.gnu.Emacs public.shell-script all
  duti -s org.gnu.Emacs public.swift-source all
  duti -s org.gnu.Emacs public.unix-executable all
  duti -s org.gnu.Emacs public.xml all
  duti -s org.gnu.Emacs public.yaml all
#+end_src

* Defaults Write

#+begin_src shell
  defaults write com.apple.Safari ExperimentalHTTPSUpgradeEnabled -int 1
#+end_src

#+begin_src emacs-lisp
  # Disable the sound effects on boot
  sudo nvram SystemAudioVolume=" "

  # Increase window resize speed for Cocoa applications
  defaults write NSGlobalDomain NSWindowResizeTime -float 0.001

  # Expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # Save to disk (not to iCloud) by default
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # Automatically quit printer app once the print jobs complete
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

          # Hibernation mode
  # 0: Disable hibernation (speeds up entering sleep mode)
  # 3: Copy RAM to disk so the system state can still be restored in case of a
  #    power failure.
  sudo pmset -a hibernatemode 0

          # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Avoid creating .DS_Store files on network or USB volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

  # Use list view in all Finder windows by default
  # Four-letter codes for the other view modes: `icnv`, `clmv`, `glyv`
  defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

  # Disable the warning before emptying the Trash
  defaults write com.apple.finder WarnOnEmptyTrash -bool false

          # Expand the following File Info panes:
  # “General”, “Open with”, and “Sharing & Permissions”
  defaults write com.apple.finder FXInfoPanesExpanded -dict \
          General -bool true \
          OpenWith -bool true \
  Privileges -bool true


  # Disable the annoying line marks
  defaults write com.apple.Terminal ShowLineMarks -int 0

          # Disable inline attachments (just show the icons)
  defaults write com.apple.mail DisableInlineAttachmentViewing -bool true

  # Save screenshots to the desktop
  defaults write com.apple.screencapture location -string "${HOME}/Desktop"

          # Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
  defaults write com.apple.screencapture type -string "png"

  # Disable shadow in screenshots
  defaults write com.apple.screencapture disable-shadow -bool true

          # Finder: show all filename extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

          # Finder: show path bar
  defaults write com.apple.finder ShowPathbar -bool true

  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Enable spring loading for directories
  defaults write NSGlobalDomain com.apple.springing.enabled -bool true

  # Hot corners
  # Possible values:
  #  0: no-op
  #  2: Mission Control
  #  3: Show application windows
  #  4: Desktop
  #  5: Start screen saver
  #  6: Disable screen saver
  #  7: Dashboard
  # 10: Put display to sleep
  # 11: Launchpad
  # 12: Notification Center
  # 13: Lock Screen
  # Top left screen corner → Mission Control
  defaults write com.apple.dock wvous-tl-corner -int 2
  defaults write com.apple.dock wvous-tl-modifier -int 0
  # Top right screen corner → Desktop
  defaults write com.apple.dock wvous-tr-corner -int 4
  defaults write com.apple.dock wvous-tr-modifier -int 0
  # Bottom left screen corner → Start screen saver
  defaults write com.apple.dock wvous-bl-corner -int 5
  defaults write com.apple.dock wvous-bl-modifier -int 0

  # Prevent Safari from opening ‘safe’ files automatically after downloading
  defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

  # Hide Safari’s bookmarks bar by default
  defaults write com.apple.Safari ShowFavoritesBar -bool false

  # Disable inline attachments (just show the icons)
  defaults write com.apple.mail DisableInlineAttachmentViewing -bool true

  defaults write com.apple.spotlight orderedItems -array \
          '{"enabled" = 1;"name" = "APPLICATIONS";}' \
          '{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
          '{"enabled" = 1;"name" = "DIRECTORIES";}' \
          '{"enabled" = 1;"name" = "PDF";}' \
          '{"enabled" = 1;"name" = "FONTS";}' \
          '{"enabled" = 0;"name" = "DOCUMENTS";}' \
          '{"enabled" = 0;"name" = "MESSAGES";}' \
          '{"enabled" = 0;"name" = "CONTACT";}' \
          '{"enabled" = 0;"name" = "EVENT_TODO";}' \
          '{"enabled" = 0;"name" = "IMAGES";}' \
          '{"enabled" = 0;"name" = "BOOKMARKS";}' \
          '{"enabled" = 0;"name" = "MUSIC";}' \
          '{"enabled" = 0;"name" = "MOVIES";}' \
          '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
          '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
          '{"enabled" = 0;"name" = "SOURCE";}' \
          '{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
          '{"enabled" = 0;"name" = "MENU_OTHER";}' \
          '{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
          '{"enabled" = 0;"name" = "MENU_EXPRESSION";}' \
          '{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
  '{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'

  # Show only running apps in the dock
  defaults write com.apple.dock static-only -bool TRUE

  #Use the following command in Terminal to change the layout of Launchpad. #Change ‘X’ into the number of icons to be showed in a single row (e.g 9).

  defaults write com.apple.dock springboard-columns -int X

  #Change ‘X’ to the number of rows (e.g 3).

  defaults write com.apple.dock springboard-rows -int X

  #Force a restart of Launchpad with the following command to apply the changes:

  defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock
#+end_src
* Backup Anki
:PROPERTIES:
:ID:       B421E9B0-7686-4777-AA4B-2A6C2D2A8DED
:END:

#+begin_src xml :tangle ~/Library/LaunchAgents/actuator.backup-anki.plist
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
    <dict>
      <key>Label</key>
      <string>actuator.backup-anki</string>
      <key>ProgramArguments</key>
      <array>
        <string>/bin/sh</string>
        <string>-c</string>
        <string>/usr/bin/rsync -av ~/Library/ApplicationSupport/Anki2 ~/Documents/Archive/Anki2</string>
      </array>
      <key>StartCalendarInterval</key>
      <dict>
        <key>Hour</key>
        <integer>3</integer>
        <key>Minute</key>
        <integer>0</integer>
      </dict>
      <key>StandardErrorPath</key>
      <string>/tmp/backup-ankit.stderr</string>
    </dict>
  </plist>
#+end_src
* Hammerspoon
** Setup
#+begin_src shell
  defaults write org.hammerspoon.Hammerspoon MJConfigFile "~/.config/hammerspoon/init.lua"
#+end_src

** Init
:PROPERTIES:
:header-args: :tangle ~/.config/hammerspoon/init.lua
:END:
*** Hyper

#+begin_src lua
  local hyper = {"ctrl", "alt", "cmd"}
#+end_src

*** WM
#+begin_src lua
    hs.loadSpoon("MiroWindowsManager")

    hs.window.animationDuration = 0.0
    spoon.MiroWindowsManager:bindHotkeys({
          up         = {hyper, ";" },
          right      = {hyper, "'" },
          down       = {hyper, "o" },
          left       = {hyper, "i" },
          fullscreen = {hyper, "/" }
    })

  hs.hotkey.bind(hyper, '.', function()
          local win = hs.window.focusedWindow()
          local f = win:frame()
          local max = win:screen():frame()

          local x = f

          x.x = ((max.w - f.w) / 2) + max.x
          x.y = ((max.h - f.h) / 2) + max.y
          win:setFrame(x)
  end)
#+end_src

*** Finder
#+begin_src lua
  hs.hotkey.bind(hyper, 'n', function()
                    hs.application.launchOrFocus("Finder")
  end)
#+end_src

*** Reload Hammerspoon
#+begin_src lua
  hs.hotkey.bind(hyper, 'r', function()
                    hs.reload()
  end)
#+end_src

*** Text Inflator

#+begin_src lua
  local function textInflaterCallback(choice)
     --hs.alert(choice["text"])
     --hs.pasteboard.setContents(choice["text"])
     hs.eventtap.keyStrokes(choice["text"])
  end

  local inflates = {
     {
        ["text"] = "Principles of Anatomy and Physiology 14th Ed. Chapter 28",
        ["subText"] = "citation",
        ["uuid"] = "0001"
     },
     {
        ["text"] = "Select all that apply.",
        ["subText"] = "multiple choice",
        ["uuid"] = "0002"
     },
     {
        ["text"] = "(no description)",
        ["subText"] = "image occlusion",
        ["uuid"] = "0003"
     },
     {
        ["text"] = "μ",
        ["subText"] = "Greek mu (micro)",
        ["uuid"] = "0005"
     }
  }

  local function textInflater(choice)
     --hs.alert(choice["text"])
     --hs.pasteboard.setContents(choice["text"])
     hs.eventtap.keyStrokes(choice["text"])
  end

  local textInflaterChooser =
     hs.chooser.new(
        function(choice)
           if not (choice) then
              return
           else
              textInflaterCallback(choice)
           end
        end
     ):rows(5):width(50):choices(inflates):searchSubText(true)

  hs.hotkey.bind(
     hyper,
     "J",
     function()
        textInflaterChooser:show()
     end)
#+end_src
* Disable  Launchd stuff
#+begin_src shell
  #!/bin/bash

  # IMPORTANT: Don't forget to logout from your Apple ID in the settings before running it!
  # IMPORTANT: You will need to run this script from Recovery. In fact, macOS Catalina brings read-only filesystem which prevent this script from working from the main OS.
  # This script needs to be run from the volume you wish to use.
  # E.g. run it like this: cd /Volumes/Macintosh\ HD && sh /Volumes/Macintosh\ HD/Users/sabri/Desktop/disable.sh
  # WARNING: It might disable things that you may not like. Please double check the services in the TODISABLE vars.

  # Get active services: launchctl list | grep -v "\-\t0"
  # Find a service: grep -lR [service] /System/Library/Launch* /Library/Launch* ~/Library/LaunchAgents

  # Agents to disable
  # 'com.apple.speech.speechdatainstallerd' 'com.apple.speech.speechsynthesisd' 'com.apple.speech.synthesisserver' will freeze Edit menus
  # 'com.apple.bird' will prevent saving prompt from being shown
  TODISABLE=()

  # Safari useless stuff

  # Game Center / Passbook / Apple TV / Homekit...
  TODISABLE+=('com.apple.gamed' \
          'com.apple.passd' \
          'com.apple.Maps.pushdaemon' \
          'com.apple.videosubscriptionsd' \
          'com.apple.CommCenter-osx' \
          'com.apple.homed')

  # Ad-related
  TODISABLE+=('com.apple.ap.adprivacyd' \
          'com.apple.ap.adservicesd')

  # Screensharing
  TODISABLE+=('com.apple.screensharing.MessagesAgent' \
          'com.apple.screensharing.agent' \
          'com.apple.screensharing.menuextra')

  # Siri
  TODISABLE+=('com.apple.siriknowledged' \
          'com.apple.assistant_service' \
          'com.apple.assistantd' \
          'com.apple.Siri.agent' \
          'com.apple.parsec-fbf')

  # VoiceOver / accessibility-related stuff
  TODISABLE+=('com.apple.VoiceOver' \
          'com.apple.voicememod' \
          'com.apple.accessibility.AXVisualSupportAgent' \
          'com.apple.accessibility.dfrhud' \
          'com.apple.accessibility.heard')

  # Sidecar
  TODISABLE+=('com.apple.sidecar-hid-relay' \
          'com.apple.sidecar-relay')

  # Debugging process
  TODISABLE+=('com.apple.spindump_agent' \
          'com.apple.ReportCrash' \
          'com.apple.ReportGPURestart' \
          'com.apple.ReportPanic' \
          'com.apple.DiagnosticReportCleanup' \
          'com.apple.TrustEvaluationAgent')

  # Screentime
  TODISABLE+=('com.apple.ScreenTimeAgent' \
          'com.apple.UsageTrackingAgent')

  # Others
  TODISABLE+=('com.apple.parsecd' \
          'com.apple.AOSPushRelay' \
          'com.apple.AOSHeartbeat' \
          'com.apple.AirPlayUIAgent' \
          'com.apple.AirPortBaseStationAgent' \
          'com.apple.familycircled' \
          'com.apple.familycontrols.useragent' \
          'com.apple.familynotificationd' \
          'com.apple.findmymacmessenger' \
          'com.apple.java.InstallOnDemand' \
          'com.apple.parentalcontrols.check' \
          'com.apple.appleseed.seedusaged' \
          'com.apple.appleseed.seedusaged.postinstall' \
          'com.apple.CallHistorySyncHelper' \
          'com.apple.RemoteDesktop' \
          'com.apple.CallHistoryPluginHelper' \
          'com.apple.SocialPushAgent' \
          'com.apple.touristd' \
          'com.apple.macos.studentd' \
          'com.apple.KeyboardAccessAgent' \
          'com.apple.exchange.exchangesyncd' \
          'com.apple.suggestd' \
          'com.apple.AddressBook.abd' \
          'com.apple.helpd' \
          'com.apple.amp.mediasharingd' \
          'com.apple.mediaanalysisd' \
          'com.apple.mediaremoteagent' \
          'com.apple.remindd' \
          'com.apple.keyboardservicesd' \
          'com.apple.AddressBook.SourceSync' \
          'com.apple.telephonyutilities.callservicesd' \
          'com.apple.mobileassetd' \
          'com.apple.CalendarAgent' \
          'com.apple.knowledge-agent')

  for agent in "${TODISABLE[@]}"
  do
      mv ./System/Library/LaunchAgents/${agent}.plist ./System/Library/LaunchAgents/${agent}.plist.bak
      echo "[OK] Agent ${agent} disabled"
  done

  # Daemons to disable
  TODISABLE=()

  # Others
  TODISABLE+=('com.apple.netbiosd' \
          'com.apple.preferences.timezone.admintool' \
          'com.apple.remotepairtool' \
          'com.apple.security.FDERecoveryAgent' \
          'com.apple.SubmitDiagInfo' \
          'com.apple.screensharing' \
          'com.apple.appleseed.fbahelperd' \
          'com.apple.apsd' \
          'com.apple.ManagedClient.cloudconfigurationd' \
          'com.apple.ManagedClient.enroll' \
          'com.apple.ManagedClient' \
          'com.apple.ManagedClient.startup' \
          'com.apple.locate' \
          'com.apple.locationd' \
          'com.apple.eapolcfg_auth' \
          'com.apple.RemoteDesktop.PrivilegeProxy' \
          'com.apple.mediaremoted')

  for daemon in "${TODISABLE[@]}"
  do
      mv ./System/Library/LaunchDaemons/${daemon}.plist ./System/Library/LaunchDaemons/${daemon}.plist.bak
      echo "[OK] Daemon ${daemon} disabled"
  done

#+end_src

  Raw
   enable.sh
  #!/bin/bash

  # IMPORTANT: Don't forget to logout from your Apple ID in the settings before running it!
  # IMPORTANT: You will need to run this script from Recovery. In fact, macOS Catalina brings read-only filesystem which prevent this script from working from the main OS.
  # This script needs to be run from the volume you wish to use.
  # E.g. run it like this: cd /Volumes/Macintosh\ HD && sh /Volumes/Macintosh\ HD/Users/sabri/Desktop/disable.sh

  # Get active services: launchctl list | grep -v "\-\t0"
  # Find a service: grep -lR [service] /System/Library/Launch* /Library/Launch* ~/Library/LaunchAgents

  # Agents to enable
  TOENABLE=()

  # iCloud
  TOENABLE+=('com.apple.security.cloudkeychainproxy3' \
          'com.apple.iCloudUserNotifications' \
          'com.apple.icloud.findmydeviced.findmydevice-user-agent' \
          'com.apple.icloud.fmfd' \
          'com.apple.icloud.searchpartyuseragent' \
          'com.apple.cloudd' \
          'com.apple.cloudpaird' \
          'com.apple.cloudphotosd' \
          'com.apple.followupd' \
          'com.apple.protectedcloudstorage.protectedcloudkeysyncing')

  # Safari useless stuff
  TOENABLE+=('com.apple.SafariBookmarksSyncAgent' \
          'com.apple.SafariCloudHistoryPushAgent' \
          'com.apple.WebKit.PluginAgent')

  # iMessage / Facetime
  TOENABLE+=('com.apple.imagent' \
          'com.apple.imautomatichistorydeletionagent' \
          'com.apple.imklaunchagent' \
          'com.apple.imtransferagent' \
          'com.apple.avconferenced')

  # Game Center / Passbook / Apple TV / Homekit...
  TOENABLE+=('com.apple.gamed' \
          'com.apple.passd' \
          'com.apple.Maps.pushdaemon' \
          'com.apple.videosubscriptionsd' \
          'com.apple.CommCenter-osx' \
          'com.apple.homed')

  # Ad-related
  TOENABLE+=('com.apple.ap.adprivacyd' \
          'com.apple.ap.adservicesd')

  # Screensharing
  TOENABLE+=('com.apple.screensharing.MessagesAgent' \
          'com.apple.screensharing.agent' \
          'com.apple.screensharing.menuextra')

  # Siri
  TOENABLE+=('com.apple.siriknowledged' \
          'com.apple.assistant_service' \
          'com.apple.assistantd' \
          'com.apple.Siri.agent' \
          'com.apple.parsec-fbf')

  # VoiceOver / accessibility-related stuff
  TOENABLE+=('com.apple.VoiceOver' \
          'com.apple.voicememod' \
          'com.apple.accessibility.AXVisualSupportAgent' \
          'com.apple.accessibility.dfrhud' \
          'com.apple.accessibility.heard')

  # Quicklook
  TOENABLE+=('com.apple.quicklook.ui.helper' \
          'com.apple.quicklook.ThumbnailsAgent' \
          'com.apple.quicklook')

  # Sidecar
  TOENABLE+=('com.apple.sidecar-hid-relay' \
          'com.apple.sidecar-relay')

  # Debugging process
  TOENABLE+=('com.apple.spindump_agent' \
          'com.apple.ReportCrash' \
          'com.apple.ReportGPURestart' \
          'com.apple.ReportPanic' \
          'com.apple.DiagnosticReportCleanup' \
          'com.apple.TrustEvaluationAgent')

  # Screentime
  TOENABLE+=('com.apple.ScreenTimeAgent' \
          'com.apple.UsageTrackingAgent')

  # Others
  TOENABLE+=('com.apple.telephonyutilities.callservicesd' \
          'com.apple.photoanalysisd' \
          'com.apple.parsecd' \
          'com.apple.AOSPushRelay' \
          'com.apple.AOSHeartbeat' \
          'com.apple.AirPlayUIAgent' \
          'com.apple.AirPortBaseStationAgent' \
          'com.apple.familycircled' \
          'com.apple.familycontrols.useragent' \
          'com.apple.familynotificationd' \
          'com.apple.findmymacmessenger' \
          'com.apple.sharingd' \
          'com.apple.identityservicesd' \
          'com.apple.java.InstallOnDemand' \
          'com.apple.parentalcontrols.check' \
          'com.apple.security.keychain-circle-notification' \
          'com.apple.syncdefaultsd' \
          'com.apple.appleseed.seedusaged' \
          'com.apple.appleseed.seedusaged.postinstall' \
          'com.apple.CallHistorySyncHelper' \
          'com.apple.RemoteDesktop' \
          'com.apple.CallHistoryPluginHelper' \
          'com.apple.SocialPushAgent' \
          'com.apple.touristd' \
          'com.apple.macos.studentd' \
          'com.apple.KeyboardAccessAgent' \
          'com.apple.exchange.exchangesyncd' \
          'com.apple.suggestd' \
          'com.apple.AddressBook.abd' \
          'com.apple.helpd' \
          'com.apple.amp.mediasharingd' \
          'com.apple.mediaanalysisd' \
          'com.apple.mediaremoteagent' \
          'com.apple.remindd' \
          'com.apple.keyboardservicesd' \
          'com.apple.AddressBook.SourceSync' \
          'com.apple.telephonyutilities.callservicesd' \
          'com.apple.mobileassetd' \
          'com.apple.CalendarAgent' \
          'com.apple.knowledge-agent')

  for agent in "${TOENABLE[@]}"
  do
      mv ./System/Library/LaunchAgents/${agent}.plist.bak ./System/Library/LaunchAgents/${agent}.plist
      echo "[OK] Agent ${agent} disabled"
  done

  # Daemons to enable
  TOENABLE=()

  # iCloud
  TOENABLE+=('com.apple.analyticsd', 'com.apple.icloud.findmydeviced')

  # Others
  TOENABLE+=('com.apple.netbiosd' \
          'com.apple.preferences.timezone.admintool' \
          'com.apple.remotepairtool' \
          'com.apple.security.FDERecoveryAgent' \
          'com.apple.SubmitDiagInfo' \
          'com.apple.screensharing' \
          'com.apple.appleseed.fbahelperd' \
          'com.apple.apsd' \
          'com.apple.ManagedClient.cloudconfigurationd' \
          'com.apple.ManagedClient.enroll' \
          'com.apple.ManagedClient' \
          'com.apple.ManagedClient.startup' \
          'com.apple.locate' \
          'com.apple.locationd' \
          'com.apple.eapolcfg_auth' \
          'com.apple.RemoteDesktop.PrivilegeProxy' \
          'com.apple.mediaremoted')

  for daemon in "${TOENABLE[@]}"
  do
      mv ./System/Library/LaunchDaemons/${daemon}.plist.bak ./System/Library/LaunchDaemons/${daemon}.plist
      echo "[OK] Daemon ${daemon} disabled"
  done
#+end_src

https://gist.github.com/pwnsdx/1217727ca57de2dd2a372afdd7a0fc21
* Rsync music backup
:PROPERTIES:
:ID:       CB217DF8-4B9F-4ADC-9F60-1B7FAB3DA897
:END:
I wanted to keep my music backed up to iCloud. I don't pay for iTunes Match or Apple Music, but I do have 2TB of iCloud Drive storage, so this works well.

This script should rysnc-copy my music to my archive  very confusing) but had no end of issues getting permission from the system to run it. The secret was to enable full disk access to ~/bin/sh~.

#+begin_src xml :tangle ~/Library/LaunchAgents/actuator.syncmusic.plist
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
    <dict>
      <key>Label</key>
      <string>actuator.syncmusic</string>
      <key>ProgramArguments</key>
      <array>
        <string>/bin/sh</string>
        <string>-c</string>
        <string>/usr/bin/rsync -av ~/Music/ ~/Documents/Archive/Music</string>
      </array>
      <key>StartCalendarInterval</key>
      <dict>
        <key>Hour</key>
        <integer>3</integer>
        <key>Minute</key>
        <integer>0</integer>
      </dict>
      <key>StandardErrorPath</key>
      <string>/tmp/music.stderr</string>
    </dict>
  </plist>
#+end_src

* MPD
#+begin_src xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
  <dict>
      <key>Label</key>
      <string>actuator.mpd</string>
      <key>WorkingDirectory</key>
      <string>/usr/local</string>
      <key>ProgramArguments</key>
      <array>
          <string>XDG_CONFIG_HOME=/Users/g/.config</string>
          <string>/usr/local/opt/mpd/bin/mpd</string>
          <string>--no-daemon</string>
      </array>
      <key>RunAtLoad</key>
      <true/>
      <key>KeepAlive</key>
      <true/>
      <key>ProcessType</key>
      <string>Interactive</string>
  </dict>
  </plist>
#+end_src
