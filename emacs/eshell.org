#+title: Eshell
#+property: header-args :results output silent :comments link :noweb no-export :tangle no
#+hugo_base_dir: ~/Documents/Projects/mac-into-sh/
#+date:

* Introduction

#+begin_src emacs-lisp :tangle yes
  (use-package eshell
    :straight nil
    :config
    <<shortcuts>>
    <<smart-shell>>
    <<autocomplete>>
    <<imenu>>
    :custom
    (eshell-history-size 10000)
    (eshell-destroy-buffer-when-process-dies t)
    (eshell-banner-message ""))
#+end_src

* Shortcuts
:PROPERTIES:
:header-args: :noweb-ref shortcuts :results output silent :tangle no
:END:

#+begin_src emacs-lisp
  (defalias 'eshell/f  'find-file-other-window)
  (defalias 'eshell/ff 'find-file)
  (defalias 'eshell/v  'view-file-other-window)
  (defalias 'eshell/vv 'view-file)
#+end_src

* iMenu
:PROPERTIES:
:header-args: :noweb-ref imenu :results output silent :tangle no
:END:

- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

In an eshell mode hook function, one can set the imenu-generic-expression to help it find your favorite prompt:

#+begin_src emacs-lisp
  (defun actuator-eshell-imenu ()
    "arst"
    (setq-local imenu-generic-expression
                '(("Prompt" "^.*?[#‚ùØ]" 1))))
  (add-hook 'eshell-mode-hook #'actuator-eshell-imenu)
#+end_src

* Smart Shell
:PROPERTIES:
:header-args: :noweb-ref smart-shell :results output silent :tangle no
:END:

#+begin_src emacs-lisp
  (defun actuator-eshell-smart-shell ()
    "Set up Plan9/Smart shell stuff."
    (require 'em-smart)
    (eshell-smart-initialize))
  (add-hook 'eshell-mode-hook #'actuator-eshell-smart-shell)
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
  (setq eshell-hist-ignoredups t)
#+end_src

* Bookmarks
:PROPERTIES:
:header-args: :tangle yes :results output silent
:ID:       E0275FCE-6275-42E6-B22A-0CEFD19D7FDA
:END:

#+begin_src emacs-lisp
  (use-package eshell-bookmark
    :straight t
    :hook (eshell-mode . eshell-bookmark-setup))
#+end_src

* Completion
:PROPERTIES:
:header-args: :tangle no :results output silent
:ID:       54541C5E-54E8-4D26-8D66-440E11E24A0E
:END:

#+name: autocomplete
#+begin_src emacs-lisp :tangle no
  (defun actuator-eshell-autocomplete ()
        "Enable tab autocompletion in eshell."
        (define-key
          eshell-mode-map (kbd "<tab>")
          (lambda () (interactive) (pcomplete-std-complete))))

  (add-hook 'eshell-mode-hook #'actuator-eshell-autocomplete)
#+end_src

- find
- xargs
- cd
- ls
- hg
- apt-get
- sudo
#+begin_src emacs-lisp
  (use-package pcomplete-extension
    :straight t
    :config
    (require 'pcomplete-extension))
#+end_src

- bzip2
- chgrp
- chown
- gdb
- gzip
- make
- rm
- rmdir
- tar
- time
- which
- xargs
#+begin_src emacs-lisp
  (use-package pcmpl-args
    :straight t
    :config
    (require 'pcmpl-args))
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-homebrew
    :straight t
    :config
    (require 'pcmpl-homebrew))
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-pip
    :straight t
    :config
    (require 'pcmpl-pip))
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-git
    :straight t
    :config
    (require 'pcmpl-git))
#+end_src

#+begin_src emacs-lisp
  (use-package fish-completion
    :straight t
    :custom
    (fish-completion-fallback-on-bash-p t)
    :config
    (defun actuator-fish-completion ()
      "arst"
      (when (and (executable-find "fish")
                 (require 'fish-completion nil t))
        (fish-completion-mode)))
    :hook (eshell-mode . actuator-fish-completion))
#+end_src

* Z
:PROPERTIES:
:header-args: :tangle yes :results output silent
:ID:       6A6BFA1C-6CA9-4AD8-A76B-1478A47CD9AE
:END:

#+begin_src emacs-lisp
  (use-package eshell-z
    :straight t
    :custom
    (eshell-z-freq-dir-hash-table-file-name "~/.local/share/z/data")
    :config
    (add-hook 'eshell-mode-hook
              (defun actuator-eshell-z ()
                (require 'eshell-z))))
#+end_src


* History references
#+begin_src emacs-lisp
  (add-hook 'eshell-expand-input-functions
             #'eshell-expand-history-references)
#+end_src


* Extra

https://brettterpstra.com/2019/11/11/fish-further-exploration/

https://ambrevar.xyz/emacs-eshell/

https://masteringemacs.org/article/complete-guide-mastering-eshell

http://ergoemacs.org/emacs/eshell.html

http://www.howardism.org/Technical/Emacs/eshell-fun.html

https://writequit.org/eos/eos-shell.html

https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/

https://github.com/dieggsy/esh-autosuggest/

https://github.com/manateelazycat/aweshell/blob/master/README.md

https://ambrevar.xyz/emacs-eshell/

http://www.modernemacs.com/post/custom-eshell/

https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org

https://blog.hoetzel.info/post/eshell-notifications/

https://emacs.stackexchange.com/questions/27849/how-can-i-setup-eshell-to-use-ivy-for-tab-completion#27969

https://github.com/4DA/eshell-toggle

https://melpa.org/#/eshell-z

https://github.com/xuchunyang/eshell-git-prompt/tree/b6bb2d7bd4e393b4170b29891cfefb72ae020aab

https://github.com/manateelazycat/aweshell
https://masteringemacs.org/article/complete-guide-mastering-eshell

git (CLI), gitk, tig, etc. -> magit
htop -> symon, proced, helm-top...
abook -> org-contacts
mutt -> mu4e, gnus
ncdu -> dired-du
cmus/moc -> EMMS
newsbeuter -> Elfeed, gnus
weechat, irssi -> ERC, etc.
rtorrent, transmission-cli -> transmission.el

https://github.com/zwild/eshell-prompt-extras/tree/5a328e1b9112c7f31ce2da7cde340f96626546b6

https://emacs.stackexchange.com/questions/27849/how-can-i-setup-eshell-to-use-ivy-for-tab-completion#27969

  alias cp='cp -i'
  alias mv='mv -i'
  alias rm='rm -i'

https://github.com/mickeynp/dirswitch.el

(add-hook 'eshell-expand-input-functions
              #'eshell-expand-history-references)

(setq eshell-prompt-regexp "^.+@.+:.+> ")
(setq eshell-prompt-function
      (lambda ()
        (concat
         (user-login-name)
         "@"
         (system-name)
         ":"
         (eshell/pwd)
         "> ")))

eshell-cmpl-cycle-completions nil
      eshell-save-history-on-exit t
      eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

(add-hook 'eshell-mode-hook
          '(lambda ()
             (progn
               (define-key eshell-mode-map "\C-a" 'eshell-bol)
               (define-key eshell-mode-map "\C-r" 'counsel-esh-history)
               (define-key eshell-mode-map [up] 'previous-line)
               (define-key eshell-mode-map [down] 'next-line)
               )))

(setq eshell-hist-ignoredups t)
(setq eshell-cmpl-cycle-completions nil)
(setq eshell-cmpl-ignore-case t)
(setq eshell-ask-to-save-history (quote always))

(use-package pcmpl-args
:ensure t)

(use-package pcmpl-git
:ensure t)

(use-package pcmpl-homebrew
:ensure t)

(use-package pcmpl-pip
:ensure t)

(use-package pcomplete-extension
:ensure t)

(use-package fish-completion
:ensure t
:config...)

https://gitlab.com/ambrevar/emacs-fish-completion/tree/e5b9b65a077319dfdb2faca9ef847db3ef55d0db

https://www.emacswiki.org/emacs/EshellFunctions

https://gist.github.com/ralt/a36288cd748ce185b26237e6b85b27bb

https://emacs.stackexchange.com/questions/16318/drag-and-drop-images-to-auctex

https://emacs.stackexchange.com/questions/20419/how-do-i-show-the-filename-instead-of-the-file-i-drag-into-an-emacs-buffer?r=SearchResults

https://github.com/tom-tan/esh-help/tree/417673ed18a983930a66a6692dbfb288a995cb80

https://github.com/dieggsy/esh-autosuggest/tree/972094808d231a86dc6e43862191167b1997d840

https://github.com/mauforonda/emacs/blob/master/readme.org
http://xenodium.com/more-reusable-emacs-shell-command-history/
