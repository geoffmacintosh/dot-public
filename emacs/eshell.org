#+title: Eshell
#+property: header-args :results output silent :comments link :noweb no-export :tangle no
#+hugo_base_dir: ~/Documents/Projects/mac-into-sh/
#+date:

* Introduction

#+begin_src emacs-lisp :tangle yes
  (use-package eshell
    :straight nil
    :config
    <<shortcuts>>
    <<smart-shell>>
    <<autocomplete>>
    <<imenu>>
    :custom
    (eshell-history-size 10000)
    (eshell-destroy-buffer-when-process-dies t)
    (eshell-banner-message ""))
#+end_src

* Shortcuts
:PROPERTIES:
:header-args: :noweb-ref shortcuts :results output silent :tangle no
:END:

#+begin_src emacs-lisp
  (defalias 'eshell/f  'find-file-other-window)
  (defalias 'eshell/ff 'find-file)
  (defalias 'eshell/v  'view-file-other-window)
  (defalias 'eshell/vv 'view-file)
#+end_src

* iMenu
:PROPERTIES:
:header-args: :noweb-ref imenu :results output silent :tangle no
:END:

- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

In an eshell mode hook function, one can set the imenu-generic-expression to help it find your favorite prompt:

#+begin_src emacs-lisp
  (defun actuator-eshell-imenu ()
    "arst"
    (setq-local imenu-generic-expression
                '(("Prompt" "^.*?[#‚ùØ]" 1))))
  (add-hook 'eshell-mode-hook #'actuator-eshell-imenu)
#+end_src

* Smart Shell
:PROPERTIES:
:header-args: :noweb-ref smart-shell :results output silent :tangle no
:END:

#+begin_src emacs-lisp
  (defun actuator-eshell-smart-shell ()
    "Set up Plan9/Smart shell stuff."
    (require 'em-smart)
    (eshell-smart-initialize))
  (add-hook 'eshell-mode-hook #'actuator-eshell-smart-shell)
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
  (setq eshell-hist-ignoredups t)
#+end_src

* Bookmarks
:PROPERTIES:
:header-args: :tangle yes :results output silent
:ID:       E0275FCE-6275-42E6-B22A-0CEFD19D7FDA
:END:

#+begin_src emacs-lisp
  (use-package eshell-bookmark
    :straight t
    :hook (eshell-mode . eshell-bookmark-setup))
#+end_src

* Completion
:PROPERTIES:
:header-args: :tangle no :results output silent
:ID:       54541C5E-54E8-4D26-8D66-440E11E24A0E
:END:

#+name: autocomplete
#+begin_src emacs-lisp :tangle no
  (defun actuator-eshell-autocomplete ()
        "Enable tab autocompletion in eshell."
        (define-key
          eshell-mode-map (kbd "<tab>")
          (lambda () (interactive) (pcomplete-std-complete))))

  (add-hook 'eshell-mode-hook #'actuator-eshell-autocomplete)
#+end_src

- find
- xargs
- cd
- ls
- hg
- apt-get
- sudo
#+begin_src emacs-lisp
  (use-package pcomplete-extension
    :straight t
    :config
    (require 'pcomplete-extension))
#+end_src

- bzip2
- chgrp
- chown
- gdb
- gzip
- make
- rm
- rmdir
- tar
- time
- which
- xargs
#+begin_src emacs-lisp
  (use-package pcmpl-args
    :straight t
    :config
    (require 'pcmpl-args))
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-homebrew
    :straight t
    :config
    (require 'pcmpl-homebrew))
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-pip
    :straight t
    :config
    (require 'pcmpl-pip))
#+end_src

#+begin_src emacs-lisp
  (use-package pcmpl-git
    :straight t
    :config
    (require 'pcmpl-git))
#+end_src

#+begin_src emacs-lisp
  (use-package fish-completion
    :straight t
    :custom
    (fish-completion-fallback-on-bash-p t)
    :config
    (defun actuator-fish-completion ()
      "arst"
      (when (and (executable-find "fish")
                 (require 'fish-completion nil t))
        (fish-completion-mode)))
    :hook (eshell-mode . actuator-fish-completion))
#+end_src

* Z
:PROPERTIES:
:header-args: :tangle yes :results output silent
:ID:       6A6BFA1C-6CA9-4AD8-A76B-1478A47CD9AE
:END:

#+begin_src emacs-lisp
  (use-package eshell-z
    :straight t
    :custom
    (eshell-z-freq-dir-hash-table-file-name "~/.local/share/z/data")
    :config
    (add-hook 'eshell-mode-hook
              (defun actuator-eshell-z ()
                (require 'eshell-z))))
#+end_src
