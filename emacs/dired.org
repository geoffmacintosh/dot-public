#+title: Dired
#+property: header-args :results output silent :comments link :noweb yes :tangle no

* Introduction

#+begin_src emacs-lisp :tangle yes
  (use-package dired
    :straight nil
    :config
    (require 'dired-x)
    (require 'ls-lisp)
    (require 'wdired)
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'dired-shell-command-history))
    :custom
    (dired-dwim-target t)
    (ls-lisp-use-insert-directory-program nil)
    (ls-lisp-ignore-case t)
    (ls-lisp-use-string-collate nil)
    (ls-lisp-verbosity '(links uid))
    (ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
    (ls-lisp-use-localized-time-format t)
    (dired-listing-switches "-alhG") ; Not use for ls-lisp?

    (dired-dwim-target t)
    (wdired-allow-to-change-permissions t)

    (dired-recursive-copies 'always)
    :hook (dired-mode . dired-hide-details-mode))
#+end_src

* Dired subtree

#+begin_src emacs-lisp
  (use-package dired-subtree
    :config
    :bind (:map dired-mode-map
               ("i" . dired-subtree-cycle))))
#+end_src

* Dired git info

#+begin_src emacs-lisp
  (use-package dired-git-info
    :straight t
    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))
#+end_src

* Diredfl

#+begin_src emacs-lisp
  (use-package diredfl
    :straight t
    :config
    (diredfl-global-mode 1))
#+end_src

* Dired Open

#+begin_src emacs-lisp
  (defun actuator-dired-open ()
    "Open the file at point with open."
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
           (nfiles (length files)))
      (when (or (< nfiles 8)
                (y-or-n-p (format "Really open %d files?" nfiles)))
        (dolist (file files) (start-process "open" nil "open" file)))))
  (bind-key "e" #'actuator-dired-open dired-mode-map)
#+end_src
