#+title: Org-mode

* Org

#+begin_src emacs-lisp
  (defvar org-directory "~/org")
  (use-package org
    :config
    (org-indent-mode 1)
    (add-to-list 'org-babel-default-header-args
                 '(:mkdirp . "yes"))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (shell      . t)))
    (defun actuator-update-all-dynamic-blocks ()
      "Hi"
      (org-dblock-update 1))
    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                'actuator-update-all-dynamic-blocks nil
                'make-it-local)))
    :bind
    ("C-c c" . counsel-org-capture)
    ("C-c a" . org-agenda)
    ("C-c l" . org-store-link)
    :custom
    (org-startup-folded 'content)
    (org-ellipsis "â†’")
    (org-startup-align-all-tables t)
    (org-startup-shrink-all-tables t)
    (org-startup-with-inline-images t)
    (org-startup-indented t)
    (org-hide-leading-stars t)
    (org-pretty-entities-include-sub-superscripts t)
    (org-hide-emphasis-markers t)
    (org-image-actual-width 300)
    (org-fontify-done-headline t)
    (org-structure-template-alist '(("e" . "src emacs-lisp")
                                    ("s" . "src shell")))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-closed-keep-when-no-todo t)
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies t)
    (org-complete-tags-always-offer-all-agenda-tags nil)
    (org-clone-delete-id t)
    (org-tags-column -60)
    (org-catch-invisible-edits 'show-and-error)
    (org-insert-heading-respect-content t)
    (org-ctrl-k-protect-subtree t)
    (org-M-RET-may-split-line '((default . nil)))
    (org-special-ctrl-k t)
    (org-special-ctrl-a/e t)
    (org-blank-before-new-entry '((heading         . t)
                                  (plain-list-item . auto)))
    (org-use-property-inheritance t)
    (org-modules nil)
    :hook
    (org-mode . visual-line-mode))
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-files `(,org-directory
                           ,(if (getenv "XDG_CONFIG_HOME")
                                (getenv "XDG_CONFIG_HOME")
                              "~/.config")
                           ,user-emacs-directory))
#+end_src

#+begin_src emacs-lisp
  (use-package org-capture
    :config
    (defun actuator-org-capture-turn-off-header-line ()
    "Disable the header-line in a local mode.
  This is used to disable the help line in `org-capture' buffers as
  there's no variable that will do it."
    (setq-local header-line-format nil))
    :hook (org-capture-mode . actuator-org-capture-turn-off-header-line))
#+end_src

#+begin_src emacs-lisp
  (use-package org-list
    :custom
    (org-list-indent-offset 1))
#+end_src

#+begin_src emacs-lisp
  (use-package org-keys
    :custom
    (org-use-speed-commands t))
#+end_src

#+begin_src emacs-lisp
  (use-package org-refile
    :custom
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-refile-targets '((org-agenda-files :maxlevel . 3)))
    :hook
    (midnight-mode . org-refile-get-targets))
#+end_src

#+begin_src emacs-lisp
  (use-package org-src
    :config
    (defun actuator-org-src-line-wrap-setup ()
      "Set truncate-lines-mode in org-source-editing buffers."
      (setq-local truncate-lines t))
    :custom
    (org-edit-src-persistent-message nil)
    (org-src-tab-acts-natively t)
    (org-src-window-setup 'current-window)
    (org-src-ask-before-returning-to-edit-buffer nil)
    (org-src-fontify-natively t)
    :hook (org-src-mode . actuator-org-src-line-wrap-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package org-footnote
    :custom
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline t)
    (org-footnote-auto-label 'random))
#+end_src

#+begin_src emacs-lisp
  (use-package ob-core
    :custom
    (org-confirm-babel-evaluate nil)
    (org-babel-results-keyword "results"))
#+end_src

#+begin_src emacs-lisp
  (use-package org-crypt
    :init
    (require 'org-crypt)
    :config
    (org-crypt-use-before-save-magic)
    ;;(add-to-list 'org-modules 'org-crypt)
    :custom
    (org-tags-exclude-from-inheritance (quote ("crypt")))
    (org-crypt-key nil))
#+end_src

#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :custom
    (org-agenda-sticky t)
    (org-agenda-dim-blocked-tasks t))
#+end_src

#+begin_src emacs-lisp
  (use-package org-id
    :straight nil
    :custom
    (org-id-link-to-org-use-id t)
    :hook (midnight-mode . org-id-update-id-locations))
#+end_src
* Cliplink
#+begin_src emacs-lisp
  (use-package org-cliplink
    :straight t
    :bind ("C-x p i" . org-cliplink)
    :config
    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                   `("b" "Bookmark" item (file+headline ,(expand-file-name "inbox.org" org-directory) "Bookmarks")
                     "%(org-cliplink-capture) %U"
                     :immediate-finish t))))
#+end_src

#+results:
: org-cliplink

* Attach

#+begin_src emacs-lisp
  (use-package org-attach
    :straight nil
    :custom
    (org-attach-store-link-p t)
    (org-attach-expert t)
    (org-attach-dir-relative t)
    (org-attach-preferred-new-method 'dir)
    (org-attach-method 'mv)
    (org-attach-auto-tag "attach")
    (org-attach-archive-delete 'query))
#+end_src

#+begin_src emacs-lisp
  (use-package org-download
    :straight t
    :config
    (defun actuator-org-dl-annotate (_link)
      "Minimal org-download header info."
      (format "#+DOWNLOADED: %s\n"
              (format-time-string "%Y-%m-%d")))
    :custom
    (org-download-method 'attach)
    (org-download-timestamp "")
    (org-download-annotate-function #'actuator-org-dl-annotate))
#+end_src

* Habit

#+begin_src emacs-lisp
  (use-package org-habit
    :straight nil
    :config
    (add-to-list 'org-modules 'org-habit))
#+end_src

* Clock

#+begin_src emacs-lisp
  (use-package org-clock
    :straight nil
    :init
    (org-clock-persistence-insinuate)
    :custom
    (org-clock-persist t)
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-mode-line-total 'auto))
#+end_src

#+begin_src emacs-lisp
  (use-package org-mru-clock
    :straight t
    :bind
    ("C-c C-x i" . org-mru-clock-in)
    ("C-c C-x C-j . org-mru-clock-select-recent-task")
    :custom
    (org-mru-clock-completing-read 'ivy-completing-read))
#+end_src

* Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates nil)

  ;; Journal based on todays date
  (defun actuator-make-date-file-name (path)
    "Make a filename for the current date for a given PATH."
    (expand-file-name (concat path "/" (format-time-string "%Y-%m-%d") ".org")))

  (add-to-list 'org-capture-templates
               `("d" "Date File" entry (file ,(actuator-make-date-file-name org-directory))
                 "* %<%A %e %B %Y (W%V)> %? %^G \n %i"))
  ;; Bookmark


  ;; Exercise / Hiking / Running Entry
  (add-to-list 'org-capture-templates
               `("e" "Exercise Log" entry
                 (file+datetree ,(expand-file-name "exercise-log.org" org-directory))
                 "* %<%A %e %B %Y (W%V)> %^g %^{Duration} %^{Distanc}p %^{Elevation}p %^{Pace}p \n%?"))

  ;; Reading List
  (add-to-list 'org-capture-templates
               `("r" "Reading Log" entry
                 (file ,(expand-file-name "reading-log.org" org-directory))
                 "* %^{Author Name} - %^{Series/Title} (%^{Year}) %^u %^g"))

  ;; Watch List?
  (add-to-list 'org-capture-templates
               `("w" "Watch Log" entry
                 (file ,(expand-file-name "watch-log.org" org-directory))
                 "* %^{Title} (%^{Year}) %^{series}p %^u %^g"))
#+end_src

* Todos
#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :custom
    (org-agenda-todo-list-sublevels nil))
#+end_src

* Links
#+begin_src emacs-lisp
  (use-package ol
    :straight nil
    :custom
    (org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                            (vm-imap . vm-visit-imap-folder-other-frame)
                            (gnus . org-gnus-no-new-news)
                            (file . find-file))))
#+end_src

* Agenda

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("X" agenda ""
           ((ps-number-of-columns 2)
            (ps-landscape-mode t)
            (org-agenda-prefix-format " [ ] ")
            (org-agenda-with-colors nil)
            (org-agenda-start-day "Mon")
            (org-agenda-remove-tags t))
           ("~/Desktop/theagenda.pdf"))))
  (setq org-agenda-window-setup 'only-window)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-span 'fortnight)
  (setq org-agenda-include-diary t)
  (setq org-agenda-text-search-extra-files nil)
#+end_src

#+results:

* Holidays
:PROPERTIES:
:CATEGORY: Holiday
:END:
#+begin_src emacs-lisp
  (setq holiday-islamic-holidays nil)
  ;;(setq holiday-christian-holiday nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-oriental-holidays nil)
  ;;(setq holiday-other-holidays '((lunar-phases)))
#+end_src
