#+title: Emacs Unfiled Projects

* Free Keybindings
:LOGBOOK:
- Refiled on [2020-01-30 Thu 16:56]
:END:
[2019-08-18 Sun 17:14]

- C-x C-l
- C-x C-n
- C-x C-o
- C-x C-p
- M-j (indent-new-comment-line)
- C-=:
- C-`:
- C-q: quoted-insert (USELESS)
- C-z: suspend-frame (USELESS)
- M-`: tmm-menubar (USELESS)
- M-i: tab-to-tab-stop (USELESS)


http://mbork.pl/2019-03-18_Free_Emacs_key_bindings
* Applescript Get Link

http://irreal.org/blog/?p=2895

#+begin_src emacs-lisp
  (defun jcs-get-link (link)
    “Retrieve URL from current Safari page and prompt for description.
  Insert an Org link at point.”
    (interactive “sLink Description: “)
    (let ((result (shell-command-to-string
                   “osascript -e ‘tell application \”Safari\” to return URL of document 1’”)))
      (insert (format “[[%s][%s]]” (org-trim result) link))))
#+end_src
* Set Emacs As Default Editor
#+begin_src shell
  duti -s org.gnu.Emacs com.apple.property-list all
  duti -s org.gnu.Emacs com.apple.xcode.strings-text all
  duti -s org.gnu.Emacs com.netscape.javascript-source all
  duti -s org.gnu.Emacs net.daringfireball.markdown all
  duti -s org.gnu.Emacs public.c-header all
  duti -s org.gnu.Emacs public.c-plus-plus-source all
  duti -s org.gnu.Emacs public.c-source all
  duti -s org.gnu.Emacs public.data all
  duti -s org.gnu.Emacs public.json all
  duti -s org.gnu.Emacs public.objective-c-source all
  duti -s org.gnu.Emacs public.perl-script all
  duti -s org.gnu.Emacs public.plain-text all
  duti -s org.gnu.Emacs public.precompiled-c-header all
  duti -s org.gnu.Emacs public.python-script all
  duti -s org.gnu.Emacs public.ruby-script all
  duti -s org.gnu.Emacs public.shell-script all
  duti -s org.gnu.Emacs public.swift-source all
  duti -s org.gnu.Emacs public.unix-executable all
  duti -s org.gnu.Emacs public.xml all
  duti -s org.gnu.Emacs public.yaml all
#+end_src
* Misc Bullshit

#+begin_src emacs-lisp
  (setq user-full-name "Geoff MacIntosh")
  (setq user-mail-address "geoff@mac.into.sh")
  (setq window-combination-resize t)
  (setq undo-limit (* 80 1024 1024))
  (setq calendar-latitude [47 33 north])
  (setq calendar-longitude [52 42 west])
#+end_src

#+begin_src emacs-lisp
  (use-package rg
    :straight t)
#+end_src

#+begin_src emacs-lisp
  (use-package forge
    :straight t)
#+end_src
* Dired

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :config
    (require 'dired-x)
    (require 'ls-lisp)
    (require 'wdired)
    :custom
    (ls-lisp-use-insert-directory-program nil)
    (ls-lisp-ignore-case t)
    (ls-lisp-use-string-collate nil)
    (ls-lisp-verbosity '(links uid))
    (ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
    (ls-lisp-use-localized-time-format t)
    ;;(dired-listing-switches "-alhG") ; Not use for ls-lisp?

    (dired-dwim-target t)
    (wdired-allow-to-change-permissions t)

    (dired-recursive-copies 'always)
    ;;:hook (dired-mode . dired-hide-details-mode)
    )

  (use-package dired-subtree
    :config
    (bind-keys :map dired-mode-map
               ("i" . dired-subtree-cycle)))
#+end_src

#+results:
: t

* Play YT
:PROPERTIES:
:ID:       39718615-A7FB-4609-8EEF-75C8E4B1D2DF
:END:

#+name: elfeed-play-with-mpv
#+begin_src emacs-lisp
  (defun actuator-elfeed-play-with-mpv ()
    "Play entry link with mpv."
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
          (quality-arg "")
          (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
      (setq quality-val (string-to-number quality-val))
      (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
      (when (< 0 quality-val)
        (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))
#+end_src

     ("w" . actuator-elfeed-play-with-mpv))
         <<elfeed-play-with-mpv>>

* NOV

#+begin_src emacs-lisp
  (use-package nov
    :straight t
    :config

    (defun actuator-novel-setup ()
      (face-remap-add-relative 'variable-pitch :family "Georgia"
                               :height 1.3)
      (setq-local line-spacing 1.2))
    (add-hook 'nov-mode-hook 'actuator-novel-setup)

    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    :custom
    (nov-text-width 65))
#+end_src

#+results:
: t

#+begin_src emacs-lisp
  (setq org-tag-persistent-alist '(("doing" . d) ("health" h) ("actuator" a)))
#+end_src

#+results:
: ((doing . d) (health h) (actuator a))
* Minibuffer
:PROPERTIES:
:ID:       046D7A20-7570-4D2E-B5DC-A15819096755
:END:

#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook 'actuator-minibuffer-setup)

  (defun actuator-minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((org-document-title :height 1.0))))
#+end_src

* Visual Fill Column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :config
    (global-visual-fill-column-mode 1)
    (global-visual-line-mode 1)
    :custom
    ;;(visual-line-fringe-indicators '(nil right-curly-arrow))
    (visual-fill-column-width 70))
#+end_src
* Cancel GC in Minibuffer
#+begin_src emacs-lisp
  (defun actuator-minibuffer-setup-hook ()
    (setq gc-cons-threshold (* 500 1024 1024)))

  (defun actuator-minibuffer-exit-hook ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'actuator-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook  #'actuator-minibuffer-exit-hook)
#+end_src

#+results:
| actuator-minibuffer-exit-hook |

* Delete by Moving to Trash
#+begin_src emacs-lisp
  (defun system-move-file-to-trash (file)
    "Move the file to trash via the `trash` command-line tool."
    (call-process "trash" nil nil nil file))
#+end_src

#+begin_src emacs-lisp
  (use-package emacs
    :straight nil
    :after system-packages
    :ensure-system-package trash-cli
    :custom
    (delete-by-moving-to-trash t))
#+end_src

* Titlebar
#+begin_src emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+end_src

* Server
#+begin_src emacs-lisp
  (defun actuator-running-as-server-p ()
    "Returns true if `server-start' has been called."
    (condition-case nil
        (and (boundp 'server-process)
             (memq (process-status server-process)
                   '(connect listen open run)))
      (error)))
#+end_src

#+begin_src emacs-lisp
  (use-package server
    :ensure nil
    :config
    (unless (actuator-running-as-server-p)
      (server-start)))
#+end_src

* Company
    :PROPERTIES:
    :ID:       035DE7B4-9F7F-4D38-9BEA-5BE947281CD9
    :END:
#+begin_src emacs-lisp :tangle no
  (defun mac-company-number ()
        "Forward to `company-complete-number'.

    Unless the number is potentially part of the candidate.
    In that case, insert the number."
        (interactive)
        (let* ((k (this-command-keys))
               (re (concat "^" company-prefix k)))
          (if (cl-find-if (lambda (s) (string-match re s))
                          company-candidates)
              (self-insert-command 1)
            (company-complete-number (string-to-number k)))))

      (let ((map company-active-map))
        (mapc
         (lambda (x)
           (define-key map (format "%d" x) 'mac-company-number))
         (number-sequence 0 9))
        (define-key map " " (lambda ()
                              (interactive)
                              (company-abort)
                              (self-insert-command 1)))
        (define-key map (kbd "<return>") nil))
#+end_src

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-idle-delay 0.2)
    (company-minimum-prefix-length 2)
    (company-backends
           '(company-files
             (company-capf
              company-dabbrev-code)))
    (company-require-match nil)
    (company-show-numbers t)
    :hook
    (prog-mode . company-mode))
    #+end_src

#+begin_src emacs-lisp
  (use-package company-posframe
    :if (display-graphic-p)
    :after company)
#+end_src

#+begin_src emacs-lisp
  (use-package company-prescient
    :after (company prescient))
#+end_src

* Web Dev (React / JSX)

 #+begin_src emacs-lisp
   ;;(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js-mode))
 #+end_src

 #+begin_src emacs-lisp
   (use-package prettier-js-mode
     :hook (js-mode . prettier-js-mode))
 #+end_src

 #+begin_src emacs-lisp
   (use-package js2-mode
     :hook (js-mode . js2-minor-mode)
     :custom
     (js2-strict-missing-semi-warning nil))
 #+end_src

* Prodigy

 #+begin_src emacs-lisp
   (use-package prodigy
     :config
     (prodigy-define-service
      :name "Gatsby.js"
      :command "gatsby"
      :args '("develop")
      :cwd "~/Projects/portfolio"
      :tags '(personal)
      :stop-signal 'sigkill
      :kill-process-buffer-on-stop t))
 #+end_src

* Hydra
   :PROPERTIES:
   :ID:       1340236C-B973-4C63-923E-F36C47AB65A1
   :END:
#+begin_src emacs-lisp
  (use-package hydra
    :config
    ;;(csetq hydra-hint-display-type 'lv)
)
#+end_src

* Modeline

#+begin_src emacs-lisp
  (use-package minions
    :config
    (minions-mode 1))
#+end_src

* Scratch Buffer
:PROPERTIES:
:ID:       C17636D1-9417-42DB-9252-F69F4B6832D3
:END:
[[http://www.geocrawler.com/archives/3/338/1994/6/0/1877802/][Morten Welind: recreate scratch buffer if killed]].

#+begin_src emacs-lisp
  (defun kill-scratch-buffer ()
    (set-buffer (get-buffer-create "*scratch*"))
    (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    (kill-buffer (current-buffer))
    (set-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    nil)

  (with-current-buffer (get-buffer-create "*scratch*")
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))
#+end_src

* Projectile
   :PROPERTIES:
   :ID:       6E928D94-AB52-4FC2-873D-A2D36B2EA7B3
   :END:

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c q" . projectile-find-file-in-known-projects)
    :config
    (require 'subr-x)
    (projectile-mode)
    :custom
    (projectile-switch-project-action 'counsel-projectile-find-file)
    (projectile-globally-ignored-file-suffixes '("org_archive"))
    (projectile-indexing-method 'hybrid)
    (projectile-completion-system 'ivy)
    (projectile-sort-order 'recentf))
#+end_src

But I don't /actually/ want to use projectile. I want to use projectile with fancy ivy/counsel-style completion. So I need a package that bridges the two, at least for the bindings that I actually use on a regular basis. Note that ~counsel-projectile~ is super-cool in that if I'm not in a project already, it switches projects instead. That's better.

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :bind
    ("C-x C-p" . counsel-projectile)
    ("C-c p"   . counsel-projectile-switch-project)
    ("C-c b"   . counsel-projectile-switch-to-buffer))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'midnight-hook #'projectile-cleanup-known-projects)
#+end_src

* Desktop
:PROPERTIES:
:ID:       823C17F1-623C-465C-B29D-87E994A0D8E3
:END:

#+begin_src emacs-lisp
  (use-package desktop
    :init
    (desktop-save-mode 1)
    :custom
    (desktop-file-name-format 'tilde)
    (desktop-missing-file-warning nil)
    (desktop-globals-to-clear nil))
#+end_src

* Spell check
:PROPERTIES:
:ID:       9131A2E2-EA2C-4F73-98F5-449DC0594CA0
:END:

#+begin_src emacs-lisp
  (use-package flyspell
    :straight nil
    :custom
    (flyspell-abbrev-p t)
    (flyspell-use-global-abbrev-table-p t)
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    (flyspell-mode 1))

  (use-package flyspell-correct-ivy
    :after flyspell
    :bind (:map flyspell-mode-map
          ("C-;" . flyspell-correct-word-generic))
    :custom (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src

#+begin_src emacs-lisp
  (use-package ispell
    :straight nil
    ;:ensure-system-package hunspell
    :custom
    (when (executable-find "hunspell")
      (setq-default ispell-program-name "hunspell")
      (setq ispell-really-hunspell t))
    (ispell-current-personal-dictionary "~/.dict"))
#+end_src

* Slime
   :PROPERTIES:
   :ID:       4B6E3CCE-F1A9-40A0-A729-A1715D801E93
   :END:
#+begin_src emacs-lisp :tangle no
  (use-package slime
    :ensure t
    :config
    (csetq inferior-lisp-program "/usr/local/bin/sbcl")
    (csetq slime-kill-without-query-p t)
    (csetq slime-contribs '(slime-fancy)))
#+end_src

#+begin_src emacs-lisp
  (use-package slime-repl
    :config
    (csetq slime-repl-history-size 10000)
    (csetq slime-repl-history-file (expand-file-name "slime-history.el" no-littering-var-directory)))
#+end_src

* Publishing
   :PROPERTIES:
   :ID:       AC3AC665-78F8-4EA7-8DD7-771275C175E1
   :END:
#+begin_src emacs-lisp
  (use-package ox-publish
    :config
    (add-to-list
     'org-publish-project-alist
     `("org-content"
       :base-directory ,org-directory
       :base-extension "org"
       ;;:html-link-home "/"
       :publishing-directory ,org-directory
       :publishing-function org-html-publish-to-html
       :recursive t
       :with-toc nil
       :section-numbers nil
       :with-broken-links mark
       :with-priority nil
       :with-tasks nil

       :html-doctype "html5"
       :html-html5-fancy t
       :html-head-extra nil
       :html-head-include-default-style nil
       :html-head-include-scripts nil
       :html-head "<link href=\"assets/main.css\" rel=\"stylesheet\" type=\"text/css\">"
       :html-preamble nil
       :html-postamble nil

       :sitemap-title "Org"
       :sitemap-style list
       :sitemap-filename "sitemap.org"
       :sitemap-sort-files anti-chronologically
       :auto-sitemap t)))
#+end_src

* Skeleton
:PROPERTIES:
:ID:       CFB6E1FF-EE35-47FF-ADED-99C9E564958F
:END:

#+begin_src emacs-lisp
  (define-skeleton mac-insert-org-wiki-header
    "Stuff"
    '(setq str (skeleton-read "Title: "))
    "#+title: " str \n
    "* " str \n
    _ \n
    "** Related" \n
    "** References" \n)
#+end_src

* Git Gutter
   :PROPERTIES:
   :ID:       EE7ED645-5822-4774-9CF2-F56BFBE788A8
   :END:
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config
    (global-diff-hl-mode))
#+end_src

* LaTeX
   :PROPERTIES:
   :ID:       9FC5A1C8-3895-4FA2-B582-C278E0A0196E
   :END:
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :custom
    (TeX-engine 'luatex)
    (TeX-view-program-list
     '(("Skim"
        "/Applications/Skim.app/Contents/SharedSupport/displayline %q")))
    (TeX-source-correlate-start-server t))
#+end_src

* Hot Expand

#+begin_src emacs-lisp
    (defhydra hydra-org-template (:color blue :hint nil)
       "
    _C_enter  _Q_uote     _e_macs-lisp  _I_NCLUDE:
    _l_atex   _E_xample   _s_hell       _i_ndex:
    _a_scii
    _S_rc
    _h_tml    ^ ^         ^ ^

   "
       ("S" (hot-expand "<s"))
       ("E" (hot-expand "<e"))
       ("Q" (hot-expand "<Q"))
       ("C" (hot-expand "<c"))
       ("l" (hot-expand "<l"))
       ("h" (hot-expand "<h"))
       ("a" (hot-expand "<a"))
       ("i" (hot-expand "<i"))
       ("e" (hot-expand "<s" "emacs-lisp"))
       ("s" (hot-expand "<s" "shell"))
       ("I" (hot-expand "<I"))
       ("<" self-insert-command "ins")
       ("q" nil "quit"))

     (require 'org-tempo) ; Required from org 9 onwards for old template expansion
     ;; Reset the org-template expnsion system, this is need after upgrading to org 9 for some reason
     (setq org-structure-template-alist (eval (car (get 'org-structure-template-alist 'standard-value))))
     (defun hot-expand (str &optional mod header)
       "Expand org template.

   STR is a structure template string recognised by org like <s. MOD is a
   string with additional parameters to add the begin line of the
   structure element. HEADER string includes more parameters that are
   prepended to the element after the #+HEADER: tag."
       (let (text)
         (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
           (delete-region (region-beginning) (region-end))
           (deactivate-mark))
         (when header (insert "#+HEADER: " header) (forward-line))
         (insert str)
         (org-tempo-complete-tag)
         (when mod (insert mod) (forward-line))
         (when text (insert text))))

     (define-key org-mode-map "<"
       (lambda () (interactive)
         (if (or (region-active-p) (looking-back "^" 1))
             (hydra-org-template/body)
           (self-insert-command 1))))
 #+end_src
* Eldoc
:PROPERTIES:
:ID:       71D564B4-640F-4E50-A6CE-8FD0C54F363A
:END:

[[https://www.reddit.com/r/emacs/comments/c1zl0s/weekly_tipstricketc_thread/ergullj/?context=1][Improve eldoc's documentation]]

#+begin_src emacs-lisp
  (use-package eldoc
    :custom
    (eldoc-echo-area-use-multiline-p t)
    (eldoc-idle-delay 0)
    :init
    (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
      "If SYM is a function, append its docstring."
      (require 'subr-x)
      (concat
       (apply orig-fun sym r)
       (when-let ((doc (and (fboundp sym) (documentation sym 'raw)))
                  (oneline (substring doc 0 (string-match "\n" doc))))
         (when (not (string= "" oneline))
           (concat " " (propertize oneline 'face 'italic)))))))
#+end_src
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :disabled t
    :after ivy
    :if (display-graphic-p)
    :config
    (ivy-posframe-mode 1)
    :custom
    (ivy-posframe-display-functions-alist
     '((swiper                   . nil)
       (counsel-M-x              . ivy-posframe-display-at-frame-top-center)
       (ivy-completion-in-region . ivy-posframe-display-at-point)
       (t                        . ivy-posframe-display-at-frame-top-center))))
#+end_src

* System packages

#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package
    :straight t)

  (use-package system-packages
    :straight t
    :custom
    (system-packages-use-sudo nil)
    (system-packages-package-manager 'nix))
#+end_src

* Org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :straight t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◆" "◆" "◇" "◇" "◇")))
#+end_src

* Auctex

#+begin_src emacs-lisp
  (use-package tex
    :straight auctex
    :custom
    (TeX-engine 'luatex))
#+end_src

* Made a keyboard macro

https://www.emacswiki.org/emacs/KeyboardMacros

https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html

http://ergoemacs.org/emacs/emacs_macro_example.html

C-x ( start defining a keyboard macro
C-x ) end a keyboard macro
C-u C-x ( replay macro and append keys to the definition
C-u C-u C-x ( don’t replay but append keys
C-x C-k r run the last keyboard macro on each line that begins in the region

C-x C-k n name the most recent macro
C-x C-k b bind the most recent macro to a keybinding (for the session only)
M-x insert-kbd-macro insert the most recent macro into the buffer as lisp That’s how you save it

C-x C-k 0-9 and C-x C-k A-Z are reserved for keyboard macros

#+begin_src emacs-lisp
  (fset 'actuator-make-checklist
     (kmacro-lambda-form [?\C-a ?- ?  ?\[ ?  ?\] ? ] 0 "%d"))
  (global-set-key (kbd "C-x C-k 1") #'actuator-make-checklist)
#+end_src

* Arev

#+begin_src emacs-lisp
  (use-package autorevert
    :disabled t
    :straight nil
    :config
    (global-auto-revert-mode 1)
    :custom
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    (revert-without-query t)
    (auto-revert-check-vc-info t))
#+end_src
* Cliplink custom transformers
#+begin_src emacs-lisp
  (defun actuator-org-cliplink ()
    (interactive)
    (org-cliplink-insert-transformed-title
     (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
     (lambda (url title)
       (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
              (clean-title
               (cond
                ;; if the host is github.com, cleanup the title
                ((string= (url-host parsed-url) "github.com")
                 (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
                ;; otherwise keep the original title
                (t title))))
         ;; forward the title to the default org-cliplink transformer
         (org-cliplink-org-mode-link-transformer url clean-title)))))
#+end_src

* Rsync music backup
:PROPERTIES:
:ID:       0EC091CC-29F0-4586-8776-B93136136247
:END:
#+begin_src shell
  rsync -av ~/Music/ ~/Documents/Archive/Music
#+end_src

THE SECRET WAS TO ENABLE FDA ACESS FOR ~/bin/sh~

https://www.reddit.com/r/MacOS/comments/dffpzj/launchd_agent_no_longer_functions_after_catalina/f34ykb6/

#+begin_src xml :tangle ~/Library/LaunchAgents/actuator.syncmusic.plist
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
    <dict>
      <key>Label</key>
      <string>actuator.syncmusic</string>
      <key>ProgramArguments</key>
      <array>
        <string>/bin/sh</string>
        <string>-c</string>
        <string>/usr/bin/rsync -av ~/Music/ ~/Documents/Archive/Music</string>
      </array>
      <key>StartCalendarInterval</key>
      <dict>
        <key>Hour</key>
        <integer>3</integer>
        <key>Minute</key>
        <integer>0</integer>
      </dict>
      <key>StandardInPath</key>
      <string>/tmp/test.stdin</string>
      <key>StandardOutPath</key>
      <string>/tmp/test.stdout</string>
      <key>StandardErrorPath</key>
      <string>/tmp/test.stderr</string>
    </dict>
  </plist>
#+end_src
* Working: EMMS

[[https://github.com/howardabrams/dot-files/blob/master/emacs-emms.org][dot-files/emacs-emms.org at master · howardabrams/dot-files · GitHub]]:

Perhaps the easiest approach is just to have some radio stations wrapped up in some easy-to-functions, for instance:

#+begin_src emacs-lisp
  (defun play-smooth-jazz ()
    "Start up some nice Jazz"
    (interactive)
    (emms-play-streamlist "http://thejazzgroove.com/itunes.pls"))
#+end_src

And then bind it to some key, however, I’m sure I will start picking up a larger and larger collection of radio stations that fit my mood, so I might as well create a prefix for these using my snazzy dazzy define-sequence macro:

#+begin_src emacs-lisp
  (define-sequence 'personal-music-map "<f9> m" 'emms-play-streamlist
    '(("a" "http://stereoscenic.com/pls/pill-hi-mp3.pls") ;; Ambient
      ("t" "http://www.1.fm/tunein/trance64k.pls")        ;; Trance
      ("j" "http://thejazzgroove.com/itunes.pls")))       ;; Jazz
#+end_src

* Help Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h x k") #'describe-key)
#+end_src

* iMenu on Eshell
- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

In an eshell mode hook function, one can set the imenu-generic-expression to help it find your favorite prompt:

(setq-local imenu-generic-expression
                  '(("Prompt" " $ \\(.*\\)" 1)))

* Dired extras

#+begin_src emacs-lisp
  (use-package dired-git-info
    :straight t
    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))

  (use-package diredfl
    :straight t
    :config
    (diredfl-global-mode 1))

  (use-package dired
    :hook (dired-mode . dired-hide-details-mode))
#+end_src

* Make Tramp faster

in ~/.ssh/config

#+begin_src conf
  Host *
      ControlPath ~/.ssh/master-%h:%p
      ControlMaster auto
      ControlPersist 10m
#+end_src

* Improve shell-command-history
- [[http://xenodium.com/more-reusable-emacs-shell-command-history/][A more reusable Emacs shell-command history]] [2020-05-12 Tue]

- This changes shell-command's setup so you can type $f instead of the current buffer's file name.

#+begin_src emacs-lisp
  (defun ar/adviced-read-shell-command (orig-fun &rest r)
    "Advice around `read-shell-command' to replace $f with buffer file name."
    (let ((command (apply orig-fun r)))
      (if (string-match-p "\\$f" command)
          (replace-regexp-in-string "\\$f"
                                    (or (buffer-file-name)
                                        (user-error "No file file visited to replace $f"))
                                    command)
        command)))

  (advice-add 'read-shell-command
              :around
              'ar/adviced-read-shell-command)
#+end_src

#+begin_src emacs-lisp
  (use-package savehist
    :custom
    (savehist-file "~/.emacs.d/savehist")
    (savehist-save-minibuffer-history t)
    (history-length 10000)
    (savehist-additional-variables
     '(shell-command-history))
    :config
    (savehist-mode +1))
#+end_src
* Projectile
#+begin_src emacs-lisp
  (counsel-git-grep nil nil "rg --files -g \"*%s*\"")
#+end_src

* Openwith
What others did you try?  Is there another you might recommend?

Edit: this seems to work well, found on one of the emacs wikis.

#+begin_src emacs-lisp
  (defun dired-open-file ()
    "In dired, open the file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (call-process "xdg-open" nil 0 nil file)))

  (use-package dired
    :defer t
    :bind (("C-c o" . dired-open-file)))
#+end_src

Similarly, but to save me from the pain of accidentally starting a lot of viewers if I have selected all:

#+begin_src emacs-lisp
  (defun dired-xdg-open ()
    "Open the file at point with xdg-open"
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
           (nfiles (length files)))
      (when (or (< nfiles 8)
                (y-or-n-p (format "Really open %d files?" nfiles)))
        (dolist (file files) (start-process "xdg-open" nil "xdg-open" file)))))

    (bind-key "e" #'dired-xdg-open dired-mode-map)
#+end_src

* Stop indexing node_modules

FROM ANDY
#+begin_src shell
  find . -type d -name "node_modules" -exec touch "{}/.metadata_never_index" \;
#+end_src

* Visual Line FUNCTIONS
TEXT MODE: visual-line-mode
PROG MODE: truncate-line-mode + autofill
READING MODE (like nov.el/shr/html/eww/elfeed):
variable pitch mode + visual line mode + some form of line shortening. Maybe visual-fill-column!

Nov.el:
By default text is filled by the window width. You can customize nov-text-width to a number of columns to change that: (setq nov-text-width 80)

Larger font, nice line spacing, maybe some decent visual-line-mode shit

It’s also possible to set it to t to inhibit text filling, this can be used in combination with visual-line-mode and packages such as visual-fill-column to implement more flexible filling:

#+begin_src emacs-lisp
  (setq nov-text-width t)
  (setq visual-fill-column-center-text t)
  (add-hook ‘nov-mode-hook ‘visual-line-mode)
  (add-hook ‘nov-mode-hook ‘visual-fill-column-mode)
#+end_src

Notes:
- enable autofill in org-src buffers
- Improve the toggle-truncate-lines setting

- Enable visual line mode in org-mode and Help buffers

- Have org-src auto-indent on opening an org-src buffer maybe only if it’s elisp (or maybe bind something nice to auto-indent-entire-buffer)

- It can be done by setq-default truncate-lines t or some such.
* Actuator random name
#+begin_src emacs-lisp
  (defun actuator-random-name ()
    "arst"
    (concat
     (format-time-string "%Y%m%d%H")
     "-"
     (substring (org-id-uuid) 0 2)))
  (actuator-random-name)
#+end_src
* Eshell switch-to-term buffer
#+begin_src emacs-lisp
  (defun eshell/in-term (prog &rest args)
    (switch-to-buffer
      (apply #'make-term (format "in-term %s %s" prog args) prog nil args))
    (term-mode)
    (term-char-mode))
#+end_src

https://www.reddit.com/r/emacs/comments/gksqhl/emacs_eshell_demo/
