#+title: Emacs Unfiled Projects
* Applescript Get Link

http://irreal.org/blog/?p=2895

#+begin_src emacs-lisp
  (defun jcs-get-link (link)
    “Retrieve URL from current Safari page and prompt for description.
  Insert an Org link at point.”
    (interactive “sLink Description: “)
    (let ((result (shell-command-to-string
                   “osascript -e ‘tell application \”Safari\” to return URL of document 1’”)))
      (insert (format “[[%s][%s]]” (org-trim result) link))))
#+end_src
* Set Emacs As Default Editor
#+begin_src shell
  duti -s org.gnu.Emacs com.apple.property-list all
  duti -s org.gnu.Emacs com.apple.xcode.strings-text all
  duti -s org.gnu.Emacs com.netscape.javascript-source all
  duti -s org.gnu.Emacs net.daringfireball.markdown all
  duti -s org.gnu.Emacs public.c-header all
  duti -s org.gnu.Emacs public.c-plus-plus-source all
  duti -s org.gnu.Emacs public.c-source all
  duti -s org.gnu.Emacs public.data all
  duti -s org.gnu.Emacs public.json all
  duti -s org.gnu.Emacs public.objective-c-source all
  duti -s org.gnu.Emacs public.perl-script all
  duti -s org.gnu.Emacs public.plain-text all
  duti -s org.gnu.Emacs public.precompiled-c-header all
  duti -s org.gnu.Emacs public.python-script all
  duti -s org.gnu.Emacs public.ruby-script all
  duti -s org.gnu.Emacs public.shell-script all
  duti -s org.gnu.Emacs public.swift-source all
  duti -s org.gnu.Emacs public.unix-executable all
  duti -s org.gnu.Emacs public.xml all
  duti -s org.gnu.Emacs public.yaml all
#+end_src
* Misc Bullshit

#+begin_src emacs-lisp
   (setq user-full-name "Geoff MacIntosh")
   (setq user-mail-address "geoff@mac.into.sh")
   (setq window-combination-resize t)
   (setq undo-limit (* 80 1024 1024))
#+end_src

#+begin_src emacs-lisp
  (use-package rg
    :straight t)
#+end_src

#+begin_src emacs-lisp
  (use-package forge
    :straight t)
#+end_src
* Dired

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :config
    (require 'dired-x)
    (require 'ls-lisp)
    (require 'wdired)
    :custom
    (ls-lisp-use-insert-directory-program nil)
    (ls-lisp-ignore-case t)
    (ls-lisp-use-string-collate nil)
    (ls-lisp-verbosity '(links uid))
    (ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
    (ls-lisp-use-localized-time-format t)
    (dired-listing-switches "-alhG") ; Not use for ls-lisp?

    (dired-dwim-target t)
    (wdired-allow-to-change-permissions t)

    (dired-recursive-copies 'always)
    ;;:hook (dired-mode . dired-hide-details-mode)
    )

  (use-package dired-subtree
    :config
    (bind-keys :map dired-mode-map
               ("i" . dired-subtree-cycle)))
#+end_src

#+results:
: t


* Play YT
:PROPERTIES:
:ID:       39718615-A7FB-4609-8EEF-75C8E4B1D2DF
:END:

#+name: elfeed-play-with-mpv
#+begin_src emacs-lisp
  (defun actuator-elfeed-play-with-mpv ()
    "Play entry link with mpv."
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
          (quality-arg "")
          (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
      (setq quality-val (string-to-number quality-val))
      (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
      (when (< 0 quality-val)
        (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))
#+end_src

     ("w" . actuator-elfeed-play-with-mpv))
         <<elfeed-play-with-mpv>>

* NOV

#+begin_src emacs-lisp
  (use-package nov
    :straight t
    :config

    (defun actuator-novel-setup ()
      (face-remap-add-relative 'variable-pitch :family "Georgia"
                               :height 1.3)
      (setq-local line-spacing 1.2))
    (add-hook 'nov-mode-hook 'actuator-novel-setup)

    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    :custom
    (nov-text-width 65))
#+end_src

#+results:
: t

#+begin_src emacs-lisp
  (setq org-tag-persistent-alist '(("doing" . d) ("health" h) ("actuator" a)))
#+end_src

#+results:
: ((doing . d) (health h) (actuator a))
* Emacs Keybindings
:LOGBOOK:
- Refiled on [2020-01-30 Thu 16:56]
:END:
[2019-08-18 Sun 17:14]

- C--: negative-argument
- C-=:
- C-`:
- C-a: move-beginning-of-line
- C-b: backward-char
- C-c: PREFIX
- C-d: delete-char
- C-e: move-end-of-line
- C-f: forward-char
- C-g: keyboard-quit
- C-h: help-prefix
- C-i:
- C-j: DEPENDS
- C-k: kill-line
- C-l: recenter
- C-m:
- C-n: next-line
- C-o: open-line (fix)
- C-p: previous-line
- C-q: quoted-insert (USELESS)
- C-r: isearch-backward (USELESS?)
- C-s: swiper
- C-t: transpose-chars
- C-u: universal-argument
- C-v: scroll-up-command
- C-w: kill-region
- C-x: PREFIX
- C-y: yank (FIX)
- C-z: suspend-frame (USELESS)

- M-`: tmm-menubar (USELESS)
- M--: negative-argument
- M-=: count-words-region
- M-a: backward-sentence
- M-b: backward-word
- M-c: capitalize-word (FIX)
- M-d: kill-word (FIX)
- M-e: forward-sentence
- M-f: forward-word
- M-g: PREFIX
- M-h: depends (USELESS?)
- M-i: tab-to-tab-stop (USELESS)
- M-j: default-indent-new-line (WHAT?)
- M-k: kill-sentence (FIX)
- M-l: downcase-word (FIX)
- M-m: back-to-indentation
- M-n: (USED IN LOTS OF MODES)
- M-o: PREFIX
- M-p: (USED IN LOTS OF MODES)
- M-q: fill-paragraph
- M-r: move-to-window-top-bottom
- M-s: PREFIX
- M-t: transpose-words
- M-u: upcase-word (FIX)
- M-v: scroll-down-command
- M-w: kill-ring-save (copy)
- M-x: m-x
- M-y: counsel-yank-pop
- M-z: zap-to-char

*C-x prefix*
- C-x C-b: list-buffers
- C-x d: dired
- C-x C-w: write-file
- C-x k: kill buffer
- C-x 8 RET: insert-char
- C-x o: other-window
- C-x C-;: comment line

*Prefixes*
- C-x n narrow/widen-prefix
- C-x t tabs-prefix
- C-x r rectange/register/bookmark
- C-x v version control
- C-x a abbrev

- C-x h: mark-whole-buffer
- C-x b: switch-buffer

- C-x ^: enlarge-window
- C-x -: shrink-window-if-larger-than-buffer

- C-x 0: delete-window
- C-x 1: delete-other-windows
- C-x 2: split-window-below
- C-x 3: split-window-right

- C-x 4 0: kill-buffer-and-window
- C-x 4 f/C-f: find-file-other-window
- C-x 4 b: switch-to-buffer-other-window
- C-x 4 c: clone-indirect-buffer-other-window
- C-x 4 a: add-change-log-entry-other-window
- C-x 4 d: dired-other-window

- C-x 5 0: delete frame
- C-x 5 1: delete-other-frames
- C-x 5 2: make-frame-command
- C-x 5 o: other-frame
- C-x 5 d: dired-other-frame
- C-x 5 f or C-x 5 C-f: find-file-other-frame
- C-x 5 C-o: display-buffer-other-frame
- C-x 5 b: switch-to-buffer-other-frame

*Window Controls Basics*
- 0: Delete
- 1: Delete Other
- 2: Create
- f: Open (find-file)
- b: Buffer
- d: Dired
- o: Other

- 4: Window / Panel Commands
- 5: Frame
- 6: Tab (My choice)


- C-x t 2: tab-new
- C-x t m: tab-move
- C-x t o: tab-next
- C-x t 0: tab-close
- C-x t r: tab-rename
- C-x t 1: tab-close-other
- C-x t d: dired-other-tab
- C-x t f/C-f: find-file-other-tab
- C-x t RET: tab-bar-select-tab-by-name
- C-x t b: switch-to-buffer-other-tab

*C-c prefix*

*M-g prefix*

*M-o prefix*

*M-s prefix*

- C-x C-l (downcase-region)
- C-x C-n (set-goal-column)
- C-x C-o (delete-blank-lines)
- C-x C-p (mark-page)
- C-x C-r (find-file-read-only)
- C-o (open-line)

http://mbork.pl/2019-03-18_Free_Emacs_key_bindings
* Colours
* Theme
:PROPERTIES:
:ID:       1D1D65DF-9D51-4709-B02C-E98A6E94C60E
:END:

#+begin_src emacs-lisp
  (deftheme actuator)

  (let ((blue  "#29BEEA")
        (white "#FFFFFF")
        (dark  "#000000")
        (cyan  "#00FFFF")
        (red   "#8b0000")
        (grey  "#484e55")
        (lgrey "#bdc4cc")

        (highlight-dim "#B1F8FF")
        (code-background "#FFFFFF")

        (xgrey "#F5F6F8")
        (xbord "#EDF0F4"))

    (custom-theme-set-faces
     `actuator
     `(fixed-pitch ((t (:family "SF Mono"))))
     `(variable-pitch ((t (:family "SF Pro Text" :weight light))))
     `(default ((t (:background ,white :foreground ,dark))))
     `(cursor ((t (:background ,blue))))
     `(fringe ((t (:background ,white))))
     `(region ((t (:background ,highlight-dim))))
     `(highlight ((t (:background nil))))

     `(font-lock-builtin-face ((t (:weight bold))))
     `(font-lock-constant-face ((t (:weight bold))))
     `(font-lock-function-name-face ((t (:weight bold))))
     `(font-lock-keyword-face ((t (:weight bold))))
     `(font-lock-variable-name-face ((t (:weight bold))))
     `(font-lock-type-face ((t (:weight bold))))
     `(font-lock-string-face ((t (:weight thin))))

     `(font-lock-warning-face ((t (:foreground ,red))))
     `(font-lock-comment-face ((t (:weight thin))))
     `(font-lock-comment-delimiter-face ((t (:weight thin))))

     `(org-drawer ((t (:foreground ,lgrey))))
     `(org-special-keyword ((t (:inherit org-drawer
                                         :foreground ,dark))))
     `(org-block ((t (:background ,code-background :extend t))))
     `(org-block-begin-line ((t :inherit org-block)))
     `(link ((t :foreground ,dark
                :underline t)))
     `(org-document-title ((t (:foreground ,dark
                               :height 220))))


     `(mode-line ((t (:box (:line-width 5
                                        :color ,xgrey)
                           :underline nil
                           :overline ,xbord
                           :foreground ,dark
                           :background ,xgrey
                           :inherit variable-pitch
                           :height 140))))
     `(mode-line-inactive ((t (:inherit mode-line
                               :foreground ,lgrey))))


     ))

  (provide-theme 'actuator)

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; End:

  ;;; actuator-theme.el ends here
#+end_src

#+results:
: actuator-theme
* Minibuffer
:PROPERTIES:
:ID:       046D7A20-7570-4D2E-B5DC-A15819096755
:END:

#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook 'actuator--minibuffer-setup)

  (defun actuator--minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((org-document-title :height 1.0))))
#+end_src
* Modeline
* Porp
- Test
- _Test_
- *Test*
- /Test/
- +Test+
* Quick Notes
- Fringe
- Company dropdown menus
- Modeline
- Minibuffer/posframe/crap
- MOAR HYDRAS/ make integrated
- Titlebar
- The dot in the stoplight means unsaved changes, don't need any more indications
- Would be neat to have a good list of minor modes
- All-the-icons!
- Async?
- Lots of org-tweaks
- Possible variable-pitch? Maybe actually a bad idea.
- Variable pitch options for sidebar (treemacs?) and modeline. Minibuffer? Probably not.
-
* Disabled
** Visual Fill Column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :config
    (global-visual-fill-column-mode 1)
    (global-visual-line-mode 1)
    :custom
    ;;(visual-line-fringe-indicators '(nil right-curly-arrow))
    (visual-fill-column-width 70))
#+end_src
** Cancel GC in Minibuffer
#+begin_src emacs-lisp
  (defun actuator-minibuffer-setup-hook ()
    (setq gc-cons-threshold (* 500 1024 1024)))

  (defun actuator-minibuffer-exit-hook ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'actuator-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook  #'actuator-minibuffer-exit-hook)
#+end_src

** Delete by Moving to Trash
#+begin_src emacs-lisp
  (defun system-move-file-to-trash (file)
    "Move the file to trash via the `trash` command-line tool."
    (call-process "trash" nil nil nil file))
#+end_src

#+begin_src emacs-lisp
  (use-package emacs
    :straight nil
    :after system-packages
    :ensure-system-package trash-cli
    :custom
    (delete-by-moving-to-trash t))
#+end_src

** Titlebar
#+begin_src emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+end_src

** Server
#+begin_src emacs-lisp
  (defun actuator-running-as-server-p ()
    "Returns true if `server-start' has been called."
    (condition-case nil
        (and (boundp 'server-process)
             (memq (process-status server-process)
                   '(connect listen open run)))
      (error)))
#+end_src

#+begin_src emacs-lisp
  (use-package server
    :ensure nil
    :config
    (unless (actuator-running-as-server-p)
      (server-start)))
#+end_src

** Company
    :PROPERTIES:
    :ID:       035DE7B4-9F7F-4D38-9BEA-5BE947281CD9
    :END:
#+begin_src emacs-lisp :tangle no
  (defun mac-company-number ()
        "Forward to `company-complete-number'.

    Unless the number is potentially part of the candidate.
    In that case, insert the number."
        (interactive)
        (let* ((k (this-command-keys))
               (re (concat "^" company-prefix k)))
          (if (cl-find-if (lambda (s) (string-match re s))
                          company-candidates)
              (self-insert-command 1)
            (company-complete-number (string-to-number k)))))

      (let ((map company-active-map))
        (mapc
         (lambda (x)
           (define-key map (format "%d" x) 'mac-company-number))
         (number-sequence 0 9))
        (define-key map " " (lambda ()
                              (interactive)
                              (company-abort)
                              (self-insert-command 1)))
        (define-key map (kbd "<return>") nil))
#+end_src

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-idle-delay 0.2)
    (company-minimum-prefix-length 2)
    (company-backends
           '(company-files
             (company-capf
              company-dabbrev-code)))
    (company-require-match nil)
    (company-show-numbers t)
    :hook
    (prog-mode . company-mode))
    #+end_src

#+begin_src emacs-lisp
  (use-package company-posframe
    :if (display-graphic-p)
    :after company)
#+end_src

#+begin_src emacs-lisp
  (use-package company-prescient
    :after (company prescient))
#+end_src

** Web Dev (React / JSX)

 #+begin_src emacs-lisp
   ;;(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js-mode))
 #+end_src

 #+begin_src emacs-lisp
   (use-package prettier-js-mode
     :hook (js-mode . prettier-js-mode))
 #+end_src

 #+begin_src emacs-lisp
   (use-package js2-mode
     :hook (js-mode . js2-minor-mode)
     :custom
     (js2-strict-missing-semi-warning nil))
 #+end_src

** Prodigy

 #+begin_src emacs-lisp
   (use-package prodigy
     :config
     (prodigy-define-service
      :name "Gatsby.js"
      :command "gatsby"
      :args '("develop")
      :cwd "~/Projects/portfolio"
      :tags '(personal)
      :stop-signal 'sigkill
      :kill-process-buffer-on-stop t))
 #+end_src

** Hydra
   :PROPERTIES:
   :ID:       1340236C-B973-4C63-923E-F36C47AB65A1
   :END:
#+begin_src emacs-lisp
  (use-package hydra
    :config
    ;;(csetq hydra-hint-display-type 'lv)
)
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package minions
    :config
    (minions-mode 1))
#+end_src

** Scratch Buffer
:PROPERTIES:
:ID:       C17636D1-9417-42DB-9252-F69F4B6832D3
:END:
[[http://www.geocrawler.com/archives/3/338/1994/6/0/1877802/][Morten Welind: recreate scratch buffer if killed]].

#+begin_src emacs-lisp
  (defun kill-scratch-buffer ()
    (set-buffer (get-buffer-create "*scratch*"))
    (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    (kill-buffer (current-buffer))
    (set-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    nil)

  (with-current-buffer (get-buffer-create "*scratch*")
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))
#+end_src

** Projectile
   :PROPERTIES:
   :ID:       6E928D94-AB52-4FC2-873D-A2D36B2EA7B3
   :END:

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c q" . projectile-find-file-in-known-projects)
    :config
    (require 'subr-x)
    (projectile-mode)
    :custom
    (projectile-switch-project-action 'counsel-projectile-find-file)
    (projectile-globally-ignored-file-suffixes '("org_archive"))
    (projectile-indexing-method 'hybrid)
    (projectile-completion-system 'ivy)
    (projectile-sort-order 'recentf))
#+end_src

But I don't /actually/ want to use projectile. I want to use projectile with fancy ivy/counsel-style completion. So I need a package that bridges the two, at least for the bindings that I actually use on a regular basis. Note that ~counsel-projectile~ is super-cool in that if I'm not in a project already, it switches projects instead. That's better.

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :bind
    ("C-x C-p" . counsel-projectile)
    ("C-c p"   . counsel-projectile-switch-project)
    ("C-c b"   . counsel-projectile-switch-to-buffer))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'midnight-hook #'projectile-cleanup-known-projects)
#+end_src

** Desktop
:PROPERTIES:
:ID:       823C17F1-623C-465C-B29D-87E994A0D8E3
:END:

#+begin_src emacs-lisp
  (use-package desktop
    :init
    (desktop-save-mode 1)
    :custom
    (desktop-file-name-format 'tilde)
    (desktop-missing-file-warning nil)
    (desktop-globals-to-clear nil))
#+end_src

** Spell check
:PROPERTIES:
:ID:       9131A2E2-EA2C-4F73-98F5-449DC0594CA0
:END:

#+begin_src emacs-lisp
  (use-package flyspell
    :straight nil
    :custom
    (flyspell-abbrev-p t)
    (flyspell-use-global-abbrev-table-p t)
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    (flyspell-mode 1))

  (use-package flyspell-correct-ivy
    :after flyspell
    :bind (:map flyspell-mode-map
          ("C-;" . flyspell-correct-word-generic))
    :custom (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src

#+begin_src emacs-lisp
  (use-package ispell
    :straight nil
    ;:ensure-system-package hunspell
    :custom
    (when (executable-find "hunspell")
      (setq-default ispell-program-name "hunspell")
      (setq ispell-really-hunspell t))
    (ispell-current-personal-dictionary "~/.dict"))
#+end_src

** Slime
   :PROPERTIES:
   :ID:       4B6E3CCE-F1A9-40A0-A729-A1715D801E93
   :END:
#+begin_src emacs-lisp :tangle no
  (use-package slime
    :ensure t
    :config
    (csetq inferior-lisp-program "/usr/local/bin/sbcl")
    (csetq slime-kill-without-query-p t)
    (csetq slime-contribs '(slime-fancy)))
#+end_src

#+begin_src emacs-lisp
  (use-package slime-repl
    :config
    (csetq slime-repl-history-size 10000)
    (csetq slime-repl-history-file (expand-file-name "slime-history.el" no-littering-var-directory)))
#+end_src

** Publishing
   :PROPERTIES:
   :ID:       AC3AC665-78F8-4EA7-8DD7-771275C175E1
   :END:
#+begin_src emacs-lisp
  (use-package ox-publish
    :config
    (add-to-list
     'org-publish-project-alist
     `("org-content"
       :base-directory ,org-directory
       :base-extension "org"
       ;;:html-link-home "/"
       :publishing-directory ,org-directory
       :publishing-function org-html-publish-to-html
       :recursive t
       :with-toc nil
       :section-numbers nil
       :with-broken-links mark
       :with-priority nil
       :with-tasks nil

       :html-doctype "html5"
       :html-html5-fancy t
       :html-head-extra nil
       :html-head-include-default-style nil
       :html-head-include-scripts nil
       :html-head "<link href=\"assets/main.css\" rel=\"stylesheet\" type=\"text/css\">"
       :html-preamble nil
       :html-postamble nil

       :sitemap-title "Org"
       :sitemap-style list
       :sitemap-filename "sitemap.org"
       :sitemap-sort-files anti-chronologically
       :auto-sitemap t)))
#+end_src

** Skeleton
:PROPERTIES:
:ID:       CFB6E1FF-EE35-47FF-ADED-99C9E564958F
:END:

#+begin_src emacs-lisp
  (define-skeleton mac-insert-org-wiki-header
    "Stuff"
    '(setq str (skeleton-read "Title: "))
    "#+title: " str \n
    "* " str \n
    _ \n
    "** Related" \n
    "** References" \n)
#+end_src

** Git Gutter
   :PROPERTIES:
   :ID:       EE7ED645-5822-4774-9CF2-F56BFBE788A8
   :END:
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config
    (global-diff-hl-mode))
#+end_src

** LaTeX
   :PROPERTIES:
   :ID:       9FC5A1C8-3895-4FA2-B582-C278E0A0196E
   :END:
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :custom
    (TeX-engine 'luatex)
    (TeX-view-program-list
     '(("Skim"
        "/Applications/Skim.app/Contents/SharedSupport/displayline %q")))
    (TeX-source-correlate-start-server t))
#+end_src

** Ibuffer
#+begin_src emacs-lisp
    (use-package ibuffer
      :straight nil
      :bind ("C-x C-b" . ibuffer)
      :custom
      (ibuffer-expert t)
      (ibuffer-show-empty-filter-groups nil)
      (ibuffer-saved-filter-groups
       '(("home"
          ("Magit"     (name . "magit"))
          ("Help"  (or (name . "\*Help\*")
                       (name . "\*Apropos\*")
                       (name . "\*info\*")))
          ("Src"       (name . "\*Org Src"))
          ("Dired"     (mode . "Dired"))
          ("Misc"  (or ;;(name . "\*scratch\*")
                       ;;(name . "\*Messages\*")
                       ;;(name . "\*Backtrace\*")
                       (name . "^\\*.*\\*$")
                       )))))
      :hook
      (ibuffer-mode . (lambda ()
                        (ibuffer-auto-mode 1)
                        (ibuffer-switch-to-saved-filter-groups "home")
                        ;;(visual-line-mode -1)
                        (toggle-truncate-lines +1)
  ))
      )
#+end_src

** Hot Expand

#+begin_src emacs-lisp
    (defhydra hydra-org-template (:color blue :hint nil)
       "
    _C_enter  _Q_uote     _e_macs-lisp  _I_NCLUDE:
    _l_atex   _E_xample   _s_hell       _i_ndex:
    _a_scii
    _S_rc
    _h_tml    ^ ^         ^ ^

   "
       ("S" (hot-expand "<s"))
       ("E" (hot-expand "<e"))
       ("Q" (hot-expand "<Q"))
       ("C" (hot-expand "<c"))
       ("l" (hot-expand "<l"))
       ("h" (hot-expand "<h"))
       ("a" (hot-expand "<a"))
       ("i" (hot-expand "<i"))
       ("e" (hot-expand "<s" "emacs-lisp"))
       ("s" (hot-expand "<s" "shell"))
       ("I" (hot-expand "<I"))
       ("<" self-insert-command "ins")
       ("q" nil "quit"))

     (require 'org-tempo) ; Required from org 9 onwards for old template expansion
     ;; Reset the org-template expnsion system, this is need after upgrading to org 9 for some reason
     (setq org-structure-template-alist (eval (car (get 'org-structure-template-alist 'standard-value))))
     (defun hot-expand (str &optional mod header)
       "Expand org template.

   STR is a structure template string recognised by org like <s. MOD is a
   string with additional parameters to add the begin line of the
   structure element. HEADER string includes more parameters that are
   prepended to the element after the #+HEADER: tag."
       (let (text)
         (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
           (delete-region (region-beginning) (region-end))
           (deactivate-mark))
         (when header (insert "#+HEADER: " header) (forward-line))
         (insert str)
         (org-tempo-complete-tag)
         (when mod (insert mod) (forward-line))
         (when text (insert text))))

     (define-key org-mode-map "<"
       (lambda () (interactive)
         (if (or (region-active-p) (looking-back "^" 1))
             (hydra-org-template/body)
           (self-insert-command 1))))
 #+end_src
** Eldoc
:PROPERTIES:
:ID:       71D564B4-640F-4E50-A6CE-8FD0C54F363A
:END:

[[https://www.reddit.com/r/emacs/comments/c1zl0s/weekly_tipstricketc_thread/ergullj/?context=1][Improve eldoc's documentation]]

#+begin_src emacs-lisp
  (use-package eldoc
    :custom
    (eldoc-echo-area-use-multiline-p t)
    (eldoc-idle-delay 0)
    :init
    (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
      "If SYM is a function, append its docstring."
      (require 'subr-x)
      (concat
       (apply orig-fun sym r)
       (when-let ((doc (and (fboundp sym) (documentation sym 'raw)))
                  (oneline (substring doc 0 (string-match "\n" doc))))
         (when (not (string= "" oneline))
           (concat " " (propertize oneline 'face 'italic)))))))
#+end_src
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :disabled t
    :after ivy
    :if (display-graphic-p)
    :config
    (ivy-posframe-mode 1)
    :custom
    (ivy-posframe-display-functions-alist
     '((swiper                   . nil)
       (counsel-M-x              . ivy-posframe-display-at-frame-top-center)
       (ivy-completion-in-region . ivy-posframe-display-at-point)
       (t                        . ivy-posframe-display-at-frame-top-center))))
#+end_src
