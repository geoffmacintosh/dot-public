#+title: Built-in
#+property: header-args :results output silent :comments link :padline true :noweb yes

* Header

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

#+begin_src emacs-lisp
  (declare-function csetq "init")
#+end_src

* Unfiled Settings

From  emacs-plus:

#+begin_src emacs-lisp
  ;; C source code
  (csetq frame-resize-pixelwise t)
#+end_src


#+begin_src emacs-lisp
  (global-unset-key (kbd "<C-wheel-down>"))
  (global-unset-key (kbd "<C-wheel-up>"))
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
#+end_src

#+begin_src emacs-lisp
  (csetq help-window-select t) ; Select help window by default
  (csetq jit-lock-defer-time 0) ; Delay font-lock if its slow
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "M-o") #'other-window)

  (delete-selection-mode t)
  (midnight-mode 1)
  (csetq sentence-end-double-space nil)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (add-hook 'before-save-hook 'whitespace-cleanup)

  (csetq indent-tabs-mode nil) ; Never insert tabs with tab key
  (csetq require-final-newline t)

  (save-place-mode 1)

  (csetq backup-by-copying    t)
  (csetq delete-old-versions  t)
  (csetq kept-new-versions    50)
  (csetq kept-old-versions    5) ; I don't know what an old version is
  (csetq version-control      t)
  (csetq vc-make-backup-files t)

  (csetq uniquify-buffer-name-style 'forward) ; Like a path, the way that makes sense
  (csetq uniquify-separator "/")
  (csetq uniquify-after-kill-buffer-p t)
  (csetq uniquify-ignore-buffers-re "^\\*")
  (csetq uniquify-strip-common-suffix nil)

  (csetq find-file-visit-truename nil) ; Don't resolve symlinks
  (csetq confirm-kill-emacs 'y-or-n-p)

  ;;(abbrev-mode)
  (setq-default abbrev-mode t)
  (csetq save-abbrevs 'silently)

  (csetq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)

  (csetq history-length 10000)
  (csetq history-delete-duplicates t)
  (csetq message-log-max 10000)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-defun  'disabled nil)

  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)

  (defun display-startup-echo-area-message ()
    "Remove the GNU info from the minibuffer on startup.
  All you have to do is create a function with this name.  It's
  called automatically."
    (message ""))

  (setq default-frame-alist
        '((ns-transparent-titlebar . t)
          (ns-appearance           . 'light)))

  (setq truncate-partial-width-windows nil)
  (toggle-truncate-lines 1) ; Don't wrap lines by default (overridden a lot)

  (setq completion-styles
        '(fuzzy
          basic
          partial-completion
          substring
          initials
          emacs22))

  (defun actuator-font-exists-p (font)
    "Return non-nil if FONT is loaded."
    (member font (font-family-list)))

  (defun actuator-frame-init (&optional _frame)
    "Initialize per-frame variables.
  These variables need to be set every time a frame is created."
    (when (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (when (fboundp 'tooltip-mode)    (tooltip-mode    -1))
    (when (and (not (display-graphic-p))
               (fboundp 'menu-bar-mode))
      (menu-bar-mode   -1))
    (when (actuator-font-exists-p "SF Mono")
      (set-frame-font "SF Mono-14" nil t)))

  (add-hook 'after-make-frame-functions 'actuator-frame-init)
  (actuator-frame-init)
#+end_src

#+begin_src emacs-lisp
  (auto-save-mode)
#+end_src

* Org

#+begin_src emacs-lisp
  (defvar org-directory "~/org")
  (use-package org
    :config
    (org-indent-mode 1)
    (add-to-list 'org-babel-default-header-args
                 '(:mkdirp . "yes"))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (shell      . t)))
    (defun actuator-update-all-dynamic-blocks ()
      "Hi"
      (org-dblock-update 1))
    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                'actuator-update-all-dynamic-blocks nil
                'make-it-local)))
    :bind
    ("C-c c" . counsel-org-capture)
    ("C-c a" . org-agenda)
    ("C-c l" . org-store-link)
    :custom
    (org-startup-folded 'content)
    (org-ellipsis "→")
    (org-startup-align-all-tables t)
    (org-startup-shrink-all-tables t)
    (org-startup-with-inline-images t)
    (org-startup-indented t)
    (org-hide-leading-stars t)
    (org-pretty-entities-include-sub-superscripts t)
    (org-hide-emphasis-markers t)
    (org-image-actual-width 300)
    (org-fontify-done-headline t)
    (org-structure-template-alist '(("e" . "src emacs-lisp")
                                    ("s" . "src shell")))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-closed-keep-when-no-todo t)
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies t)
    (org-complete-tags-always-offer-all-agenda-tags nil)
    (org-clone-delete-id t)
    (org-tags-column -60)
    (org-catch-invisible-edits 'show-and-error)
    (org-insert-heading-respect-content t)
    (org-ctrl-k-protect-subtree t)
    (org-M-RET-may-split-line '((default . nil)))
    (org-special-ctrl-k t)
    (org-special-ctrl-a/e t)
    ;;(org-agenda-files (list org-directory))
    (org-blank-before-new-entry '((heading         . t)
                                  (plain-list-item . auto)))
    (org-use-property-inheritance t)
    (org-modules nil)
    :hook
    (org-mode . visual-line-mode))
#+end_src

#+begin_src emacs-lisp
    (setq org-agenda-files `(,org-directory
                             "~/.config"
                             "~/.config/emacs"))
#+end_src

#+begin_src emacs-lisp
  (use-package org-capture
    :config
    (defun actuator-org-capture-turn-off-header-line ()
    "Disable the header-line in a local mode.
  This is used to disable the help line in `org-capture' buffers as
  there's no variable that will do it."
    (setq-local header-line-format nil))
    :hook (org-capture-mode . actuator-org-capture-turn-off-header-line))
#+end_src

#+begin_src emacs-lisp
  (use-package org-list
    :custom
    (org-list-indent-offset 1))
#+end_src

#+begin_src emacs-lisp
  (use-package org-keys
    :custom
    (org-use-speed-commands t))
#+end_src

#+begin_src emacs-lisp
  (use-package org-refile
    :custom
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-refile-targets '((org-agenda-files :maxlevel . 3)))
    :hook
    (midnight-mode . org-refile-get-targets))
#+end_src

#+begin_src emacs-lisp
  (use-package org-src
    :config
    (defun actuator-org-src-line-wrap-setup ()
      "Set truncate-lines-mode in org-source-editing buffers."
      (setq-local truncate-lines t))
    :custom
    (org-edit-src-persistent-message nil)
    (org-src-tab-acts-natively t)
    (org-src-window-setup 'current-window)
    (org-src-ask-before-returning-to-edit-buffer nil)
    (org-src-fontify-natively t)
    :hook (org-src-mode . actuator-org-src-line-wrap-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package org-footnote
    :custom
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline t)
    (org-footnote-auto-label 'random))
#+end_src

#+begin_src emacs-lisp
  (use-package ob-core
    :custom
    (org-confirm-babel-evaluate nil)
    (org-babel-results-keyword "results"))
#+end_src

#+begin_src emacs-lisp
  (use-package org-crypt
    :init
    (require 'org-crypt)
    :config
    (org-crypt-use-before-save-magic)
    ;;(add-to-list 'org-modules 'org-crypt)
    :custom
    (org-tags-exclude-from-inheritance (quote ("crypt")))
    (org-crypt-key nil))
#+end_src

#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :custom
    (org-agenda-sticky t)
    (org-agenda-dim-blocked-tasks t))
#+end_src

#+begin_src emacs-lisp
  (use-package org-id
    :straight nil
    :custom
    (org-id-link-to-org-use-id t)
    :hook (midnight-mode . org-id-update-id-locations))
#+end_src

* Misc

#+begin_src emacs-lisp
  (use-package recentf
    :init
    (recentf-mode)
    :bind ("C-x C-r" . recentf-open-files)
    :custom
    (recentf-max-saved-items 500)
    (recentf-exclude `(,no-littering-var-directory
                       ,no-littering-etc-directory))
    :hook (midnight-mode . recentf-cleanup))
#+end_src

#+begin_src emacs-lisp
  (load-theme 'actuator t)

  (blink-cursor-mode -1)
  (csetq cursor-type 'box)

  (csetq scroll-conservatively 101) ; Move the buffer just enough to display point, but no more
  (csetq scroll-margin 0)
  (csetq mouse-wheel-scroll-amount '(1))

  (csetq inhibit-startup-message t)
  (csetq initial-scratch-message "")
#+end_src

#+begin_src emacs-lisp
  (use-package xt-mouse
    :straight nil
    :unless window-system
    :config
    (require 'mouse)
    (xterm-mouse-mode t)
    (defun track-mouse (_e))
    :custom
    (mouse-sel-mode t))
#+end_src

#+begin_src emacs-lisp
  (use-package locate
    :straight nil
    :custom
    (locate-command "mdfind"))
#+end_src

#+begin_src emacs-lisp
  (use-package flymake
    :straight nil
    :hook (emacs-lisp-mode . flymake-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package cus-edit
    :straight nil
    :after no-littering
    :custom
    (custom-file (expand-file-name "custom.el" no-littering-var-directory))
    :config
    (load custom-file 'noerror))
#+end_src

#+begin_src emacs-lisp
  (use-package autorevert
    :disabled t
    :straight nil
    :config
    (global-auto-revert-mode 1)
    :custom
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    (revert-without-query t)
    (auto-revert-check-vc-info t))
#+end_src

#+begin_src emacs-lisp
  (use-package vc-hooks
    :custom
    (vc-handled-backends nil))
#+end_src

#+begin_src emacs-lisp
  (use-package savehist
    :straight nil
    :config
    (savehist-mode)
    :custom
    (savehist-save-minibuffer-history t)
    (savehist-additional-variables
     '(mark-ring
       kill-ring
       Info-history-list
       last-kbd-macro
       kmacro-ring
       register-alist
       global-mark-ring
       regexp-search-ring
       file-name-history
       shell-command-history
       compile-history
       command-history
       extended-command-history)))
#+end_src

#+begin_src emacs-lisp
  (use-package paren
    :straight nil
    :config
    (show-paren-mode)
    (electric-pair-mode 1)
    :custom
    (blink-matching-paren nil)
    (show-paren-delay 0)
    (show-paren-style 'mixed))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'actuator-startup-profile)

  (defun actuator-startup-profile ()
    "Displays startup time garbage collections in the modeline."
    (message "Emacs ready in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-unfill-paragraph ()
    "Unfills a paragraph."
    (interactive)
    (let ((fill-column 'most-positive-fixed-num))
      (fill-paragraph)))
  (global-set-key (kbd "C-M-q") 'actuator-unfill-paragraph)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-just-one-space ()
    "Insert just one space, killing ALL whitespace."
    (interactive)
    (just-one-space -1))

  (global-set-key (kbd "<M-SPC>") 'actuator-just-one-space)
#+end_src

#+begin_src emacs-lisp
  (use-package eshell
    :straight nil
    :config
    (defalias 'eshell/f  'find-file-other-window)
    (defalias 'eshell/ff 'find-file)
    (defalias 'eshell/v  'view-file-other-window)
    (defalias 'eshell/vv 'view-file)

    (defun actuator-fish-path (path max-len)
      "Return a potentially trimmed-down version of the directory
   PATH, replacing parent directories with their initial characters
   to try to get the character length of PATH (sans directory
   slashes) down to MAX-LEN."
      (let* ((components (split-string (abbreviate-file-name path) "/"))
             (len (+ (1- (length components))
                     (cl-reduce '+ components :key 'length)))
             (str ""))
        (while (and (> len max-len)
                    (cdr components))
          (setq str (concat str
                            (cond ((= 0 (length (car components))) "/")
                                  ((= 1 (length (car components)))
                                   (concat (car components) "/"))
                                  (t
                                   (if (string= "."
                                                (string (elt (car
                                                components) 0)))
                                       (concat (substring (car components) 0 2)
                                               "/")
                                     (string (elt (car components) 0) ?/)))))
                len (- len (1- (length (car components))))
                components (cdr components)))
        (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))

    (defun actuator-eshell-autocomplete ()
      "Enable tab autocompletion in eshell."
      (define-key
        eshell-mode-map (kbd "<tab>")
        (lambda () (interactive) (pcomplete-std-complete))))

    (defun actuator-eshell-prompt ()
      (concat
       (propertize
        (actuator-fish-path (eshell/pwd) 1) 'face `(:foreground "grey" ))
       (propertize
        (if (= (user-uid) 0)
            " # "
          " ❯ ") 'face `(:foreground "black"))))

    :custom
    (eshell-where-to-jump 'begin)
    (eshell-review-quick-commands nil)
    (eshell-smart-space-goes-to-end t)
    (eshell-hist-ignoredups t)
    (eshell-history-size 10000)
    (eshell-banner-message "")
    (eshell-prompt-function #'actuator-eshell-prompt)
    (eshell-highlight-prompt nil)
    (eshell-prompt-regexp "^.*?[#❯] ")
    :hook
    (eshell-mode . (lambda ()
                     (require 'em-smart)
                     (eshell-smart-initialize)))
    (eshell-mode . actuator-eshell-autocomplete))

  ;;:hook (eshell-mode . actuator-eshell-autocomplete)
#+end_src

#+begin_src emacs-lisp

#+end_src
* Packages
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :hook (after-init . exec-path-from-shell-initialize))
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :after exec-path-from-shell
    :bind ("C-c g" . magit-status)
    :custom
    (magit-diff-refine-hunk 'all)
    (magit-save-repository-buffers 'dontask)
    (magit-section-initial-visibility-alist
     '((untracked . show)
       (unstaged  . show)
       (upushed   . show)
       ;;    (unpulled  . show)
       ;;    (stashes   . show)
       (recent    . show)))
    (magit-push-always-verify nil)
    (magit-repository-directories '(("~/org" . 0)
                                    ("~/.config" . 0)))
    (magit-revert-buffers 'silent)
    (magit-no-confirm '(stage-all-changes
                        unstage-all-changes))
    :config
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen)))
#+end_src
* Skeleton
You can define a skeleton to expand as an abbrev expansion. Add it to the list via ~M-x edit-abbrevs~ as shown here

#+begin_example
  (c-mode-abbrev-table)
  "example" 0 "" example-skeleton
#+end_example

In this, the abbrev is added to C-mode, it is invoked when you type "example," it runs the skeleton defined ~example-skeleton~ and has been run zero times.

*References*
- [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Skeletons-as-Abbrevs.html][GNU Manual]] [2020-04-26 Sun]

#+begin_src emacs-lisp
  (define-skeleton use-package-skeleton
    "Insert use-package template."
    "Package name: "
    "(use-package " str "\n  :straight nil\n " _ "  :custom)")
#+end_src
* Installs
#+begin_src emacs-lisp
  (use-package fish-mode
    :straight t)
  (use-package gitconfig-mode
    :straight t)
  (use-package gitignore-mode
    :straight t)
  (use-package lua-mode
    :straight t)
  (use-package toml-mode
    :straight t)
  (use-package yaml-mode
    :straight t)
#+end_src
* Fix savehist
1. Quick fixes:

   ;; the issue could be that save-interprogram-paste-before-kill means a large clipboard which becomes part of savehist:

https://github.com/syl20bnr/spacemacs/issues/9409


#+begin_src emacs-lisp
  (setq history-length 1000)
  (put 'minibuffer-history 'history-length 100)
  (put 'kill-ring 'history-length 25)
  (setq save-interprogram-paste-before-kill nil)
#+end_src

#+results:

https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist

2. Unpropertize kill ring on quit
#+begin_src emacs-lisp
  (defun actuator-unpropertize-kill-ring ()
    "It do thing."
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook #'actuator-unpropertize-kill-ring)
#+end_src

#+results:
| actuator-unpropertize-kill-ring | org-clock-save | org-id-locations-save | savehist-autosave | recentf-save-list | save-place-kill-emacs-hook | org-babel-remove-temporary-directory |

3. Savehist on kill only

#+begin_src emacs-lisp
  (setq savehist-autosave-interval nil)
  (add-hook 'kill-emacs-hook #'savehist-save)
#+end_src

#+results:
| savehist-save | actuator-unpropertize-kill-ring | org-clock-save | org-id-locations-save | savehist-autosave | recentf-save-list | save-place-kill-emacs-hook | org-babel-remove-temporary-directory |
* Made a keyboard macro

https://www.emacswiki.org/emacs/KeyboardMacros

https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html

http://ergoemacs.org/emacs/emacs_macro_example.html

C-x ( start defining a keyboard macro
C-x ) end a keyboard macro
C-u C-x ( replay macro and append keys to the definition
C-u C-u C-x ( don’t replay but append keys
C-x C-k r run the last keyboard macro on each line that begins in the region

C-x C-k n name the most recent macro
C-x C-k b bind the most recent macro to a keybinding (for the session only)
M-x insert-kbd-macro insert the most recent macro into the buffer as lisp That’s how you save it

C-x C-k 0-9 and C-x C-k A-Z are reserved for keyboard macros

#+begin_src emacs-lisp
  (fset 'actuator-make-checklist
        (kmacro-lambda-form [?\C-a ?- ?  ?\[ ?  ?\] ?  ?ã] 0 "%d"))
  (global-set-key (kbd "C-x C-k 1") #'actuator-make-checklist)
#+end_src
* Copy sentence
#+begin_src emacs-lisp
  (defun actuator-copy-sentence ()
    "Save the entire sentence to the clipboard/kill ring."
    (interactive)
    (save-excursion
      (backward-sentence)
      (mark-end-of-sentence nil)
      (copy-region-as-kill nil nil t)))
#+end_src
