#    -*- mode: org -*-


Archived entries from file /home/g/env.d/emacs.org


* Disabled
   :PROPERTIES:
   :header-args: :tangle no
   :ARCHIVE_TIME: 2021-04-20 Tue 10:42
   :ARCHIVE_FILE: ~/env.d/emacs.org
   :ARCHIVE_CATEGORY: emacs
   :END:
** Completion at point
#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

https://with-emacs.com/posts/tutorials/customize-completion-at-point/

#+begin_src emacs-lisp
  (autoload 'ffap-file-at-point "ffap")
  (defun complete-path-at-point+ ()
    "Return completion data for UNIX path at point."
    (let ((fn (ffap-file-at-point))
	  (fap (thing-at-point 'filename)))
      (when (and (or fn (equal "/" fap))
		 (save-excursion
		   (search-backward fap (line-beginning-position) t)))
	(list (match-beginning 0)
	      (match-end 0)
	      #'completion-file-name-table :exclusive 'no))))

  (add-hook 'completion-at-point-functions
	    #'complete-path-at-point+
	    'append)
#+end_src

** Matrix
#+begin_src emacs-lisp
  (use-package matrix-client
    :straight (matrix-client :host github
			     :repo "alphapapa/matrix-client.el"))
#+end_src

** Smart Tab

#+begin_src emacs-lisp
  (use-package smart-tab
    :disabled t
    ;
    :functions global-smart-tab-mode
    :config
    (global-smart-tab-mode 1)
    :custom
    (smart-tab-using-hippie-expand t)
    (smart-tab-completion-functions-alist nil))
#+end_src

** Checklist

#+begin_src emacs-lisp :tangle no
  (use-package org-checklist

    :config
    (add-to-list 'org-modules 'org-checklist))
#+end_src

** Backends
#+begin_src emacs-lisp
  ;;(setq org-export-backends '(html icalendar latex))
#+end_src
** Publish Project
#+begin_src emacs-lisp
  (setq org-publish-project-alist
	`(("blog-org"
	   :base-directory ,org-directory
	   :base-extension "blog\\.org"
	   :publishing-directory "~/Documents/Projects/mac-into-sh"
	   :publishing-function org-md-publish-to-md
	   :with-broken-links mark
	   )
	  ("blog-images"
	   :base-directory ,org-directory
	   :base-extension "jpg\\|gif\\|png\\|jpeg"
	   :publishing-directory "~/Documents/Projects/mac-into-sh/images"
	   :recursive t
	   :publishing-function org-publish-attachment)
	  ("blog" :components ("blog-org" "blog-images"))))
#+end_src
** Hugo
#+begin_src emacs-lisp
  (use-package ox-hugo

    :custom
    org-hugo-section "posts")
#+end_src

#+begin_src emacs-lisp
  (define-skeleton hugo-header-skeleton
    "Insert the required Hugo information into a file."
    > "#+title: " (setq v1 (skeleton-read "Title: ")) \n
    "#+date: \n"
    "#+hugo_base_dir: ~/Documents/Projects/mac-into-sh/\n"
    "#+export_file_name: index\n"
    "#+hugo_bundle: " (replace-regexp-in-string " " "-" (downcase v1))
    "\n"
    "* " v1 "\n" _ "\n\n"
    "* Metadata                       :noexport:blog:unpublished:")
#+end_src
** Prodigy
#+begin_src emacs-lisp
  (use-package prodigy

    :config
    (prodigy-define-service
     :name "Hugo"
     :command "hugo"
     :args '("server" "-D")
     :cwd "~/Documents/Projects/mac-into-sh"
     :stop-signal 'sigkill
     :kill-process-buffer-on-stop t))
#+end_src
** Ignore headlines
#+begin_src emacs-lisp :tangle no
  (use-package ox-extra

    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))
#+end_src

Then tag a headline with ~:ignore:~ to avoid the headline being exported. The content will be though.

*References*
- [[https://emacs.stackexchange.com/questions/38184/org-mode-ignore-heading-when-exporting-to-latex#41685][StackExchange]]
** Skeleton
You can define a skeleton to expand as an abbrev expansion. Add it to the list via ~M-x edit-abbrevs~ as shown here

#+begin_example
  (c-mode-abbrev-table)
  "example" 0 "" example-skeleton
#+end_example

In this, the abbrev is added to C-mode, it is invoked when you type "example," it runs the skeleton defined ~example-skeleton~ and has been run zero times.

*References*
- [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Skeletons-as-Abbrevs.html][GNU Manual]] [2020-04-26 Sun]

** Spell check

#+begin_src emacs-lisp
;; comment
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package flyspell

    :custom
    (flyspell-abbrev-p t)
    (flyspell-use-global-abbrev-table-p t)
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    (flyspell-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package flyspell-correct-ivy
     :after flyspell
     :bind (:map flyspell-mode-map
	   ("C-;" . flyspell-correct-word-generic))
     :custom (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package ispell

    ;;:ensure-system-package hunspell
    :custom
    ;; (when (executable-find "hunspell")
    ;;   (setq-default ispell-program-name "hunspell")
    ;;   (setq ispell-really-hunspell t))
    (ispell-current-personal-dictionary "~/.dict"))
#+end_src

** Dired subtree

#+begin_src emacs-lisp
  (use-package dired-subtree
    :disabled t
    :config
    :bind (:map dired-mode-map
	       ("i" . dired-subtree-cycle)))
#+end_src
** Dired git info

#+begin_src emacs-lisp
  (use-package dired-git-info
    :disabled t

    :bind (:map dired-mode-map
		(")" . dired-git-info-mode)))
#+end_src
** Diredfl

#+begin_src emacs-lisp
  (use-package diredfl
    :disabled t

    :config
    (diredfl-global-mode 1))
#+end_src
** Dired Open

#+begin_src emacs-lisp
  (defun actuator-dired-open ()
    "Open the file at point with open."
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
	   (nfiles (length files)))
      (when (or (< nfiles 8)
		(y-or-n-p (format "Really open %d files?" nfiles)))
	(dolist (file files) (start-process "open" nil "open" file)))))
  (bind-key "e" #'actuator-dired-open dired-mode-map)
#+end_src

** Fancy refile

#+begin_src emacs-lisp
  (defmacro actuator-org-make-refile-command (fn-suffix refile-targets)
    "Generate a command to call `org-refile' with modified targets."
    `(defun ,(intern (concat "actuator-org-refile-" (symbol-name fn-suffix))) ()
       ,(format "`org-refile' to %S" refile-targets)
       (interactive)
       (org-refile-cache-clear)
       (let ((org-refile-target-verify-function nil)
	     (org-refile-targets ,refile-targets))
	 (call-interactively 'org-refile))))
#+end_src

#+begin_src emacs-lisp
  (actuator-org-make-refile-command this-file `((,(buffer-file-name) :maxlevel . 9)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (defhydra actuator-org-refile-hydra (:color blue :hint nil)
    "
_t_his file"
    ("t" actuator-org-refile-this-file))
  (bind-key "C-c r" #'actuator-org-refile-hydra/body org-mode-map)
#+end_src

https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html
** MRU Clock

#+begin_src emacs-lisp
  (use-package org-mru-clock
    :disabled t

    :bind
    ("C-c C-x i" . org-mru-clock-in)
    ("C-c C-x C-j . org-mru-clock-select-recent-task")
    :custom
    (org-mru-clock-completing-read 'ivy-completing-read))
#+end_src
** Hydra

#+begin_src emacs-lisp
  (use-package hydra

    :custom
    (hydra-hint-display-type 'lv))
#+end_src

** Pulse Line
#+begin_src emacs-lisp
  (defun pulse-line (&rest _)
	"Pulse the current line."
	(pulse-momentary-highlight-one-line (point)))

  (dolist (command '(scroll-up-command scroll-down-command
		     recenter-top-bottom other-window))
    (advice-add command :after #'pulse-line))
#+end_src

** Auto-upgrade
#+begin_src emacs-lisp
    (use-package auto-package-update
      :ensure t
      :demand t
      :config
      (require 'auto-package-update)
      ;;:hook (auto-package-update-before . actuator-backup-emacs-directory)
)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun actuator-backup-emacs-directory ()
    "It does."
    (shell-command "BORG_REPO=~/Backup/emacs borg create --stats --verbose \\
  --compression zstd,22 ::{hostname}-{now} \\
  ~/.config/emacs" "*Package backup log*")
    (shell-command "BORG_REPO=~/Backup/emacs borg prune --stats --keep-last 10 \\
  --save-space" "*Package backup log*"))
#+end_src

** Git autocommit
#+begin_src emacs-lisp
  (use-package git-auto-commit-mode
    :ensure t)
#+end_src

** Sunrise/set

#+begin_src emacs-lisp :tangle no
  (require 'solar)
  (setq calendar-location-name "St. John's, NL")

  (defun solar-sunrise-string (date &optional nolocation)
    "String of *local* time of sunrise and daylight on Gregorian DATE."
    (let ((l (solar-sunrise-sunset date)))
      (format
       "%s (%s hours daylight)"
       (if (car l)
       (concat "Sunrise " (apply 'solar-time-string (car l)))
	 "no sunrise")
       (nth 2 l)
       )))
  ;; To be called from diary-list-sexp-entries, where DATE is bound.
  ;;;###diary-autoload
  (defun diary-sunrise ()
    "Local time of sunrise as a diary entry.
    Accurate to a few seconds."
    (or (and calendar-latitude calendar-longitude calendar-time-zone)
	(solar-setup))
    (solar-sunrise-string date))

    (defun solar-sunset-string (date &optional nolocation)
    "String of *local* time of sunset and daylight on Gregorian DATE."
    (let ((l (solar-sunrise-sunset date)))
      (format
       "%s (%s hours daylight)"
       (if (cadr l)
       (concat "Sunset " (apply 'solar-time-string (cadr l)))
	 "no sunset")
       (nth 2 l)
       )))
  ;; To be called from diary-list-sexp-entries, where DATE is bound.
  ;;;###diary-autoload
  (defun diary-sunset ()
    "Local time of sunset as a diary entry.
    Accurate to a few seconds."
    (or (and calendar-latitude calendar-longitude calendar-time-zone)
	(solar-setup))
    (solar-sunset-string date))
#+end_src

[[https://www.reddit.com/r/orgmode/comments/a1z26t/sunrise_sunset_as_separate_entries_on_agenda_view/][Sunrise Sunset as Separate Entries on Agenda View (SUPPORT) : orgmode]]
[[https://stackoverflow.com/questions/22889036/custom-diary-sunrise-function-not-working-autoload-diary-emacs][elisp - Custom diary-sunrise function not working. `autoload-diary`? (Emacs.)...]]

** Truncate
#+begin_src emacs-lisp
  (setq truncate-partial-width-windows nil)
  (toggle-truncate-lines 1) ; Don't wrap lines by default
  (add-hook 'text-mode-hook    #'turn-on-visual-line-mode)
  (add-hook 'prog-mode-hook    #'auto-fill-mode)
  (add-hook 'special-mode-hook #'turn-on-visual-line-mode)
#+end_src
** SMTP Mail

#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :custom
    (smtpmail-default-smtp-server "smtp.fastmail.com")
    (smtpmail-smtp-server "smtp.fastmail.com")
    (smtpmail-smtp-service 587))
#+end_src
